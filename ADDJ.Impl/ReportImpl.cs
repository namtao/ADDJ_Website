using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using ADDJ.Core.Provider;
using ADDJ.Entity;
using System.Data.SqlClient;
using ADDJ.Core;
using System.Data;
using SolrNet.Commands.Parameters;
using SolrNet;
using ADDJ.Admin;

namespace ADDJ.Impl
{
    public class ReportImpl : BaseImpl<KhieuNai_ReportInfo>
    {
        private const string SOLR_GQKN = "GQKN";
        private const string SOLR_ACTIVITY = "Activity";
        private const string SOLR_SOTIEN = "SoTien";
        private const string SOLR_KETQUAXULY = "KetQuaXuLy";

        private const int PERMISSIONSCHEMES_DONGKN = 6; // PermissionSchemes.Id

        protected override void SetInfoDerivedClass()
        {
            TableName = "KhieuNai";
        }

        private static List<KhieuNai_ReportInfo> _ListKhieuNai;
        // Tạm thời để hàm ListAllKhieuNai.
        public static List<KhieuNai_ReportInfo> ListKhieuNai
        {
            get
            {
                if (_ListKhieuNai == null)
                    _ListKhieuNai = new ReportImpl().GetList();
                return _ListKhieuNai;
            }
            set { _ListKhieuNai = value; }
        }

        private string URL_SOLR_GQKN
        {
            get
            {
                return Config.ServerSolr + SOLR_GQKN;
            }
        }

        private string URL_SOLR_ACTIVITY
        {
            get
            {
                return Config.ServerSolr + SOLR_ACTIVITY;
            }
        }

        private string URL_SOLR_SOTIEN
        {
            get
            {
                return Config.ServerSolr + SOLR_SOTIEN;
            }
        }

        private string URL_SOLR_KETQUAXULY
        {
            get
            {
                return Config.ServerSolr + SOLR_KETQUAXULY;
            }
        }

        #region Function
        #region Bao cao cuoc
        //public List<KhieuNai_ReportInfo> BaoCaoTongHopGiamTruCuocDV(int khuVucID, int donViID, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        //{
        //    List<KhieuNai_ReportInfo> list = null;

        //    SqlParameter[] param = {
        //                               new SqlParameter("@KhuVucID", khuVucID),
        //                               new SqlParameter("@DonVi",donViID),
        //                               new SqlParameter("@FromDate",fromDate),
        //                               new SqlParameter("@ToDate",toDate),
        //                               new SqlParameter("@LoaiKhieuNaiID",loaiKhieuNaiID),
        //                               new SqlParameter("@LinhVucChungID",linhVucChungID),
        //                               new SqlParameter("@LinhVucConID",linhVucConID)
        //                           };

        //    try
        //    {
        //        list = base.ExecuteQuery("rp_KhieuNai_BaoCaoTongHopGiamTru", param);
        //    }
        //    catch (Exception ex)
        //    {
        //        Utility.LogEvent(ex);
        //    }
        //    return list;

        //}

        //public List<KhieuNai_ReportInfo> BaoCaoChiTietGiamTruCuocDV(int khuVucID, int donViID, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        //{

        //    List<KhieuNai_ReportInfo> list = null;

        //    SqlParameter[] param = {
        //                               new SqlParameter("@KhuVucID", khuVucID),
        //                               new SqlParameter("@DonVi",donViID),
        //                               new SqlParameter("@FromDate",fromDate),
        //                               new SqlParameter("@ToDate",toDate),
        //                               new SqlParameter("@LoaiKhieuNaiID",loaiKhieuNaiID),
        //                               new SqlParameter("@LinhVucChungID",linhVucChungID),
        //                               new SqlParameter("@LinhVucConID",linhVucConID)
        //                           };

        //    try
        //    {
        //        list = base.ExecuteQuery("rp_KhieuNai_BaoCaoChiTietGiamTru", param);
        //    }
        //    catch (Exception ex)
        //    {

        //        Utility.LogEvent(ex);
        //    }
        //    return list;
        //}
        #endregion

        #region Bao cao cuoc theo loai khieu nai

        public List<KhieuNai_ReportInfo> BaoCaoChiTietPPS(int khuVucID, int donViID, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        {

            List<KhieuNai_ReportInfo> list = null;

            SqlParameter[] param = {
                                       new SqlParameter("@KhuVucID", khuVucID),
                                       new SqlParameter("@DonVi",donViID),
                                       new SqlParameter("@FromDate",fromDate),
                                       new SqlParameter("@ToDate",toDate),
                                       new SqlParameter("@LoaiKhieuNaiID",loaiKhieuNaiID),
                                       new SqlParameter("@LinhVucChungID",linhVucChungID),
                                       new SqlParameter("@LinhVucConID",linhVucConID)
                                   };

            try
            {
                list = base.ExecuteQuery("rp_KhieuNai_BaoCaoChiTietPPS", param);
            }
            catch (Exception ex)
            {
                Utility.LogEvent(ex);
            }
            return list;

        }

        public List<KhieuNai_ReportInfo> BaoCaoChiTietPOST(int khuVucID, int donViID, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        {

            List<KhieuNai_ReportInfo> list = null;

            SqlParameter[] param = {
                                       new SqlParameter("@KhuVucID", khuVucID),
                                       new SqlParameter("@DonVi",donViID),
                                       new SqlParameter("@FromDate",fromDate),
                                       new SqlParameter("@ToDate",toDate),
                                       new SqlParameter("@LoaiKhieuNaiID",loaiKhieuNaiID),
                                       new SqlParameter("@LinhVucChungID",linhVucChungID),
                                       new SqlParameter("@LinhVucConID",linhVucConID)
                                   };

            try
            {
                list = base.ExecuteQuery("rp_KhieuNai_BaoCaoChiTietPOST", param);
            }
            catch (Exception ex)
            {
                Utility.LogEvent(ex);
            }
            return list;

        }

        #endregion

        //        public List<KhieuNai_ReportInfo> DanhSachKhieuNai(int khuVucID, int donViID, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        //        {

        //            List<KhieuNai_ReportInfo> list = null;

        //            SqlParameter[] param = {
        //                                       new SqlParameter("@KhuVucID", khuVucID),
        //                                       new SqlParameter("@DonVi",donViID),
        //                                       new SqlParameter("@FromDate",fromDate),
        //                                       new SqlParameter("@ToDate",toDate),
        //                                       new SqlParameter("@LoaiKhieuNaiID",loaiKhieuNaiID),
        //                                       new SqlParameter("@LinhVucChungID",linhVucChungID),
        //                                       new SqlParameter("@LinhVucConID",linhVucConID)
        //                                   };

        //            try
        //            {
        //                list = base.ExecuteQuery("rp_KhieuNai_DanhSachKhieuNai", param);
        //            }
        //            catch (Exception ex)
        //            {
        //                Utility.LogEvent(ex);
        //            }
        //            return list;
        //        }

        //        /// <summary>
        //        /// Author : Phi Hoang Hai
        //        /// Created date : 16/09/2013
        //        /// Todo : Tạo báo cáo tổng hợp theo khiếu nại
        //        /// </summary>
        //        /// <param name="donViID"></param>
        //        /// <param name="fromDate"></param>
        //        /// <param name="toDate"></param>
        //        /// <param name="listDoiTacId"></param>
        //        /// <param name="loaiKhieuNaiId"></param>
        //        /// <returns></returns>
        //        public DataSet BaoCaoTongHopTheoKhieuNai(int khuVucId, int phongBanXuLyId, int fromDate, int toDate, List<string> listDoiTacId, 
        //                                                 List<string> listLoaiKhieuNaiId, List<string> listLinhVucChungId, List<string> listLinhVucConId)
        //        {
        //            DataSet dsResult = new DataSet();

        //            string loaiKhieuNaiId = string.Empty;
        //            string linhVucChungId = string.Empty;
        //            string linhVucConId = string.Empty;

        //            string sqlLoaiKhieuNai = string.Empty;
        //            string sqlLinhVucChung = string.Empty;
        //            string sqlLinhVucCon = string.Empty;

        //            for (int indexDoiTac = 0; indexDoiTac < listDoiTacId.Count; indexDoiTac++)
        //            {
        //                if (listLoaiKhieuNaiId.Count > 0)
        //                {
        //                    sqlLoaiKhieuNai = string.Format(@"{0}, (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                    WHERE k1.LoaiKhieuNaiId = lkn.Id
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)
        //			                                                    AND k1.DoiTacId = {1}
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate) AS '{1}'", sqlLoaiKhieuNai, listDoiTacId[indexDoiTac]);
        //                }


        //                if (listLinhVucChungId.Count > 0)
        //                {
        //                    sqlLinhVucChung = string.Format(@"{0}, (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                    WHERE k1.LinhVucChungId = lkn.Id
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)
        //			                                                    AND k1.DoiTacId = {1}
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate) AS '{1}'", sqlLinhVucChung, listDoiTacId[indexDoiTac]);
        //                }


        //                if (listLinhVucConId.Count > 0)
        //                {
        //                    sqlLinhVucCon = string.Format(@"{0}, (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                    WHERE k1.LinhVucConId = lkn.Id
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)
        //			                                                    AND k1.DoiTacId = {1}
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate) AS '{1}'", sqlLinhVucCon, listDoiTacId[indexDoiTac]);
        //                }               
        //            }

        //            for (int i = 0; i < listLoaiKhieuNaiId.Count; i++)
        //            {
        //                loaiKhieuNaiId = string.Format("{0}'{1}',", loaiKhieuNaiId, listLoaiKhieuNaiId[i]);
        //            }

        //            if (loaiKhieuNaiId.Length > 0)
        //            {
        //                loaiKhieuNaiId = loaiKhieuNaiId.TrimEnd(',');
        //            }

        //            for (int i = 0; i < listLinhVucChungId.Count; i++)
        //            {
        //                linhVucChungId = string.Format("{0}'{1}',", linhVucChungId, listLinhVucChungId[i]);
        //            }

        //            if (linhVucChungId.Length > 0)
        //            {
        //                linhVucChungId = linhVucChungId.TrimEnd(',');
        //            }

        //            for (int i = 0; i < listLinhVucConId.Count; i++)
        //            {
        //                linhVucConId = string.Format("{0}'{1}',", linhVucConId, listLinhVucConId[i]);
        //            }

        //            if (linhVucConId.Length > 0)
        //            {
        //                linhVucConId = linhVucConId.TrimEnd(',');
        //            }

        //            #region Sql tính tổng số PAKN giải quyết trong tuần

        //            string sqlTongSoPAKNGiaiQuyetTrongTuan_LoaiKhieuNai = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                    WHERE k1.LoaiKhieuNaiId = lkn.Id		
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)	                                                    
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                AND k1.TrangThai = 3) AS TongSoPAKNGiaiQuyetDuoc";

        //            string sqlTongSoPAKNGiaiQuyetTrongTuan_LinhVucChung = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                    WHERE k1.LinhVucChungId = lkn.Id
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)			                                                    
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                AND k1.TrangThai = 3) AS TongSoPAKNGiaiQuyetDuoc";

        //            string sqlTongSoPAKNGiaiQuyetTrongTuan_LinhVucCon = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                    WHERE k1.LinhVucConId = lkn.Id		
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)	                                                    
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                AND k1.TrangThai = 3) AS TongSoPAKNGiaiQuyetDuoc";

        //            #endregion

        //            #region Sql tính  PAKN TỔ XLNV GIẢI QUYẾT ĐƯỢC

        //            string sqlSoPAKNToXLNVGiaiQuyetDuoc_LoaiKhieuNai = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                        WHERE k1.LoaiKhieuNaiId = lkn.Id	
        //                                                                    AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                        AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                    AND k1.TrangThai = 3
        //                                                                    AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS  TongSoPAKNToXLNVGiaiQuyetDuoc";
        //            string sqlSoPAKNToXLNVGiaiQuyetDuoc_LinhVucChung = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                        WHERE k1.LinhVucChungId = lkn.Id	
        //                                                                    AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                        AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                    AND k1.TrangThai = 3
        //                                                                    AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS  TongSoPAKNToXLNVGiaiQuyetDuoc";
        //            string sqlSoPAKNToXLNVGiaiQuyetDuoc_LinhVucCon = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                        WHERE k1.LinhVucConId = lkn.Id	
        //                                                                    AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                        AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                    AND k1.TrangThai = 3
        //                                                                    AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS  TongSoPAKNToXLNVGiaiQuyetDuoc";

        //            #endregion

        //            #region Sql tính Tổng số PAKN chuyển các đơn vị liên quan

        //            string sqlTongSoPAKNChuyenDonViLienQuan_LoaiKhieuNai = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //                                                                        INNER JOIN KhieuNai_Activity ka  ON k1.Id = ka.KhieuNaiId                                                                            
        //		                                                    WHERE k1.LoaiKhieuNaiId = lkn.Id	
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                AND ka.PhongBanXuLyTruocId = @PhongBanXuLyId
        //                                                                AND ka.PhongBanXuLyTruocId <> ka.PhongBanXuLyId) AS TongSoPAKNChuyenDonViLienQuan";
        //            string sqlTongSoPAKNChuyenDonViLienQuan_LinhVucChung = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //                                                                        INNER JOIN KhieuNai_Activity ka  ON k1.Id = ka.KhieuNaiId                                                                       
        //		                                                    WHERE k1.LinhVucChungId = lkn.Id	
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                AND ka.PhongBanXuLyTruocId = @PhongBanXuLyId
        //                                                                AND ka.PhongBanXuLyTruocId <> ka.PhongBanXuLyId) AS TongSoPAKNChuyenDonViLienQuan";
        //            string sqlTongSoPAKNChuyenDonViLienQuan_LinhVucCon = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //                                                                        INNER JOIN KhieuNai_Activity ka  ON k1.Id = ka.KhieuNaiId                                                                          
        //		                                                    WHERE k1.LinhVucConId = lkn.Id	
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                AND ka.PhongBanXuLyTruocId = @PhongBanXuLyId
        //                                                                AND ka.PhongBanXuLyTruocId <> ka.PhongBanXuLyId) AS TongSoPAKNChuyenDonViLienQuan";

        //            #endregion

        //            #region Sql Đơn vị nhận chuyển tiếp khiếu nại

        //            string sqlDonViNhanChuyenTiepKhieuNai_LoaiKhieuNai = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //                                                                        INNER JOIN KhieuNai_Activity ka  ON k1.Id = ka.KhieuNaiId                                                                            
        //		                                                    WHERE k1.LoaiKhieuNaiId = lkn.Id	
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                AND ka.PhongBanXuLyId = @PhongBanXuLyId
        //                                                                AND ka.PhongBanXuLyTruocId <> ka.PhongBanXuLyId) AS DonViNhanChuyenTiepKhieuNai";
        //            string sqlDonViNhanChuyenTiepKhieuNai_LinhVucChung = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //                                                                        INNER JOIN KhieuNai_Activity ka  ON k1.Id = ka.KhieuNaiId                                                                       
        //		                                                    WHERE k1.LinhVucChungId = lkn.Id		
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)	                                                    
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                AND ka.PhongBanXuLyId = @PhongBanXuLyId
        //                                                                AND ka.PhongBanXuLyTruocId <> ka.PhongBanXuLyId) AS DonViNhanChuyenTiepKhieuNai";
        //            string sqlDonViNhanChuyenTiepKhieuNai_LinhVucCon = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //                                                                        INNER JOIN KhieuNai_Activity ka  ON k1.Id = ka.KhieuNaiId                                                                          
        //		                                                    WHERE k1.LinhVucConId = lkn.Id		
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)	                                                    
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                AND ka.PhongBanXuLyId = @PhongBanXuLyId
        //                                                                AND ka.PhongBanXuLyTruocId <> ka.PhongBanXuLyId) AS DonViNhanChuyenTiepKhieuNai";

        //            #endregion

        //            #region Sql Số khiếu nại tiếp nhận trong tuần tồn đọng do quá hạn

        //            string sqlTongSoKhieuNaiTonDongDoQuaHan_LoaiKhieuNai = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1                                                                                                                                              
        //		                                                    WHERE k1.LoaiKhieuNaiId = lkn.Id	
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                    AND k1.NgayQuaHanSort >= @FromDate AND k1.NgayQuaHanSort <= @ToDate
        //                                                                AND k1.TrangThai <> 3
        //                                                                AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS TongSoKhieuNaiTonDongDoQuaHan";
        //            string sqlTongSoKhieuNaiTonDongDoQuaHan_LinhVucChung = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1                                                                                                                                      
        //		                                                    WHERE k1.LinhVucChungId = lkn.Id	
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                    AND k1.NgayQuaHanSort >= @FromDate AND k1.NgayQuaHanSort <= @ToDate
        //                                                                AND k1.TrangThai <> 3
        //                                                                AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS TongSoKhieuNaiTonDongDoQuaHan";
        //            string sqlTongSoKhieuNaiTonDongDoQuaHan_LinhVucCon = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1                                                                                                                                             
        //		                                                    WHERE k1.LinhVucConId = lkn.Id
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)			                                                    
        //			                                                    AND k1.NgayQuaHanSort >= @FromDate AND k1.NgayQuaHanSort <= @ToDate
        //                                                                AND k1.TrangThai <> 3
        //                                                                AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS TongSoKhieuNaiTonDongDoQuaHan";

        //            #endregion

        //            #region Sql Đơn vị tồn đọng khiếu nại

        //            string sqlDonViTonDongKhieuNai_LoaiKhieuNai = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1                                                                                                                                              
        //		                                                    WHERE k1.LoaiKhieuNaiId = lkn.Id	
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                    AND k1.NgayQuaHanSort >= @FromDate AND k1.NgayQuaHanSort <= @ToDate
        //                                                                AND k1.TrangThai <> 3
        //                                                                AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS DonViTonDongKhieuNai";
        //            string sqlDonViTonDongKhieuNai_LinhVucChung = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1                                                                                                                                      
        //		                                                    WHERE k1.LinhVucChungId = lkn.Id
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)			                                                    
        //			                                                    AND k1.NgayQuaHanSort >= @FromDate AND k1.NgayQuaHanSort <= @ToDate
        //                                                                AND k1.TrangThai <> 3
        //                                                                AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS DonViTonDongKhieuNai";
        //            string sqlDonViTonDongKhieuNai_LinhVucCon = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1                                                                                                                                             
        //		                                                    WHERE k1.LinhVucConId = lkn.Id	
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                    AND k1.NgayQuaHanSort >= @FromDate AND k1.NgayQuaHanSort <= @ToDate
        //                                                                AND k1.TrangThai <> 3
        //                                                                AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS DonViTonDongKhieuNai";

        //            #endregion

        //            string sql = string.Empty;

        //            if (listLoaiKhieuNaiId.Count > 0)
        //            {
        //                sql = string.Format(@"SELECT Id AS LoaiKhieuNaiId, Name AS LoaiKhieuNai, '0' AS ParentId {0} {2} {3} {4} {5} {6} {7} FROM LoaiKhieuNai lkn
        //                                            WHERE  lkn.Id IN ({1});", sqlLoaiKhieuNai, loaiKhieuNaiId, sqlTongSoPAKNGiaiQuyetTrongTuan_LoaiKhieuNai,
        //                                                                    sqlSoPAKNToXLNVGiaiQuyetDuoc_LoaiKhieuNai, sqlTongSoPAKNChuyenDonViLienQuan_LoaiKhieuNai,
        //                                                                    sqlDonViNhanChuyenTiepKhieuNai_LoaiKhieuNai, sqlTongSoKhieuNaiTonDongDoQuaHan_LoaiKhieuNai, 
        //                                                                    sqlDonViTonDongKhieuNai_LoaiKhieuNai);
        //            }
        //            else
        //            {
        //                sql = "SELECT * FROM LoaiKhieuNai WHERE Id = -1;";
        //            }

        //            if (listLinhVucChungId.Count > 0)
        //            {
        //                sql = string.Format(@"{0} SELECT Id AS LinhVucChungId, Name AS LinhVucChung, ParentId {1} {3} {4} {5} {6} {7} {8} FROM LoaiKhieuNai lkn
        //                                            WHERE lkn.Id IN ({2});", sql, sqlLinhVucChung, linhVucChungId, sqlTongSoPAKNGiaiQuyetTrongTuan_LinhVucChung,
        //                                                                    sqlSoPAKNToXLNVGiaiQuyetDuoc_LinhVucChung, sqlTongSoPAKNChuyenDonViLienQuan_LinhVucChung,
        //                                                                    sqlDonViNhanChuyenTiepKhieuNai_LinhVucChung, sqlTongSoKhieuNaiTonDongDoQuaHan_LinhVucChung, 
        //                                                                    sqlDonViTonDongKhieuNai_LinhVucChung);
        //            }
        //            else
        //            {
        //                sql = string.Format(@"{0} SELECT * FROM KhieuNai WHERE Id = -1;", sql);
        //            }

        //            if (listLinhVucConId.Count > 0)
        //            {
        //                sql = string.Format(@"{0}  SELECT Id AS LinhVucConId, Name AS LinhVucCon, ParentId {1} {3} {4} {5} {6} {7} {8} FROM LoaiKhieuNai lkn
        //                                            WHERE lkn.Id IN ({2});", sql, sqlLinhVucCon, linhVucConId, sqlTongSoPAKNGiaiQuyetTrongTuan_LinhVucCon,
        //                                                                    sqlSoPAKNToXLNVGiaiQuyetDuoc_LinhVucCon, sqlTongSoPAKNChuyenDonViLienQuan_LinhVucCon,
        //                                                                    sqlDonViNhanChuyenTiepKhieuNai_LinhVucCon, sqlTongSoKhieuNaiTonDongDoQuaHan_LinhVucCon, 
        //                                                                    sqlDonViTonDongKhieuNai_LinhVucCon);
        //            }
        //            else
        //            {
        //                sql = string.Format(@"{0} SELECT * FROM KhieuNai WHERE Id = -1;", sql);
        //            }

        //            var conn = new SqlConnection(ConnectionString);              
        //            var dsCmd = new SqlCommand(sql, conn);
        //            dsCmd.CommandType = CommandType.Text;
        //            dsCmd.Parameters.AddWithValue("@KhuVucID", khuVucId);
        //            dsCmd.Parameters.AddWithValue("@FromDate", fromDate);
        //            dsCmd.Parameters.AddWithValue("@ToDate", toDate);
        //            dsCmd.Parameters.AddWithValue("@PhongBanXuLyId", phongBanXuLyId);

        //            try
        //            {
        //                conn.Open();
        //                SqlDataAdapter da = new SqlDataAdapter(dsCmd);
        //                da.Fill(dsResult);
        //            }
        //            catch (Exception ex)
        //            {
        //                Utility.LogEvent(ex);
        //            }
        //            finally
        //            {
        //                conn.Close();
        //            }

        //            return dsResult;
        //        }

        //        /// <summary>
        //        /// Author : Phi Hoang Hai
        //        /// Created date : 25/09/2013
        //        /// Todo : Thực hiện báo cáo theo khiếu nại (sử dụng lệnh Sql)
        //        /// </summary>
        //        /// <param name="phongBanXuLyId"></param>
        //        /// <param name="fromDate"></param>
        //        /// <param name="toDate"></param>
        //        /// <param name="listLoaiKhieuNaiId"></param>
        //        /// <param name="listLinhVucChungId"></param>
        //        /// <param name="listLinhVucConId"></param>
        //        /// <returns></returns>
        //        public DataSet BaoCaoTheoLoaiKhieuNaiUseSql(int khuVucId, int phongBanXuLyId, int fromDate, int toDate, List<string> listLoaiKhieuNaiId, List<string> listLinhVucChungId, List<string> listLinhVucConId)
        //        {
        //            DataSet dsResult = new DataSet();

        //            string sql = string.Empty;
        //            string sqlLoaiKhieuNai = string.Empty;
        //            string sqlLinhVucChung = string.Empty;
        //            string sqlLinhVucCon = string.Empty;
        //            string loaiKhieuNaiId = string.Empty;
        //            string linhVucChungId = string.Empty;
        //            string linhVucConId = string.Empty;

        //            for (int i = 0; i < listLoaiKhieuNaiId.Count; i++)
        //            {
        //                loaiKhieuNaiId = string.Format("{0}'{1}',", loaiKhieuNaiId, listLoaiKhieuNaiId[i]);
        //            }

        //            if (loaiKhieuNaiId.Length > 0)
        //            {
        //                loaiKhieuNaiId = loaiKhieuNaiId.TrimEnd(',');
        //            }

        //            for (int i = 0; i < listLinhVucChungId.Count; i++)
        //            {
        //                linhVucChungId = string.Format("{0}'{1}',", linhVucChungId, listLinhVucChungId[i]);
        //            }

        //            if (linhVucChungId.Length > 0)
        //            {
        //                linhVucChungId = linhVucChungId.TrimEnd(',');
        //            }

        //            for (int i = 0; i < listLinhVucConId.Count; i++)
        //            {
        //                linhVucConId = string.Format("{0}'{1}',", linhVucConId, listLinhVucConId[i]);
        //            }

        //            if (linhVucConId.Length > 0)
        //            {
        //                linhVucConId = linhVucConId.TrimEnd(',');
        //            }

        //            #region Lũy kế KN đã GQ đến đầu tuần 30/2013

        //            string sqlLuyKeKNDaGiaiQuyetDenDauTuanX_LoaiKhieuNai = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                        WHERE k1.LoaiKhieuNaiId = lkn.Id	
        //                                                                    AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                        AND k1.NgayTiepNhanSort >= DATEADD(yy, DATEDIFF(yy,0,getdate()), 0) AND k1.NgayTiepNhanSort <= @FromDate
        //                                                                    AND k1.TrangThai = 3
        //                                                                    AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS  LuyKeKNDaGiaiQuyetDenDauTuanX";
        //            string sqlLuyKeKNDaGiaiQuyetDenDauTuanX_LinhVucChung = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                        WHERE k1.LinhVucChungId = lkn.Id	
        //                                                                    AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                        AND k1.NgayTiepNhanSort >= DATEADD(yy, DATEDIFF(yy,0,getdate()), 0) AND k1.NgayTiepNhanSort <= @FromDate
        //                                                                    AND k1.TrangThai = 3
        //                                                                    AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS  LuyKeKNDaGiaiQuyetDenDauTuanX";
        //            string sqlLuyKeKNDaGiaiQuyetDenDauTuanX_LinhVucCon = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                        WHERE k1.LinhVucConId = lkn.Id	
        //                                                                    AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                        AND k1.NgayTiepNhanSort >= DATEADD(yy, DATEDIFF(yy,0,getdate()), 0) AND k1.NgayTiepNhanSort <= @FromDate
        //                                                                    AND k1.TrangThai = 3
        //                                                                    AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS  LuyKeKNDaGiaiQuyetDenDauTuanX";

        //            #endregion

        //            #region Lũy kế KN tồn đọng đầu tuần 30/2013

        //            string sqlLuyKeKNTonDongDenDauTuanX_LoaiKhieuNai = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                        WHERE k1.LoaiKhieuNaiId = lkn.Id	
        //                                                                    AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                        AND k1.NgayTiepNhanSort >= DATEADD(yy, DATEDIFF(yy,0,getdate()), 0) AND k1.NgayTiepNhanSort <= @FromDate
        //                                                                    AND k1.TrangThai <> 3
        //                                                                    AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS  sqlLuyKeKNTonDongDenDauTuanX";
        //            string sqlLuyKeKNTonDongDenDauTuanX_LinhVucChung = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                        WHERE k1.LinhVucChungId = lkn.Id
        //                                                                    AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)			                                                    
        //			                                                        AND k1.NgayTiepNhanSort >= DATEADD(yy, DATEDIFF(yy,0,getdate()), 0) AND k1.NgayTiepNhanSort <= @FromDate
        //                                                                    AND k1.TrangThai <> 3
        //                                                                    AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS  sqlLuyKeKNTonDongDenDauTuanX";
        //            string sqlLuyKeKNTonDongDenDauTuanX_LinhVucCon = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                        WHERE k1.LinhVucConId = lkn.Id		
        //                                                                    AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)	                                                    
        //			                                                        AND k1.NgayTiepNhanSort >= DATEADD(yy, DATEDIFF(yy,0,getdate()), 0) AND k1.NgayTiepNhanSort <= @FromDate
        //                                                                    AND k1.TrangThai <> 3
        //                                                                    AND k1.PhongBanXuLyId = @PhongBanXuLyId) AS  sqlLuyKeKNTonDongDenDauTuanX";

        //            #endregion

        //            #region Số lượng tiếp nhận trong tuần

        //            string sqlSoLuongTiepNhanTrongTuan_LoaiKhieuNai = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                            WHERE k1.LoaiKhieuNaiId = lkn.Id	
        //                                                        AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                
        //			                                            AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate) AS SoLuongTiepNhanTrongTuan";

        //            string sqlSoLuongTiepNhanTrongTuan_LinhVucChung = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                            WHERE k1.LinhVucChungId = lkn.Id	
        //                                                        AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                               
        //			                                            AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate) AS SoLuongTiepNhanTrongTuan";

        //            string sqlSoLuongTiepNhanTrongTuan_LinhVucCon = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                            WHERE k1.LinhVucConId = lkn.Id	
        //                                                        AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                              
        //			                                            AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate) AS SoLuongTiepNhanTrongTuan";


        //            #endregion

        //            #region Số lượng đã giải quyết trong tuần

        //             string sqlTongSoPAKNGiaiQuyetTrongTuan_LoaiKhieuNai = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                    WHERE k1.LoaiKhieuNaiId = lkn.Id
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)			                                                    
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                AND k1.TrangThai = 3) AS TongSoPAKNGiaiQuyetDuoc";

        //            string sqlTongSoPAKNGiaiQuyetTrongTuan_LinhVucChung = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                    WHERE k1.LinhVucChungId = lkn.Id	
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                AND k1.TrangThai = 3) AS TongSoPAKNGiaiQuyetDuoc";

        //            string sqlTongSoPAKNGiaiQuyetTrongTuan_LinhVucCon = @", (SELECT COUNT(k1.Id) FROM KhieuNai k1
        //		                                                    WHERE k1.LinhVucConId = lkn.Id	
        //                                                                AND (k1.KhuVucId = @KhuVucID OR @KhuVucID = -1)		                                                    
        //			                                                    AND k1.NgayTiepNhanSort >= @FromDate AND k1.NgayTiepNhanSort <= @ToDate
        //                                                                AND k1.TrangThai = 3) AS TongSoPAKNGiaiQuyetDuoc";

        //            #endregion



        //            if (listLoaiKhieuNaiId.Count > 0)
        //            {
        //                sql = string.Format(@"SELECT Id AS LoaiKhieuNaiId, Name AS LoaiKhieuNai, '0' AS ParentId  {1} {2} {3} {4} FROM LoaiKhieuNai lkn
        //                                            WHERE  lkn.Id IN ({0});",  loaiKhieuNaiId, sqlLuyKeKNDaGiaiQuyetDenDauTuanX_LoaiKhieuNai,
        //                                                                        sqlLuyKeKNTonDongDenDauTuanX_LoaiKhieuNai, sqlSoLuongTiepNhanTrongTuan_LoaiKhieuNai,
        //                                                                        sqlTongSoPAKNGiaiQuyetTrongTuan_LoaiKhieuNai);
        //            }
        //            else
        //            {
        //                sql = "SELECT * FROM LoaiKhieuNai WHERE Id = -1;";
        //            }

        //            if (listLinhVucChungId.Count > 0)
        //            {
        //                sql = string.Format(@"{0} SELECT Id AS LinhVucChungId, Name AS LinhVucChung, ParentId {2} {3} {4} {5} FROM LoaiKhieuNai lkn
        //                                            WHERE lkn.Id IN ({1});", sql, linhVucChungId, sqlLuyKeKNDaGiaiQuyetDenDauTuanX_LinhVucChung,
        //                                                                        sqlLuyKeKNTonDongDenDauTuanX_LinhVucChung, sqlSoLuongTiepNhanTrongTuan_LinhVucChung,
        //                                                                        sqlTongSoPAKNGiaiQuyetTrongTuan_LinhVucChung);
        //            }
        //            else
        //            {
        //                sql = string.Format(@"{0} SELECT * FROM KhieuNai WHERE Id = -1;", sql);
        //            }

        //            if (listLinhVucConId.Count > 0)
        //            {
        //                sql = string.Format(@"{0}  SELECT Id AS LinhVucConId, Name AS LinhVucCon, ParentId {2} {3} {4} {5} FROM LoaiKhieuNai lkn
        //                                            WHERE lkn.Id IN ({1});", sql, linhVucConId, sqlLuyKeKNDaGiaiQuyetDenDauTuanX_LinhVucCon,
        //                                                                        sqlLuyKeKNTonDongDenDauTuanX_LinhVucCon, sqlSoLuongTiepNhanTrongTuan_LinhVucCon,
        //                                                                        sqlTongSoPAKNGiaiQuyetTrongTuan_LinhVucCon);
        //            }
        //            else
        //            {
        //                sql = string.Format(@"{0} SELECT * FROM KhieuNai WHERE Id = -1;", sql);
        //            }

        //            sql = string.Format(@"{0}
        //
        //                            -- Báo cáo số PPS đã giải quyết trong tuần
        //                            SELECT LinhVucCon, MaDichVu, 
        //                                COUNT(CASE WHEN KQXuLy_CCT = 1 THEN 1 END) AS CapChiTiet,
        //                                COUNT(CASE WHEN KQXuLy_CCT = 0 THEN 1 END) AS BuCuoc,
        //                                ISNULL(SUM (CASE WHEN KQXuLy_CCT = 0 THEN KhieuNai_SoTien.SoTien END), 0) AS SoTien
        //                            FROM KhieuNai 
        //                                INNER JOIN LoaiKhieuNai ON KhieuNai.LinhVucConId = LoaiKhieuNai.Id
        //                                LEFT JOIN KhieuNai_SoTien ON KhieuNai.Id = KhieuNai_SoTien.KhieuNaiId
        //                            WHERE
        //                                    (NgayDongKNSort >= @FromDate OR @FromDate = -1)
        //                                  AND (NgayDongKNSort <= @ToDate OR @ToDate = -1)
        //                                  AND (KhuVucId = @KhuVucID OR @KhuVucID = -1)                                  
        //                                  AND (PhongBanXuLyId = @PhongBanXuLyId OR @PhongBanXuLyId = -1)
        //                            GROUP BY LinhVucCon, MaDichVu 
        //                            ORDER BY LinhVucCon ;
        //
        //                            -- Tính số lượng hỗ trợ cho các tỉnh thành
        //                            SELECT kn.MaTinh,
        //                                COUNT(CASE WHEN kn.KQXuLy_CSL = 1 THEN 1 END) AS CapSoLieuGoc, 
        //                                COUNT(CASE WHEN kn.KQXuLy_PTSL_IR = 1 THEN 1  END) AS PhanTichSoLieuIR, 
        //                                COUNT(CASE WHEN LEN(kn.KQXuLy_PTSL_Khac) > 0 THEN 1 END) AS GiaiThichSoLieuKhac
        //                            FROM KhieuNai kn 
        //                                --LEFT JOIN (select * from Province where LevelNbr = 1) pr ON (kn.MaTinhId = pr.Id)
        //                                --LEFT JOIN LoaiKhieuNai lkn ON (kn.LinhVucConId = lkn.Id)
        //                            WHERE
        //                                  (NgayDongKNSort >= @FromDate OR @FromDate = -1)
        //                                  AND (NgayDongKNSort <= @ToDate OR @ToDate = -1)                                    
        //                                  AND (KhuVucId = @KhuVucID OR @KhuVucID = -1) 
        //                                  AND (PhongBanXuLyId = @PhongBanXuLyId OR @PhongBanXuLyId = -1)
        //                            GROUP BY kn.MaTinh 
        //                            ORDER BY kn.MaTinh ASC;", sql);

        //            var conn = new SqlConnection(ConnectionString);
        //            var dsCmd = new SqlCommand(sql, conn);
        //            dsCmd.CommandType = CommandType.Text;
        //            dsCmd.Parameters.AddWithValue("@KhuVucID", khuVucId);
        //            dsCmd.Parameters.AddWithValue("@FromDate", fromDate);
        //            dsCmd.Parameters.AddWithValue("@ToDate", toDate);
        //            dsCmd.Parameters.AddWithValue("@PhongBanXuLyId", phongBanXuLyId);

        //            try
        //            {
        //                conn.Open();
        //                SqlDataAdapter da = new SqlDataAdapter(dsCmd);
        //                da.Fill(dsResult);
        //            }
        //            catch (Exception ex)
        //            {
        //                Utility.LogEvent(ex);
        //            }
        //            finally
        //            {
        //                conn.Close();
        //            }            

        //            return dsResult;
        //        }        

        #endregion

        #region Sử dụng Sql



        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 09/06/2014
        /// Todo : Lấy danh sách tồn đọng và quá hạn của các đối tác 
        /// </summary>
        /// <param name="listDoiTacId"></param>
        /// <returns></returns>
        public DataTable ListKhieuNaiTonDongVaQuaHanTaiThoiDiemHienTai_Sql(List<int> listDoiTacId)
        {
            if (listDoiTacId == null || listDoiTacId.Count == 0)
                return null;
            string sDoiTac = listDoiTacId[0].ToString();
            for (int i = 1; i < listDoiTacId.Count; i++)
            {
                sDoiTac = string.Format("{0},{1}", sDoiTac, listDoiTacId[i]);
            }

            DataTable dtResult = null;
            string sql = @"SELECT DoiTac.Id AS DoiTacId, TenDoiTac,
	                        (SELECT COUNT(KhieuNai.Id) FROM KhieuNai
                                INNER JOIN PhongBan ON KhieuNai.PhongBanXuLyId = PhongBan.Id                                
		                        WHERE PhongBan.DoiTacId = DoiTac.Id
		                            AND TrangThai <> 3) AS SoLuongTonDong,
	                        (SELECT COUNT(KhieuNai.Id) FROM KhieuNai
		                        INNER JOIN PhongBan ON KhieuNai.PhongBanXuLyId = PhongBan.Id                                
		                        WHERE PhongBan.DoiTacId = DoiTac.Id
		                            AND TrangThai <> 3
		                            AND NgayQuaHanPhongBanXuLy <= GETDATE()) AS SoLuongQuaHan
                        FROM DoiTac                           
                        WHERE DoiTac.Id IN (" + sDoiTac + ")"
                        + " ORDER BY TenDoiTac ASC";

            dtResult = ExecuteQueryToDataSet(sql, CommandType.Text, null).Tables[0];
            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 10/06/2014
        /// Todo : Lấy danh sách khiếu nại
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="type">
        ///     = 1 : Tồn đọng
        ///     = 2 : Quá hạn phòng ban xử lý
        /// </param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> ListKhieuNaiTonDongHoacQuaHan_Sql(int doiTacId, int phongBanId, int type)
        {
            List<KhieuNai_ReportInfo> listResult = null;
            string sql = @"SELECT KhieuNai.Id, SoThueBao, NgayTiepNhan, NoiDungPA, NgayQuaHanPhongBanXuLy, PhongBan.Name AS TenPhongBanXuLy FROM KhieuNai
                            INNER JOIN PhongBan ON KhieuNai.PhongBanXuLyId = PhongBan.Id                                
		                    WHERE PhongBan.DoiTacId = @DoiTacId
                                AND (PhongBanXuLyId = @PhongBanId OR @PhongBanId =-1)
		                        AND TrangThai <> 3";

            if (type == 2) // quá hạn phòng ban xử lý
            {
                sql = string.Format("{0} AND NgayQuaHanPhongBanXuLy <= GETDATE()", sql);
            }

            SqlParameter[] param = {
                                        new SqlParameter("@DoiTacId", doiTacId),
                                        new SqlParameter("@PhongBanId", phongBanId),
                                    };

            listResult = ExecuteQuery(sql, CommandType.Text, param);

            return listResult;
        }

        #endregion

        #region Sử dụng Solr

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Edit date :  01/03/2014
        /// Todo : Lấy dữ liệu báo cáo giảm trừ cước dịch vụ CP
        /// </summary>
        /// <param name="doiTacXuLyId"></param>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="loaiKhieuNaiID"></param>
        /// <param name="linhVucChungID"></param>
        /// <param name="linhVucConID"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoTongHopGiamTruCuocDV_Solr(int doiTacXuLyId, int phongBanXuLyId, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        {
            List<KhieuNai_ReportInfo> listDauSo = new List<KhieuNai_ReportInfo>();

            // Danh sách nội dung công việc
            //Where điều kiện
            string whereClause = string.Empty;
            if (doiTacXuLyId != -1)
            {
                whereClause = string.Format("{0} AND DoiTacXuLyId : {1}", whereClause, doiTacXuLyId);
            }

            if (phongBanXuLyId != -1)
            {
                whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, phongBanXuLyId);
            }

            if (fromDate != -1)
            {
                whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO ", whereClause, fromDate);
            }
            else
            {
                whereClause = string.Format("{0} AND NgayDongKNSort : [* TO ", whereClause);
            }

            if (toDate != -1)
            {
                whereClause = string.Format("{0} {1}]", whereClause, toDate);
            }
            else
            {
                whereClause = string.Format("{0} *]", whereClause);
            }

            if (loaiKhieuNaiID != -1)
            {
                whereClause = string.Format("{0} AND LoaiKhieuNaiId : {1}", whereClause, loaiKhieuNaiID);
            }

            if (linhVucChungID != -1)
            {
                whereClause = string.Format("{0} AND LinhVucChungId : {1}", whereClause, linhVucChungID);
            }

            if (linhVucConID != -1)
            {
                whereClause = string.Format("{0} AND LinhVucConId : {1}", whereClause, linhVucConID);
            }

            #region Dau So

            string whereClauseSoTien = string.Format("SoTien_Edit:0 {0} AND IsDaBuTien:true AND IsDauSo:true AND -LoaiTien:5", whereClause);
            var solrQuery = new SolrQuery(whereClauseSoTien);

            var qoSoTienDauSo = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "DichVuCPId, MaDichVu, DauSo, SoTien, SoTien_Edit");
            qoSoTienDauSo.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienDauSo.Start = 0;
            qoSoTienDauSo.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienDauSo = new StatsParameters();
            spSoTienDauSo.AddField("SoTien");
            spSoTienDauSo.AddFacet("DauSo");

            qoSoTienDauSo.Stats = spSoTienDauSo;

            var listQueryResult = QuerySolrBase<object>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTienDauSo);

            List<string> listDauSoId = new List<string>();
            foreach (var kv in listQueryResult.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listDauSoId.Contains(fv.Key))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.DauSo = fv.Key;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listDauSoId.Add(fv.Key);
                            listDauSo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))                          
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)  

            var qoSoTienEditDauSo = new QueryOptions();
            //Lấy ra những trường nào
            extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "DichVuCPId, MaDichVu, DauSo, SoTien, SoTien_Edit");
            qoSoTienEditDauSo.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienEditDauSo.Start = 0;
            qoSoTienEditDauSo.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienEditDauSo = new StatsParameters();
            spSoTienEditDauSo.AddField("SoTien_Edit");
            spSoTienEditDauSo.AddFacet("DauSo");

            qoSoTienEditDauSo.Stats = spSoTienEditDauSo;

            string whereClauseSoTienEdit = string.Format("-SoTien_Edit:0 {0} AND IsDaBuTien:true AND IsDauSo:true AND -LoaiTien:5", whereClause);
            solrQuery = new SolrQuery(whereClauseSoTienEdit);
            listQueryResult = QuerySolrBase<object>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTienEditDauSo);

            foreach (var kv in listQueryResult.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listDauSoId.Contains(fv.Key))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.DauSo = fv.Key;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listDauSoId.Add(fv.Key);
                            listDauSo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))  
                        else
                        {
                            for (int i = 0; i < listDauSo.Count; i++)
                            {
                                if (listDauSo[i].DauSoId.ToString() == fv.Key)
                                {
                                    listDauSo[i].SoLuongGiamTru += ConvertUtility.ToInt32(fv.Value.Count);
                                    listDauSo[i].SoTien += (decimal)fv.Value.Sum;
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)      

            #endregion

            #region Dich vu

            QueryOptions qoSoTienDichVu = new QueryOptions();
            //Lấy ra những trường nào
            extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "Id,DichVuCPId, MaDichVu, DauSo, SoTien, SoTien_Edit");
            qoSoTienDichVu.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienDichVu.Start = 0;
            qoSoTienDichVu.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienDichVu = new StatsParameters();
            spSoTienDichVu.AddField("SoTien");
            spSoTienDichVu.AddFacet("MaDichVu");

            qoSoTienDichVu.Stats = spSoTienDichVu;

            string whereClauseSoTienDichVu = string.Format("SoTien_Edit:0 {0} AND IsDaBuTien:true AND IsDauSo:false AND -DichVuCPId:0 AND -LoaiTien:5", whereClause);
            var solrQuery1 = new SolrQuery(whereClauseSoTienDichVu);

            var listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery1, qoSoTienDichVu);

            listDauSoId = new List<string>();
            foreach (var kv in listKhieuNaiInfo.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listDauSoId.Contains(fv.Key))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.DauSo = fv.Key;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listDauSoId.Add(fv.Key);
                            listDauSo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))                          
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)  

            var qoSoTienEditDichVu = new QueryOptions();
            //Lấy ra những trường nào
            extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "DichVuCPId, MaDichVu, DauSo, SoTien, SoTien_Edit");
            qoSoTienEditDichVu.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienEditDichVu.Start = 0;
            qoSoTienEditDichVu.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienEditDichVu = new StatsParameters();
            spSoTienEditDichVu.AddField("SoTien_Edit");
            spSoTienEditDichVu.AddFacet("MaDichVu");

            qoSoTienEditDichVu.Stats = spSoTienEditDichVu;

            whereClauseSoTienEdit = string.Format("-SoTien_Edit:0 {0} AND IsDaBuTien:true AND IsDauSo:false AND -DichVuCPId:0 AND -LoaiTien:5", whereClause);
            solrQuery = new SolrQuery(whereClauseSoTienEdit);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTienEditDichVu);

            foreach (var kv in listKhieuNaiInfo.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listDauSoId.Contains(fv.Key))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.DauSo = fv.Key;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listDauSoId.Add(fv.Key);
                            listDauSo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))  
                        else
                        {
                            for (int i = 0; i < listDauSo.Count; i++)
                            {
                                if (listDauSo[i].DauSoId.ToString() == fv.Key)
                                {
                                    listDauSo[i].SoLuongGiamTru += ConvertUtility.ToInt32(fv.Value.Count);
                                    listDauSo[i].SoTien += (decimal)fv.Value.Sum;
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)             

            #endregion

            return listDauSo;

        }


        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 13/03/2014
        /// Todo : Lấy dữ liệu dữ liệu đối soát bù cước dịch vụ giữa VAS
        /// </summary>
        /// <param name="phongBanId">
        ///     -1: Của cả 3 trung tâm
        ///     53 : VNP1_GQKN
        ///     62 : VNP2_GQKN
        ///     67 : VNP3_GQKN
        /// </param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoDoiSoatDoanhThuBUCuocDVGiuaVASVaCSKH(int phongBanId, DateTime fromDate, DateTime toDate)
        {
            List<KhieuNai_ReportInfo> listKhieuNaiInfo = new List<KhieuNai_ReportInfo>();

            string whereClausePhongBanXuLy = string.Empty;
            if (phongBanId > 0)
            {
                whereClausePhongBanXuLy = string.Format(" AND PhongBanXuLyId : {0}", phongBanId);
            }

            string whereClause = string.Format("-DichVuCPId : 0 AND SoTien_Edit:0 AND IsDaBuTien:true AND IsDauSo:true AND NgayDongKNSort : [{0} TO {1}] {2} AND -LoaiTien:5",
                                                fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), whereClausePhongBanXuLy);
            var solrQuery = new SolrQuery(whereClause);

            var qoSoTien = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "");
            qoSoTien.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTien.Start = 0;
            qoSoTien.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienDauSo = new StatsParameters();
            spSoTienDauSo.AddField("SoTien");
            spSoTienDauSo.AddFacet("NgayDongKNSort");

            qoSoTien.Stats = spSoTienDauSo;

            var listQueryResult = QuerySolrBase<object>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTien);

            List<int> listNgayDongKNSort = new List<int>();
            foreach (var kv in listQueryResult.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listNgayDongKNSort.Contains(fvKey))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.NgayDongKNSort = fvKey;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listNgayDongKNSort.Add(fvKey);
                            listKhieuNaiInfo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))                          
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)  

            var qoSoTienEdit = new QueryOptions();
            //Lấy ra những trường nào
            extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "");
            qoSoTienEdit.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienEdit.Start = 0;
            qoSoTienEdit.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienEdit = new StatsParameters();
            spSoTienEdit.AddField("SoTien_Edit");
            spSoTienEdit.AddFacet("NgayDongKNSort");

            qoSoTienEdit.Stats = spSoTienEdit;

            whereClause = string.Format("-DichVuCPId : 0 AND -SoTien_Edit:0 AND IsDaBuTien:true AND IsDauSo:true AND NgayDongKNSort : [{0} TO {1}] {2} AND -LoaiTien:5", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listQueryResult = QuerySolrBase<object>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTienEdit);

            foreach (var kv in listQueryResult.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listNgayDongKNSort.Contains(fvKey))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.NgayDongKNSort = fvKey;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listNgayDongKNSort.Add(fvKey);
                            listKhieuNaiInfo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))  
                        else
                        {
                            for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                            {
                                if (listKhieuNaiInfo[i].NgayDongKNSort == fvKey)
                                {
                                    listKhieuNaiInfo[i].SoLuongGiamTru += ConvertUtility.ToInt32(fv.Value.Count);
                                    listKhieuNaiInfo[i].SoTien += (decimal)fv.Value.Sum;
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)      

            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {
                listKhieuNaiInfo = listKhieuNaiInfo.OrderBy(o => o.NgayDongKNSort).ToList();

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiInfo[i].MaDichVu = Utility.ConvertIntToDate(listKhieuNaiInfo[i].NgayDongKNSort.ToString(), "/");
                }
            }

            return listKhieuNaiInfo;
        }


        public List<KhieuNai_ReportInfo> BaoCaoTongHopChiTietPAKNTheoNguoiDungVNPTTT_Solr(string fromPage, string userName, int doitacId, int phongBanId, DateTime fromDate, DateTime toDate, int reportType)
        {
            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"");

            queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            listSortOrder.Add(sortOrder);

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");
            GroupingParameters gp = new GroupingParameters();
            gp.Fields = listGroupField;
            gp.Limit = 2;
            gp.Main = true;
            gp.OrderBy = listSortOrder;
            queryOptionTiepNhan.Grouping = gp;

            //Where điều kiện
            string whereClause = string.Empty;
            string whereClauseTiepNhan = string.Format("LDate:[{0} TO {1}] AND (DoiTacXuLyTruocId:{2} OR DoiTacXuLyId:{2}) AND (PhongBanXuLyTruocId:{3} OR PhongBanXuLyId:{3})  ", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doitacId, phongBanId);

            solrQuery = new SolrQuery(whereClauseTiepNhan);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
            var listKhieuNaiInfoTemp = new List<KhieuNai_ReportInfo>();
            switch (reportType)
            {
                case 11://tiep nhan
                    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
                    {


                        foreach (KhieuNai_ReportInfo khieuNaiInfo in listKhieuNaiInfo)
                        {
                            // Nếu đã chuyển về đài khai thác
                            if (khieuNaiInfo.DoiTacXuLyTruocId == doitacId && khieuNaiInfo.DoiTacXuLyTruocId != khieuNaiInfo.DoiTacXuLyId
                                && khieuNaiInfo.NguoiXuLyTruoc == userName)
                            {
                                listKhieuNaiInfoTemp.Add(khieuNaiInfo);
                            }
                            // Nếu chưa chuyển về đài khai thác
                            else if (khieuNaiInfo.DoiTacXuLyId == doitacId && khieuNaiInfo.NguoiXuLy == userName)
                            {
                                listKhieuNaiInfoTemp.Add(khieuNaiInfo);

                            }
                        }
                    }
                    break;
                case 21: // pakn da xu ly
                    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
                    {

                        foreach (KhieuNai_ReportInfo khieuNaiInfo in listKhieuNaiInfo)
                        {
                            // Nếu đã chuyển về đài khai thác
                            if (khieuNaiInfo.DoiTacXuLyTruocId == doitacId && khieuNaiInfo.DoiTacXuLyTruocId != khieuNaiInfo.DoiTacXuLyId
                                && khieuNaiInfo.NguoiXuLyTruoc == userName)
                            {
                                listKhieuNaiInfoTemp.Add(khieuNaiInfo);
                            }

                        }
                    }
                    break;
                case 22: // pakn ton dong
                    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
                    {

                        foreach (KhieuNai_ReportInfo khieuNaiInfo in listKhieuNaiInfo)
                        {
                            // Nếu đã chuyển về đài khai thác
                            if (khieuNaiInfo.DoiTacXuLyId == doitacId && khieuNaiInfo.NguoiXuLy == userName)
                            {
                                listKhieuNaiInfoTemp.Add(khieuNaiInfo);
                            }

                        }
                    }


                    // Tính số lượng tồn đọng và quá hạn trong quá khứ (tính từ thời điểm trước ngày bắt đầu)
                    // Tồn đọng là chưa chuyển cho trung tâm (đối tác) khác
                    string whereClauseTonDong22 = string.Format("PhongBanXuLyId:{0} AND -TrangThai:3 AND LDate : [* TO {1}]", phongBanId, ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
                    solrQuery = new SolrQuery(whereClauseTonDong22);

                    QueryOptions queryOptionTonDong22 = new QueryOptions();
                    //Lấy ra những trường nào
                    var extraParamTonDong22 = new Dictionary<string, string>();
                    extraParamTonDong22.Add("fl", @"");

                    queryOptionTonDong22.ExtraParams = extraParamTonDong22;

                    queryOptionTonDong22.Start = 0;
                    queryOptionTonDong22.Rows = int.MaxValue;

                    var listKhieuNaiInfo22 = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTonDong22);
                    if (listKhieuNaiInfo22 != null && listKhieuNaiInfo22.Count > 0)
                    {

                        for (int i = 0; i < listKhieuNaiInfo22.Count; i++)
                        {
                            if (listKhieuNaiInfo22[i].NguoiXuLy == userName)
                            {
                                listKhieuNaiInfoTemp.Add(listKhieuNaiInfo22[i]);

                            }
                        }

                    }
                    break;
                case 23: // pakn qua han
                    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
                    {
                        for (int j = 0; j < listKhieuNaiInfo.Count; j++)
                        {
                            // Nếu đã chuyển về đài khai thác
                            if (listKhieuNaiInfo[j].DoiTacXuLyTruocId == doitacId && listKhieuNaiInfo[j].DoiTacXuLyTruocId != listKhieuNaiInfo[j].DoiTacXuLyId
                                && listKhieuNaiInfo[j].NguoiXuLyTruoc == userName)
                            {


                                if (listKhieuNaiInfo[j].LDate > listKhieuNaiInfo[j].NgayQuaHan)
                                {
                                    listKhieuNaiInfoTemp.Add(listKhieuNaiInfo[j]);
                                }


                            }
                            // Nếu chưa chuyển về đài khai thác
                            else if (listKhieuNaiInfo[j].DoiTacXuLyId == doitacId && listKhieuNaiInfo[j].NguoiXuLy == userName)
                            {


                                // nếu quá hạn thì tăng số lượng quá hạn
                                if ((j + 1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
                                {
                                    if (listKhieuNaiInfo[j + 1].LDate > listKhieuNaiInfo[j + 1].NgayQuaHan)
                                    {
                                        listKhieuNaiInfoTemp.Add(listKhieuNaiInfo[j + 1]);
                                    }


                                }
                            }

                        }
                    }


                    // Tính số lượng tồn đọng và quá hạn trong quá khứ (tính từ thời điểm trước ngày bắt đầu)
                    // Tồn đọng là chưa chuyển cho trung tâm (đối tác) khác
                    string whereClauseTonDong23 = string.Format("PhongBanXuLyId:{0} AND -TrangThai:3 AND LDate : [* TO {1}]", phongBanId, ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
                    solrQuery = new SolrQuery(whereClauseTonDong23);

                    QueryOptions queryOptionQuaHan23 = new QueryOptions();
                    //Lấy ra những trường nào
                    var extraParamTonDong23 = new Dictionary<string, string>();
                    extraParamTonDong23.Add("fl", @"");

                    queryOptionQuaHan23.ExtraParams = extraParamTonDong23;

                    queryOptionQuaHan23.Start = 0;
                    queryOptionQuaHan23.Rows = int.MaxValue;

                    var listKhieuNaiInfo23 = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionQuaHan23);
                    if (listKhieuNaiInfo23 != null && listKhieuNaiInfo23.Count > 0)
                    {

                        for (int i = 0; i < listKhieuNaiInfo23.Count; i++)
                        {
                            if (listKhieuNaiInfo23[i].NguoiXuLy == userName)
                            {

                                if (ConvertUtility.ToInt32(toDate) > listKhieuNaiInfo23[i].NgayQuaHanPhongBanXuLySort)
                                {
                                    listKhieuNaiInfoTemp.Add(listKhieuNaiInfo23[i]);
                                }


                            }
                        }

                    }
                    break;
                default:
                    break;
            }



            return listKhieuNaiInfoTemp;
        }

        public List<KhieuNai_ReportInfo> BaoCaoTongHopKhieuNaiDaDongTrongKhoangThoiGian_Solr(string fromPage, string userName, int doitacId, int phongBanId, DateTime fromDate, DateTime toDate)
        {
            List<KhieuNai_ReportInfo> listKhieuNaiInfo = new List<KhieuNai_ReportInfo>();


            //  listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQueryTiepNhan, queryOptionKNDong);
            string whereClauseDongKN = "";//= string.Format("PhongBanXuLyId : {0} AND  TrangThai:3 AND NgayDongKN : [{1} TO {2}]", phongBanId, ConvertDateToSolr(fromDate.ToString("yyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true));
            switch (fromPage)
            {
                case "dashboard":
                    whereClauseDongKN = string.Format("PhongBanXuLyId : {0} AND  TrangThai:3 AND NgayDongKN : [{1} TO {2}]", phongBanId, ConvertDateToSolr(fromDate.ToString("yyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true));
                    break;
                case "baocaotonghoppakntheonguoidungvnpttt":
                    whereClauseDongKN = string.Format("LDate:[{0} TO {1}] AND (DoiTacXuLyTruocId:{2} OR DoiTacXuLyId:{2}) AND (PhongBanXuLyTruocId:{3} OR PhongBanXuLyId:{3})  ", ConvertDateToSolr(fromDate.ToString("yyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true), doitacId, phongBanId);
                    break;
            }

            SolrQuery solrQueryKNDong = new SolrQuery(whereClauseDongKN);

            //Lấy ra những trường nào
            QueryOptions queryOptionKNDong = new QueryOptions();
            Dictionary<string, string> extraParamKNDong = new Dictionary<string, string>();
            extraParamKNDong.Add("fl", @"");
            queryOptionKNDong.ExtraParams = extraParamKNDong;
            queryOptionKNDong.Start = 0;
            queryOptionKNDong.Rows = int.MaxValue;

            switch (fromPage)
            {
                case "baocaotonghoppakntheonguoidungvnpttt":

                    SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
                    List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
                    listSortOrder.Add(sortOrder);

                    List<string> listGroupField = new List<string>();
                    listGroupField.Add("KhieuNaiId");
                    GroupingParameters gp = new GroupingParameters();
                    gp.Fields = listGroupField;
                    gp.Limit = 2;
                    gp.Main = true;
                    gp.OrderBy = listSortOrder;
                    queryOptionKNDong.Grouping = gp;


                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQueryKNDong, queryOptionKNDong);
                    var listKhieuNaiInfoTemp = new List<KhieuNai_ReportInfo>();
                    if (listKhieuNaiInfo.Any())
                    {
                        for (int j = 0; j < listKhieuNaiInfo.Count; j++)
                        {
                            // Nếu đã chuyển về đài khai thác
                            if (listKhieuNaiInfo[j].DoiTacXuLyTruocId == doitacId && listKhieuNaiInfo[j].DoiTacXuLyTruocId != listKhieuNaiInfo[j].DoiTacXuLyId && listKhieuNaiInfo[j].NguoiXuLyTruoc == userName)
                            {
                                listKhieuNaiInfoTemp.Add(listKhieuNaiInfo[j]);

                            }
                            // Nếu chưa chuyển về đài khai thác
                            else if (listKhieuNaiInfo[j].DoiTacXuLyId == doitacId && listKhieuNaiInfo[j].NguoiXuLy == userName)
                            {

                                //listKhieuNaiInfoTemp.Add(listKhieuNaiInfo[j]);
                                // nếu quá hạn thì tăng số lượng quá hạn
                                //if ((j + 1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
                                //{

                                //    listKhieuNaiInfo.RemoveAt(j + 1);
                                //}
                            }
                            //else
                            //{
                            //    // Trường hợp nếu bản ghi đầu của từng nhóm không phải của người dùng thì chuyển sang nhóm KhieuNaiId khác luôn
                            //    //  (vì người dùng này sẽ không phải là người tiếp nhận và xử lý
                            //    if ((j + 1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
                            //    {
                            //        j++;
                            //    }
                            //}

                            //listKhieuNaiInfo.RemoveAt(j);
                            //j--;
                        }
                        listKhieuNaiInfo = listKhieuNaiInfoTemp;
                    }
                    break;
                case "dashboard":
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQueryKNDong, queryOptionKNDong);
                    break;
            }
            return listKhieuNaiInfo;
        }

        public List<KhieuNai_ReportInfo> BaoCaoTongHopTiepNhanKhieuNaiTrongKhoangThoiGian_Solr(string fromPage, string userName, int doitacId, int phongBanId, DateTime fromDate, DateTime toDate)
        {
            List<KhieuNai_ReportInfo> listKhieuNaiInfo = new List<KhieuNai_ReportInfo>();
            string whereClauseTiepNhan = "";//string.Format("PhongBanXuLyId : {0} AND (HanhDong:0 OR HanhDong:2) AND NgayTiepNhan : [{1} TO {2}]", phongBanId, ConvertDateToSolr(fromDate.ToString("yyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true));
            switch (fromPage)
            {
                case "dashboard":
                    whereClauseTiepNhan = string.Format("PhongBanXuLyId : {0} AND (HanhDong:0 OR HanhDong:2) AND NgayTiepNhan : [{1} TO {2}]", phongBanId, ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true));
                    break;
                case "baocaotonghoppakntheonguoidungvnpttt":
                    whereClauseTiepNhan = string.Format("LDate:[{0} TO {1}] AND (DoiTacXuLyTruocId:{2} OR DoiTacXuLyId:{2}) AND (PhongBanXuLyTruocId:{3} OR PhongBanXuLyId:{3})  ", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doitacId, phongBanId);
                    break;
            }

            // Utility.LogEvent(whereClauseTiepNhan);

            SolrQuery solrQueryTiepNhan = new SolrQuery(whereClauseTiepNhan);

            //Lấy ra những trường nào
            QueryOptions queryOptionTiepNhan = new QueryOptions();
            Dictionary<string, string> extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"");
            queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;
            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;

            switch (fromPage)
            {
                case "baocaotonghoppakntheonguoidungvnpttt":
                    SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
                    var listSortOrder = new List<SolrNet.SortOrder> { sortOrder };

                    var listGroupField = new List<string> { "KhieuNaiId" };
                    var gp = new GroupingParameters
                    {
                        Fields = listGroupField,
                        Limit = 2,
                        Main = true,
                        OrderBy = listSortOrder
                    };
                    queryOptionTiepNhan.Grouping = gp;

                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQueryTiepNhan, queryOptionTiepNhan);
                    var listKhieuNaiInfoTemp = new List<KhieuNai_ReportInfo>();
                    if (listKhieuNaiInfo.Any())
                    {

                        for (int j = 0; j < listKhieuNaiInfo.Count; j++)
                        {
                            // Nếu đã chuyển về đài khai thác
                            if (listKhieuNaiInfo[j].DoiTacXuLyTruocId == doitacId && listKhieuNaiInfo[j].DoiTacXuLyTruocId != listKhieuNaiInfo[j].DoiTacXuLyId && listKhieuNaiInfo[j].NguoiXuLyTruoc == userName)
                            {
                                listKhieuNaiInfoTemp.Add(listKhieuNaiInfo[j]);

                            }
                            // Nếu chưa chuyển về đài khai thác
                            else if (listKhieuNaiInfo[j].DoiTacXuLyId == doitacId && listKhieuNaiInfo[j].NguoiXuLy == userName)
                            {

                                listKhieuNaiInfoTemp.Add(listKhieuNaiInfo[j]);

                            }

                        }
                        listKhieuNaiInfo = listKhieuNaiInfoTemp;
                    }
                    break;
                default:
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQueryTiepNhan, queryOptionTiepNhan);
                    break;

            }

            return listKhieuNaiInfo;
        }
        //public List<KhieuNai_ReportInfo> BaoCaoTongHopGiamTruCuocDV_Solr(int khuVucID, int donViID, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        //{            
        //    List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

        //    var queryOption = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamLoaiKhieuNai = new Dictionary<string, string>();
        //    extraParamLoaiKhieuNai.Add("fl", "LoaiKhieuNaiId, LoaiKhieuNai, LinhVucChungId, LinhVucChung, LinhVucConId, LinhVucCon, SoTienKhauTru_TKC,SoTienKhauTru_KM1,SoTienKhauTru_KM2,SoTienKhauTru_KM3,SoTienKhauTru_KM4,SoTienKhauTru_KM5");
        //    queryOption.ExtraParams = extraParamLoaiKhieuNai;

        //    queryOption.Start = 0;
        //    queryOption.Rows = 0;// int.MaxValue;

        //    // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
        //    StatsParameters statsParameters = new StatsParameters();
        //    //statsParameters.AddField("SoTienKhauTru_TKC");
        //    statsParameters.AddField("SoTienKhauTru_TKC");
        //    statsParameters.AddField("SoTienKhauTru_KM1");
        //    statsParameters.AddField("SoTienKhauTru_KM2");
        //    statsParameters.AddField("SoTienKhauTru_KM3");
        //    statsParameters.AddField("SoTienKhauTru_KM4");
        //    statsParameters.AddField("SoTienKhauTru_KM5");            

        //    if (linhVucConID != -1)
        //    {
        //        statsParameters.AddFacet("LinhVucConId");
        //    }
        //    else if (linhVucChungID != -1)
        //    {
        //        statsParameters.AddFacet("LinhVucConId");
        //    }
        //    else if (loaiKhieuNaiID != -1)
        //    {
        //        statsParameters.AddFacet("LinhVucChungId");
        //    }
        //    else
        //    {
        //        statsParameters.AddFacet("LoaiKhieuNaiId");
        //    }
        //    queryOption.Stats = statsParameters;       

        //    // Danh sách nội dung công việc
        //    //Where điều kiện
        //    string whereClause = "IsKNGiamTru : true AND TrangThai : 3";
        //    if (khuVucID != -1)
        //    {
        //        whereClause = string.Format("{0} AND KhuVucId : {1}", whereClause, khuVucID);
        //    }

        //    if (donViID != -1)
        //    {
        //        whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, donViID);
        //    }

        //    if (fromDate != -1)
        //    {
        //        whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO ", whereClause, fromDate);
        //    }
        //    else
        //    {
        //        whereClause = string.Format("{0} AND NgayDongKNSort : [* TO ", whereClause);
        //    }

        //    if (toDate != -1)
        //    {
        //        whereClause = string.Format("{0} {1}]", whereClause, toDate);
        //    }
        //    else
        //    {
        //        whereClause = string.Format("{0} *]", whereClause);
        //    }

        //    if (loaiKhieuNaiID != -1)
        //    {
        //        whereClause = string.Format("{0} AND LoaiKhieuNaiId : {1}", whereClause, loaiKhieuNaiID);
        //    }

        //    if (linhVucChungID != -1)
        //    {
        //        whereClause = string.Format("{0} AND LinhVucChungId : {1}", whereClause, linhVucChungID);
        //    }

        //    if (linhVucConID != -1)
        //    {
        //        whereClause = string.Format("{0} AND LinhVucConId : {1}", whereClause, linhVucConID);
        //    }           

        //    var solrQuery = new SolrQuery(whereClause);
        //    var listQueryResult = QuerySolrBase<object>.QuerySolr(Config.ServerSolr, solrQuery, queryOption);

        //    List<string> listKhieuNaiId = new List<string>();
        //    foreach (var kv in listQueryResult.Stats)
        //    {
        //        // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
        //        string kvKey = kv.Key;
        //        var kvValue = kv.Value;

        //        foreach (var f in kvValue.FacetResults)
        //        {
        //            string fKey = f.Key;
        //            foreach (var fv in f.Value)
        //            {
        //                int fvKey = ConvertUtility.ToInt32(fv.Key);
        //                //if (fvKey <= 0)
        //                //{
        //                //    continue;
        //                //}

        //                if (!listKhieuNaiId.Contains(fv.Key))
        //                {
        //                    KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
        //                    int loaiKhieuNaiId = ConvertUtility.ToInt32(fv.Key);
        //                    reportInfo.LoaiKhieuNaiId = loaiKhieuNaiId;
        //                    reportInfo.LinhVucChungId = loaiKhieuNaiId;
        //                    reportInfo.LinhVucConId = loaiKhieuNaiId;
        //                    reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);

        //                    switch (kv.Key)
        //                    {
        //                        case "SoTienKhauTru_TKC":
        //                            reportInfo.SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
        //                            break;
        //                        case "SoTienKhauTru_KM":
        //                            reportInfo.SoTienKhauTru_KM = (decimal)fv.Value.Sum;
        //                            break;
        //                        case "SoTienKhauTru_KM1":
        //                            reportInfo.SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
        //                            break;
        //                        case "SoTienKhauTru_KM2":
        //                            reportInfo.SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
        //                            break;
        //                        case "SoTienKhauTru_Data":
        //                            reportInfo.SoTienKhauTru_Data = (decimal)fv.Value.Sum;
        //                            break;
        //                        case "SoTienKhauTru_Khac":
        //                            reportInfo.SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
        //                            break;                                
        //                    }

        //                    listKhieuNaiId.Add(fv.Key);
        //                    listKhieuNai.Add(reportInfo);
        //                } // end if (!listKhieuNaiId.Contains(fv.Key))
        //                else
        //                {
        //                    for (int i = 0; i < listKhieuNai.Count; i++)
        //                    {
        //                        if (listKhieuNai[i].LoaiKhieuNaiId.ToString() == fv.Key)
        //                        {
        //                            switch (kv.Key)
        //                            {
        //                                case "SoTienKhauTru_TKC":
        //                                    listKhieuNai[i].SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
        //                                    break;
        //                                case "SoTienKhauTru_KM":
        //                                    listKhieuNai[i].SoTienKhauTru_KM = (decimal)fv.Value.Sum;
        //                                    break;
        //                                case "SoTienKhauTru_KM1":
        //                                    listKhieuNai[i].SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
        //                                    break;
        //                                case "SoTienKhauTru_KM2":
        //                                    listKhieuNai[i].SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
        //                                    break;
        //                                case "SoTienKhauTru_Data":
        //                                    listKhieuNai[i].SoTienKhauTru_Data = (decimal)fv.Value.Sum;
        //                                    break;
        //                                case "SoTienKhauTru_Khac":
        //                                    listKhieuNai[i].SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
        //                                    break;                                        
        //                            }
        //                        }
        //                    }
        //                }
        //            } // end foreach (var fv in f.Value)
        //        } // end foreach (var f in kvValue.FacetResults)
        //    } // end foreach (var kv in listQueryResult.Stats)       

        //    if(listKhieuNai != null && listKhieuNai.Count > 0)
        //    {
        //        for(int i=0;i<listKhieuNai.Count;i++)
        //        {
        //            bool isExists = false;
        //            for(int j=0;j<LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count;j++)
        //            {
        //                if (listKhieuNai[i].LoaiKhieuNaiId == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id)
        //                {
        //                    listKhieuNai[i].LoaiKhieuNai = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
        //                    listKhieuNai[i].LinhVucChung = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
        //                    listKhieuNai[i].LinhVucCon = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
        //                    isExists = true;
        //                    break;
        //                }
        //            }

        //            if (!isExists)
        //            {
        //                listKhieuNai[i].LoaiKhieuNai = "Không xác định";
        //                listKhieuNai[i].LinhVucChung = "Không xác định";
        //                listKhieuNai[i].LinhVucCon = "Không xác định";
        //            }
        //        }
        //    } // end if(listKhieuNai != null && listKhieuNai.Count > 0)

        //    return listKhieuNai;

        //}

        //public List<KhieuNai_ReportInfo> BaoCaoTongHopGiamTruCuocDV_Solr(int doiTacXuLyId, int donViID, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        //{
        //    List<KhieuNai_ReportInfo> listDauSo = new List<KhieuNai_ReportInfo>();

        //    var queryOption = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamLoaiKhieuNai = new Dictionary<string, string>();
        //    extraParamLoaiKhieuNai.Add("fl", "DauSoId, DauSo, SoTien, SoTien_Edit");
        //    queryOption.ExtraParams = extraParamLoaiKhieuNai;

        //    queryOption.Start = 0;
        //    queryOption.Rows = 0;// int.MaxValue;

        //    // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
        //    StatsParameters spSoTien = new StatsParameters();           
        //    spSoTien.AddField("SoTien");
        //    spSoTien.AddFacet("DauSoId");

        //    queryOption.Stats = spSoTien;

        //    // Danh sách nội dung công việc
        //    //Where điều kiện
        //    string whereClause = string.Empty;
        //    if (doiTacXuLyId != -1)
        //    {
        //        whereClause = string.Format("{0} AND DoiTacXuLyId : {1}", whereClause, doiTacXuLyId);
        //    }

        //    if (donViID != -1)
        //    {
        //        whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, donViID);
        //    }

        //    if (fromDate != -1)
        //    {
        //        whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO ", whereClause, fromDate);
        //    }
        //    else
        //    {
        //        whereClause = string.Format("{0} AND NgayDongKNSort : [* TO ", whereClause);
        //    }

        //    if (toDate != -1)
        //    {
        //        whereClause = string.Format("{0} {1}]", whereClause, toDate);
        //    }
        //    else
        //    {
        //        whereClause = string.Format("{0} *]", whereClause);
        //    }

        //    if (loaiKhieuNaiID != -1)
        //    {
        //        whereClause = string.Format("{0} AND LoaiKhieuNaiId : {1}", whereClause, loaiKhieuNaiID);
        //    }

        //    if (linhVucChungID != -1)
        //    {
        //        whereClause = string.Format("{0} AND LinhVucChungId : {1}", whereClause, linhVucChungID);
        //    }

        //    if (linhVucConID != -1)
        //    {
        //        whereClause = string.Format("{0} AND LinhVucConId : {1}", whereClause, linhVucConID);
        //    }

        //    string whereClauseSoTien = string.Format("SoTien_Edit:0 {0} AND !DauSoId:0 AND IsDaBuTien:true", whereClause);
        //    var solrQuery = new SolrQuery(whereClauseSoTien);

        //    var listQueryResult = QuerySolrBase<object>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOption);

        //    List<string> listDauSoId = new List<string>();
        //    foreach (var kv in listQueryResult.Stats)
        //    {
        //        // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
        //        string kvKey = kv.Key;
        //        var kvValue = kv.Value;

        //        foreach (var f in kvValue.FacetResults)
        //        {
        //            string fKey = f.Key;
        //            foreach (var fv in f.Value)
        //            {
        //                int fvKey = ConvertUtility.ToInt32(fv.Key);

        //                if (!listDauSoId.Contains(fv.Key))
        //                {
        //                    KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
        //                    int dauSoId = ConvertUtility.ToInt32(fv.Key);
        //                    reportInfo.DauSoId = dauSoId;
        //                    reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
        //                    reportInfo.SoTien = (decimal)fv.Value.Sum;

        //                    listDauSoId.Add(fv.Key);
        //                    listDauSo.Add(reportInfo);
        //                } // end if (!listDauSoId.Contains(fv.Key))                          
        //            } // end foreach (var fv in f.Value)
        //        } // end foreach (var f in kvValue.FacetResults)
        //    } // end foreach (var kv in listQueryResult.Stats)  

        //    string whereClauseSoTienEdit = string.Format("-SoTien_Edit:0 {0} AND !DauSoId:0 AND IsDaBuTien:true", whereClause);
        //    solrQuery = new SolrQuery(whereClauseSoTienEdit);
        //    listQueryResult = QuerySolrBase<object>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOption);

        //    foreach (var kv in listQueryResult.Stats)
        //    {
        //        // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
        //        string kvKey = kv.Key;
        //        var kvValue = kv.Value;

        //        foreach (var f in kvValue.FacetResults)
        //        {
        //            string fKey = f.Key;
        //            foreach (var fv in f.Value)
        //            {
        //                int fvKey = ConvertUtility.ToInt32(fv.Key);

        //                if (!listDauSoId.Contains(fv.Key))
        //                {
        //                    KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
        //                    int dauSoId = ConvertUtility.ToInt32(fv.Key);
        //                    reportInfo.DauSoId = dauSoId;
        //                    reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
        //                    reportInfo.SoTien = (decimal)fv.Value.Sum;

        //                    listDauSoId.Add(fv.Key);
        //                    listDauSo.Add(reportInfo);
        //                } // end if (!listDauSoId.Contains(fv.Key))  
        //                else
        //                {
        //                    for (int i = 0; i < listDauSo.Count; i++)
        //                    {
        //                        if (listDauSo[i].DauSoId.ToString() == fv.Key)
        //                        {
        //                            listDauSo[i].SoLuongGiamTru += ConvertUtility.ToInt32(fv.Value.Count);
        //                            listDauSo[i].SoTien += (decimal)fv.Value.Sum;
        //                        }
        //                    }
        //                }
        //            } // end foreach (var fv in f.Value)
        //        } // end foreach (var f in kvValue.FacetResults)
        //    } // end foreach (var kv in listQueryResult.Stats)  

        //    if (listDauSo != null && listDauSo.Count > 0)
        //    {
        //        List<DauSoCPInfo> listDauSoFromDB = new DauSoCPImpl().GetList();
        //        for (int i = 0; i < listDauSo.Count; i++)
        //        {
        //            bool isExists = false;
        //            for (int j = 0; j < listDauSoFromDB.Count; j++)
        //            {
        //                if (listDauSo[i].DauSoId == listDauSoFromDB[j].ID)
        //                {
        //                    listDauSo[i].DauSo = listDauSoFromDB[j].DauSo;                            
        //                    isExists = true;
        //                    break;
        //                }
        //            }

        //            if (!isExists)
        //            {
        //                listDauSo[i].DauSo = "Không xác định";                        
        //            }
        //        }
        //    } // end if(listDauSo != null && listDauSo.Count > 0)

        //    return listDauSo;

        //}

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 03/10/2013
        /// Todo : Lấy ra danh sách các bản ghi chi tiết giảm trừ (sử dụng solr)
        /// </summary>
        /// <param name="khuVucID"></param>
        /// <param name="donViID"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="loaiKhieuNaiID"></param>
        /// <param name="linhVucChungID"></param>
        /// <param name="linhVucConID"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoChiTietGiamTruCuocDVTraTruoc_Solr(int khuVucID, int donViID, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        {

            List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

            var queryOption = new QueryOptions();

            //Lấy ra những trường nào
            var extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", @"SoThueBao, NoiDungPA, LinhVucCon, NgayDongKN, SHCV, NoiDungXuLy, SoTienKhauTru_TKC, SoTienKhauTru_KM, SoTienKhauTru_KM1, 
                                                SoTienKhauTru_KM2, SoTienKhauTru_Data, SoTienKhauTru_Khac");

            //extraParam.Add("fl", @"Id");

            queryOption.ExtraParams = extraParam;

            queryOption.Start = 0;
            queryOption.Rows = int.MaxValue;

            // Danh sách nội dung công việc
            //Where điều kiện
            string whereClause = string.Empty;
            whereClause = " IsKNGiamTru : true AND IsTraSau : false AND  -(SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Khac:0)";
            //if (khuVucID != -1)
            //{
            //    if (whereClause.Length > 0)
            //    {
            //        whereClause = string.Format("{0} AND KhuVucId : {1}", whereClause, khuVucID);
            //    }
            //    else
            //    {
            //        whereClause = "KhuVucId : " + khuVucID;
            //    }
            //}

            if (donViID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, donViID);
                }
                else
                {
                    if (khuVucID != -1)
                    {
                        List<PhongBanInfo> listPhongBan = new PhongBanImpl().GetListPhongBanByDoiTacId(khuVucID);
                        if (listPhongBan != null && listPhongBan.Count > 0)
                        {
                            string sDonVi = listPhongBan[0].Id.ToString();
                            for (int i = 1; i < listPhongBan.Count; i++)
                            {
                                sDonVi = string.Format("{0} {1}", sDonVi, listPhongBan[i].Id);
                            }

                            whereClause = string.Format("PhongBanXuLyId : {0}", sDonVi);
                        }
                    }
                }
            }

            if (fromDate != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO ", whereClause, fromDate);
                }
                else
                {
                    whereClause = string.Format("NgayDongKNSort : [{0} TO ", fromDate);
                }
            }
            else
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND NgayDongKNSort : [* TO ", whereClause);
                }
                else
                {
                    whereClause = "NgayDongKNSort : [* TO ";
                }
            }

            if (toDate != -1)
            {
                whereClause = string.Format("{0} {1}]", whereClause, toDate);
            }
            else
            {
                whereClause = string.Format("{0} *]", whereClause);
            }

            if (loaiKhieuNaiID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND LoaiKhieuNaiId : {1}", whereClause, loaiKhieuNaiID);
                }
                else
                {
                    whereClause = string.Format("LoaiKhieuNaiId : {0}", loaiKhieuNaiID);
                }
            }

            if (linhVucChungID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND LinhVucChungId : {1}", whereClause, linhVucChungID);
                }
                else
                {
                    whereClause = string.Format("LinhVucChungId : {0}", linhVucChungID);
                }
            }

            if (linhVucConID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND LinhVucConId : {1}", whereClause, linhVucConID);
                }
                else
                {
                    whereClause = string.Format("LinhVucConId : {0}", linhVucConID);
                }
            }

            var solrQuery = new SolrQuery(whereClause);

            listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOption);

            return listKhieuNai;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 19/10/2013
        /// Todo : Lấy ra danh sách các bản ghi chi tiết giảm trừ trả sau (sử dụng solr)
        /// </summary>
        /// <param name="khuVucID"></param>
        /// <param name="donViID"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="loaiKhieuNaiID"></param>
        /// <param name="linhVucChungID"></param>
        /// <param name="linhVucConID"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoChiTietGiamTruCuocDVTraSauVNPTTT_Solr(int parentDoiTacId, int doiTacId, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        {

            List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

            var queryOption = new QueryOptions();

            //Lấy ra những trường nào
            var extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", @"SoThueBao, NoiDungPA, LinhVucCon, NgayDongKN, SHCV, NoiDungXuLy, SoTienKhauTru_TKC, SoTienKhauTru_TS_GPRS, 
                                                SoTienKhauTru_TS_CP, SoTienKhauTru_TS_Thoai, SoTienKhauTru_TS_SMS, SoTienKhauTru_TS_IR, SoTienKhauTru_TS_Khac");

            //extraParam.Add("fl", @"Id");

            queryOption.ExtraParams = extraParam;

            queryOption.Start = 0;
            queryOption.Rows = int.MaxValue;

            // Danh sách nội dung công việc
            //Where điều kiện
            string whereClause = string.Empty;
            whereClause = " IsKNGiamTru : true AND IsTraSau : true";

            List<PhongBanInfo> listPhongBan = null;
            if (doiTacId != -1)
            {
                listPhongBan = new PhongBanImpl().GetListPhongBanByDoiTacId(doiTacId);
            }
            else
            {
                listPhongBan = new PhongBanImpl().GetListPhongBanOfAllDoiTacOfParentDoiTacId(parentDoiTacId);
            }

            string sPhongBan = string.Empty;
            if (listPhongBan != null && listPhongBan.Count > 0)
            {
                sPhongBan = listPhongBan[0].Id.ToString();
                for (int i = 1; i < listPhongBan.Count; i++)
                {
                    sPhongBan = string.Format("{0} {1}", sPhongBan, listPhongBan[i].Id);
                }
            }

            if (sPhongBan.Length > 0)
            {
                whereClause = string.Format("{0} AND PhongBanXuLyId : ({1})", whereClause, sPhongBan);
            }

            if (fromDate != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO ", whereClause, fromDate);
                }
                else
                {
                    whereClause = string.Format("NgayDongKNSort : [{0} TO ", fromDate);
                }
            }
            else
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND NgayDongKNSort : [* TO ", whereClause);
                }
                else
                {
                    whereClause = "NgayDongKNSort : [* TO ";
                }
            }

            if (toDate != -1)
            {
                whereClause = string.Format("{0} {1}]", whereClause, toDate);
            }
            else
            {
                whereClause = string.Format("{0} *]", whereClause);
            }

            if (loaiKhieuNaiID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND LoaiKhieuNaiId : {1}", whereClause, loaiKhieuNaiID);
                }
                else
                {
                    whereClause = string.Format("LoaiKhieuNaiId : {0}", loaiKhieuNaiID);
                }
            }

            if (linhVucChungID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND LinhVucChungId : {1}", whereClause, linhVucChungID);
                }
                else
                {
                    whereClause = string.Format("LinhVucChungId : {0}", linhVucChungID);
                }
            }

            if (linhVucConID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND LinhVucConId : {1}", whereClause, linhVucConID);
                }
                else
                {
                    whereClause = string.Format("LinhVucConId : {0}", linhVucConID);
                }
            }

            var solrQuery = new SolrQuery(whereClause);

            listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOption);

            return listKhieuNai;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 02/12/2013
        /// Todo : Lấy ra danh sách các bản ghi chi tiết giảm trừ trả sau (sử dụng solr)
        /// </summary>
        /// <param name="khuVucID"></param>
        /// <param name="donViID"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="loaiKhieuNaiID"></param>
        /// <param name="linhVucChungID"></param>
        /// <param name="linhVucConID"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoChiTietGiamTruCuocDVTraSauToGQKN_Solr(int phongBanXuLyId, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        {

            List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

            var queryOption = new QueryOptions();

            //Lấy ra những trường nào
            var extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", @"SoThueBao, NoiDungPA, LinhVucCon, NgayDongKN, SHCV, NoiDungXuLy, SoTienKhauTru_TKC, SoTienKhauTru_TS_GPRS, 
                                                SoTienKhauTru_TS_CP, SoTienKhauTru_TS_Thoai, SoTienKhauTru_TS_SMS, SoTienKhauTru_TS_IR, SoTienKhauTru_TS_Khac");

            //extraParam.Add("fl", @"Id");

            queryOption.ExtraParams = extraParam;

            queryOption.Start = 0;
            queryOption.Rows = int.MaxValue;

            // Danh sách nội dung công việc
            //Where điều kiện
            string whereClause = string.Empty;
            whereClause = " IsKNGiamTru : true AND IsTraSau : true";

            if (phongBanXuLyId != -1)
            {
                whereClause = string.Format("{0} AND PhongBanXuLyId : ({1})", whereClause, phongBanXuLyId);
            }

            if (fromDate != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO ", whereClause, fromDate);
                }
                else
                {
                    whereClause = string.Format("NgayDongKNSort : [{0} TO ", fromDate);
                }
            }
            else
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND NgayDongKNSort : [* TO ", whereClause);
                }
                else
                {
                    whereClause = "NgayDongKNSort : [* TO ";
                }
            }

            if (toDate != -1)
            {
                whereClause = string.Format("{0} {1}]", whereClause, toDate);
            }
            else
            {
                whereClause = string.Format("{0} *]", whereClause);
            }

            if (loaiKhieuNaiID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND LoaiKhieuNaiId : {1}", whereClause, loaiKhieuNaiID);
                }
                else
                {
                    whereClause = string.Format("LoaiKhieuNaiId : {0}", loaiKhieuNaiID);
                }
            }

            if (linhVucChungID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND LinhVucChungId : {1}", whereClause, linhVucChungID);
                }
                else
                {
                    whereClause = string.Format("LinhVucChungId : {0}", linhVucChungID);
                }
            }

            if (linhVucConID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND LinhVucConId : {1}", whereClause, linhVucConID);
                }
                else
                {
                    whereClause = string.Format("LinhVucConId : {0}", linhVucConID);
                }
            }

            var solrQuery = new SolrQuery(whereClause);

            listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOption);

            return listKhieuNai;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 04/10/2013
        /// Todo : Lấy ra danh sách khiếu  nại (sử dụng solr)
        /// </summary>
        /// <param name="khuVucID"></param>
        /// <param name="donViID"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="loaiKhieuNaiID"></param>
        /// <param name="linhVucChungID"></param>
        /// <param name="linhVucConID"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> DanhSachKhieuNai_Solr(int khuVucID, int donViID, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        {
            List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

            var queryOption = new QueryOptions();

            //Lấy ra những trường nào
            var extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", @"TrangThai, MaKhieuNai, DoUuTien, SoThueBao, NgayTiepNhan, 
		                            LoaiKhieuNai, LinhVucChung, LinhVucCon, NguoiXuLy, NgayDongKN,
		                            NoiDungPA, NguoiTiepNhan, NguoiTienXuLyCap1, NguoiTienXuLyCap2, 
		                            NguoiTienXuLyCap3, NgayQuaHan, LDate");

            //extraParam.Add("fl", @"Id");

            queryOption.ExtraParams = extraParam;

            queryOption.Start = 0;
            queryOption.Rows = int.MaxValue;

            // Danh sách nội dung công việc
            //Where điều kiện
            string whereClause = string.Empty;
            //if (khuVucID != -1)
            //{
            //    if (whereClause.Length > 0)
            //    {
            //        whereClause = string.Format("{0} AND KhuVucId : {1}", whereClause, khuVucID);
            //    }
            //    else
            //    {
            //        whereClause = "KhuVucId : " + khuVucID;
            //    }
            //}

            if (donViID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, donViID);
                }
                else
                {
                    whereClause = string.Format("PhongBanXuLyId : {0}", donViID);
                }
            }

            if (fromDate != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO ", whereClause, fromDate);
                }
                else
                {
                    whereClause = string.Format("NgayTiepNhanSort : [{0} TO ", fromDate);
                }
            }
            else
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND NgayTiepNhanSort : [* TO ", whereClause);
                }
                else
                {
                    whereClause = "NgayTiepNhanSort : [* TO ";
                }
            }

            if (toDate != -1)
            {
                whereClause = string.Format("{0} {1}]", whereClause, toDate);
            }
            else
            {
                whereClause = string.Format("{0} *]", whereClause);
            }

            if (loaiKhieuNaiID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND LoaiKhieuNaiId : {1}", whereClause, loaiKhieuNaiID);
                }
                else
                {
                    whereClause = string.Format("LoaiKhieuNaiId : {0}", loaiKhieuNaiID);
                }
            }

            if (linhVucChungID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND LinhVucChungId : {1}", whereClause, linhVucChungID);
                }
                else
                {
                    whereClause = string.Format("LinhVucChungId : {0}", linhVucChungID);
                }
            }

            if (linhVucConID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND LinhVucConId : {1}", whereClause, linhVucConID);
                }
                else
                {
                    whereClause = string.Format("LinhVucConId : {0}", linhVucConID);
                }
            }

            var solrQuery = new SolrQuery(whereClause);
            listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOption);

            return listKhieuNai;
        }

        public List<KhieuNai_ReportInfo> BaoCaoChiTietPPS_Solr(int khuVucID, int donViID, int fromDate, int toDate, List<int> listLoaiKhieuNaiID, List<int> listLinhVucChungID, List<int> listLinhVucConID, int trangThai)
        {

            List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

            var queryOption = new QueryOptions();

            //Lấy ra những trường nào
            var extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", @"SoThueBao, NgayTiepNhan, NoiDungPA, LoaiKhieuNai, LinhVucChung, LinhVucCon, MaDichVu, 
		                            SoTienKhauTru_TKC, SoTienKhauTru_KM, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Data,SoTienKhauTru_Khac,
		                            IsCSL, IsCCT, SHCV, PTSoLieu_IR, PTSoLieu_Khac, NoiDungXuLy, KetQuaXuLy, LUser_KetQuaXuLy, TenDayDu, MaTinh,TrangThai, LDate"); // NgayTraLoiKN, 

            //extraParam.Add("fl", @"Id");

            queryOption.ExtraParams = extraParam;

            queryOption.Start = 0;
            queryOption.Rows = int.MaxValue;

            // Danh sách nội dung công việc
            //Where điều kiện
            string whereClause = "IsTraSau : false";

            if (donViID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, donViID);
                }
                else
                {
                    whereClause = string.Format("PhongBanXuLyId : {0}", donViID);
                }
            }

            whereClause = string.Format("{0} AND LDate : [{1} TO {2}]", whereClause, ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true));

            if (listLoaiKhieuNaiID != null && listLoaiKhieuNaiID.Count > 0)
            {
                string whereClauseLoaiKhieuNai = " LoaiKhieuNaiId : (";
                for (int i = 0; i < listLoaiKhieuNaiID.Count; i++)
                {
                    whereClauseLoaiKhieuNai = string.Format("{0} {1}", whereClauseLoaiKhieuNai, listLoaiKhieuNaiID[i]);
                }

                whereClauseLoaiKhieuNai = string.Format("{0})", whereClauseLoaiKhieuNai);

                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND {1}", whereClause, whereClauseLoaiKhieuNai);
                }
                else
                {
                    whereClause = whereClauseLoaiKhieuNai;
                }
            }

            if (listLinhVucChungID != null && listLinhVucChungID.Count > 0)
            {
                string whereClauseLinhVucChungId = " LinhVucChungId : (";
                for (int i = 0; i < listLoaiKhieuNaiID.Count; i++)
                {
                    whereClauseLinhVucChungId = string.Format("{0} {1}", whereClauseLinhVucChungId, listLinhVucChungID[i]);
                }

                whereClauseLinhVucChungId = string.Format("{0})", whereClauseLinhVucChungId);

                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND {1}", whereClause, whereClauseLinhVucChungId);
                }
                else
                {
                    whereClause = whereClauseLinhVucChungId;
                }
            }

            if (listLinhVucConID != null && listLinhVucConID.Count > 0)
            {
                string whereClauseLinhVucConId = " LinhVucConId : (";
                for (int i = 0; i < listLoaiKhieuNaiID.Count; i++)
                {
                    whereClauseLinhVucConId = string.Format("{0} {1}", whereClauseLinhVucConId, listLinhVucConID[i]);
                }

                whereClauseLinhVucConId = string.Format("{0})", whereClauseLinhVucConId);

                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND {1}", whereClause, whereClauseLinhVucConId);
                }
                else
                {
                    whereClause = whereClauseLinhVucConId;
                }
            }

            if (trangThai != -1)
            {
                if (trangThai == 3)
                {
                    whereClause = string.Format("{0} AND TrangThai : 3", whereClause);
                }
                else
                {
                    whereClause = string.Format("{0} AND -TrangThai : 3", whereClause);
                }
            }

            var solrQuery = new SolrQuery(whereClause);
            listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOption);

            return listKhieuNai;

        }

        public List<KhieuNai_ReportInfo> BaoCaoChiTietPOST_Solr(int khuVucID, int donViID, int fromDate, int toDate, List<int> listLoaiKhieuNaiId, List<int> listLinhVucChungId, List<int> listLinhVucConId, int trangThai)
        {

            List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

            var queryOption = new QueryOptions();

            //Lấy ra những trường nào
            var extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", @"SoThueBao, LoaiKhieuNai, LinhVucChung, LinhVucCon, MaTinh, MaDichVu,
		                            NgayTiepNhan, HTTiepNhan, NoiDungPA, NoiDungCanHoTro, IsCSL, IsCCT, SHCV, PTSoLieu_IR, PTSoLieu_Khac, 
                                    NoiDungXuLy, KetQuaXuLy, LUser_KetQuaXuLy, TenDayDu,TrangThai, LDate"); // NgayTraLoiKN, 

            //extraParam.Add("fl", @"Id");

            queryOption.ExtraParams = extraParam;

            queryOption.Start = 0;
            queryOption.Rows = int.MaxValue;

            // Danh sách nội dung công việc
            //Where điều kiện
            string whereClause = "IsTraSau : true";

            if (donViID != -1)
            {
                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, donViID);
                }
                else
                {
                    whereClause = string.Format("PhongBanXuLyId : {0}", donViID);
                }
            }

            whereClause = string.Format("{0} AND LDate : [{1} TO {2}]", whereClause, ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true));

            if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
            {
                string whereClauseLoaiKhieuNai = " LoaiKhieuNaiId : (";
                for (int i = 0; i < listLoaiKhieuNaiId.Count; i++)
                {
                    whereClauseLoaiKhieuNai = string.Format("{0} {1}", whereClauseLoaiKhieuNai, listLoaiKhieuNaiId[i]);
                }

                whereClauseLoaiKhieuNai = string.Format("{0})", whereClauseLoaiKhieuNai);

                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND {1}", whereClause, whereClauseLoaiKhieuNai);
                }
                else
                {
                    whereClause = whereClauseLoaiKhieuNai;
                }
            }

            if (listLinhVucChungId != null && listLinhVucChungId.Count > 0)
            {
                string whereClauseLinhVucChungId = " LinhVucChungId : (";
                for (int i = 0; i < listLinhVucChungId.Count; i++)
                {
                    whereClauseLinhVucChungId = string.Format("{0} {1}", whereClauseLinhVucChungId, listLinhVucChungId[i]);
                }

                whereClauseLinhVucChungId = string.Format("{0})", whereClauseLinhVucChungId);

                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND {1}", whereClause, whereClauseLinhVucChungId);
                }
                else
                {
                    whereClause = whereClauseLinhVucChungId;
                }
            }

            if (listLinhVucConId != null && listLinhVucConId.Count > 0)
            {
                string whereClauseLinhVucConId = " LinhVucConId : (";
                for (int i = 0; i < listLinhVucConId.Count; i++)
                {
                    whereClauseLinhVucConId = string.Format("{0} {1}", whereClauseLinhVucConId, listLinhVucConId[i]);
                }

                whereClauseLinhVucConId = string.Format("{0})", whereClauseLinhVucConId);

                if (whereClause.Length > 0)
                {
                    whereClause = string.Format("{0} AND {1}", whereClause, whereClauseLinhVucConId);
                }
                else
                {
                    whereClause = whereClauseLinhVucConId;
                }
            }

            if (trangThai != -1)
            {
                if (trangThai == 3)
                {
                    whereClause = string.Format("{0} AND TrangThai : 3", whereClause);
                }
                else
                {
                    whereClause = string.Format("{0} AND -TrangThai : 3", whereClause);
                }
            }

            var solrQuery = new SolrQuery(whereClause);
            listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOption);

            return listKhieuNai;

        }

        //        public List<KhieuNai_ReportInfo> BaoCaoChiTietPPS_Solr(int khuVucID, int donViID, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID, int trangThai)
        //        {

        //            List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

        //            var queryOption = new QueryOptions();

        //            //Lấy ra những trường nào
        //            var extraParam = new Dictionary<string, string>();
        //            extraParam.Add("fl", @"SoThueBao, NgayTiepNhan, NoiDungPA, LinhVucCon, MaDichVu, 
        //		                            SoTienKhauTru_TKC, SoTienKhauTru_KM, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Data,SoTienKhauTru_Khac,
        //		                            IsCSL, IsCCT, SHCV, PTSoLieu_IR, PTSoLieu_Khac, NoiDungXuLy, KetQuaXuLy, LUser_KetQuaXuLy, TenDayDu, MaTinh,TrangThai, LDate"); // NgayTraLoiKN, 

        //            //extraParam.Add("fl", @"Id");

        //            queryOption.ExtraParams = extraParam;

        //            queryOption.Start = 0;
        //            queryOption.Rows = int.MaxValue;

        //            // Danh sách nội dung công việc
        //            //Where điều kiện
        //            string whereClause = "IsTraSau : false";

        //            if (donViID != -1)
        //            {
        //                if (whereClause.Length > 0)
        //                {
        //                    whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, donViID);
        //                }
        //                else
        //                {
        //                    whereClause = string.Format("PhongBanXuLyId : {0}", donViID);
        //                }
        //            }

        //            whereClause = string.Format("{0} AND LDate : [{1} TO {2}]", whereClause, ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true));

        //            if (loaiKhieuNaiID != -1)
        //            {
        //                if (whereClause.Length > 0)
        //                {
        //                    whereClause = string.Format("{0} AND LoaiKhieuNaiId : {1}", whereClause, loaiKhieuNaiID);
        //                }
        //                else
        //                {
        //                    whereClause = string.Format("LoaiKhieuNaiId : {0}", loaiKhieuNaiID);
        //                }
        //            }

        //            if (linhVucChungID != -1)
        //            {
        //                if (whereClause.Length > 0)
        //                {
        //                    whereClause = string.Format("{0} AND LinhVucChungId : {1}", whereClause, linhVucChungID);
        //                }
        //                else
        //                {
        //                    whereClause = string.Format("LinhVucChungId : {0}", linhVucChungID);
        //                }
        //            }

        //            if (linhVucConID != -1)
        //            {
        //                if (whereClause.Length > 0)
        //                {
        //                    whereClause = string.Format("{0} AND LinhVucConId : {1}", whereClause, linhVucConID);
        //                }
        //                else
        //                {
        //                    whereClause = string.Format("LinhVucConId : {0}", linhVucConID);
        //                }
        //            }

        //            if (trangThai != -1)
        //            {
        //                if (trangThai == 3)
        //                {
        //                    whereClause = string.Format("{0} AND TrangThai : 3", whereClause);
        //                }
        //                else
        //                {
        //                    whereClause = string.Format("{0} AND -TrangThai : 3", whereClause);
        //                }
        //            }

        //            var solrQuery = new SolrQuery(whereClause);
        //            listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOption);

        //            return listKhieuNai;

        //        }

        //        public List<KhieuNai_ReportInfo> BaoCaoChiTietPOST_Solr(int khuVucID, int donViID, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID, int trangThai)
        //        {

        //            List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

        //            var queryOption = new QueryOptions();

        //            //Lấy ra những trường nào
        //            var extraParam = new Dictionary<string, string>();
        //            extraParam.Add("fl", @"SoThueBao, LoaiKhieuNai, LinhVucChung, LinhVucCon, MaTinh, MaDichVu,
        //		                            NgayTiepNhan, HTTiepNhan, NoiDungPA, NoiDungCanHoTro, IsCSL, IsCCT, SHCV, PTSoLieu_IR, PTSoLieu_Khac, 
        //                                    NoiDungXuLy, KetQuaXuLy, LUser_KetQuaXuLy, TenDayDu,TrangThai, LDate"); // NgayTraLoiKN, 

        //            //extraParam.Add("fl", @"Id");

        //            queryOption.ExtraParams = extraParam;

        //            queryOption.Start = 0;
        //            queryOption.Rows = int.MaxValue;

        //            // Danh sách nội dung công việc
        //            //Where điều kiện
        //            string whereClause = "IsTraSau : true";

        //            if (donViID != -1)
        //            {
        //                if (whereClause.Length > 0)
        //                {
        //                    whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, donViID);
        //                }
        //                else
        //                {
        //                    whereClause = string.Format("PhongBanXuLyId : {0}", donViID);
        //                }
        //            }

        //            whereClause = string.Format("{0} AND LDate : [{1} TO {2}]", whereClause, ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true));

        //            if (loaiKhieuNaiID != -1)
        //            {
        //                if (whereClause.Length > 0)
        //                {
        //                    whereClause = string.Format("{0} AND LoaiKhieuNaiId : {1}", whereClause, loaiKhieuNaiID);
        //                }
        //                else
        //                {
        //                    whereClause = string.Format("LoaiKhieuNaiId : {0}", loaiKhieuNaiID);
        //                }
        //            }

        //            if (linhVucChungID != -1)
        //            {
        //                if (whereClause.Length > 0)
        //                {
        //                    whereClause = string.Format("{0} AND LinhVucChungId : {1}", whereClause, linhVucChungID);
        //                }
        //                else
        //                {
        //                    whereClause = string.Format("LinhVucChungId : {0}", linhVucChungID);
        //                }
        //            }

        //            if (linhVucConID != -1)
        //            {
        //                if (whereClause.Length > 0)
        //                {
        //                    whereClause = string.Format("{0} AND LinhVucConId : {1}", whereClause, linhVucConID);
        //                }
        //                else
        //                {
        //                    whereClause = string.Format("LinhVucConId : {0}", linhVucConID);
        //                }
        //            }

        //            if (trangThai != -1)
        //            {
        //                if (trangThai == 3)
        //                {
        //                    whereClause = string.Format("{0} AND TrangThai : 3", whereClause);
        //                }
        //                else
        //                {
        //                    whereClause = string.Format("{0} AND -TrangThai : 3", whereClause);
        //                }
        //            }

        //            var solrQuery = new SolrQuery(whereClause);
        //            listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOption);

        //            return listKhieuNai;

        //        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 16/09/2013
        /// Todo : Tạo báo cáo tổng hợp theo khiếu nại
        /// </summary>
        /// <param name="donViID"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="listDoiTacId"></param>
        /// <param name="loaiKhieuNaiId"></param>
        /// <returns></returns>
        public DataSet BaoCaoTongHopTheoKhieuNai_Solr(int doiTacId, int phongBanXuLyId, DateTime fromDate, DateTime toDate, List<string> listDoiTacId,
                                                 List<string> listLoaiKhieuNaiId, List<string> listLinhVucChungId, List<string> listLinhVucConId)
        {
            DataSet dsResult = new DataSet();
            DateTime timeNow = DateTime.Now;

            string sFromDate = fromDate.ToString("yyyyMMdd");
            string sToDate = toDate.ToString("yyyyMMdd");

            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            string colNameLoaiKhieuNaiId = "LoaiKhieuNaiId";
            string colNameLinhVucChungId = "LinhVucChungId";
            string colNameLinhVucConId = "LinhVucConId";

            string loaiKhieuNaiId = string.Empty;
            string linhVucChungId = string.Empty;
            string linhVucConId = string.Empty;

            string sqlLoaiKhieuNai = string.Empty;
            string sqlLinhVucChung = string.Empty;
            string sqlLinhVucCon = string.Empty;

            QueryOptions queryOptionLoaiKhieuNai = new QueryOptions();
            QueryOptions queryOptionLinhVucChung = new QueryOptions();
            QueryOptions queryOptionLinhVucCon = new QueryOptions();

            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"LoaiKhieuNaiId,LoaiKhieuNai");

            queryOptionLoaiKhieuNai.ExtraParams = extraParamLoaiKhieuNai;

            queryOptionLoaiKhieuNai.Start = 0;
            queryOptionLoaiKhieuNai.Rows = listLoaiKhieuNaiId.Count;

            //Lấy ra những trường nào
            var extraParamLinhVucChung = new Dictionary<string, string>();
            extraParamLinhVucChung.Add("fl", @"LinhVucChungId, LinhVucChung");

            queryOptionLinhVucChung.ExtraParams = extraParamLinhVucChung;

            queryOptionLinhVucChung.Start = 0;
            queryOptionLinhVucChung.Rows = listLinhVucChungId.Count;

            //Lấy ra những trường nào
            var extraParamLinhVucCon = new Dictionary<string, string>();
            extraParamLinhVucCon.Add("fl", @"LinhVucConId, LinhVucCon");

            queryOptionLinhVucCon.ExtraParams = extraParamLinhVucCon;

            queryOptionLinhVucCon.Start = 0;
            queryOptionLinhVucCon.Rows = listLinhVucConId.Count;

            FacetParameters fpLoaiKhieuNai = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("LoaiKhieuNaiId");
            fpLoaiKhieuNai.Queries.Add(facetField);
            queryOptionLoaiKhieuNai.Facet = fpLoaiKhieuNai;

            FacetParameters fpLinhVucChung = new FacetParameters();
            facetField = new SolrFacetFieldQuery("LinhVucChungId");
            fpLinhVucChung.Queries.Add(facetField);
            queryOptionLinhVucChung.Facet = fpLinhVucChung;

            FacetParameters fpLinhVucCon = new FacetParameters();
            facetField = new SolrFacetFieldQuery("LinhVucConId");
            fpLinhVucCon.Queries.Add(facetField);
            queryOptionLinhVucCon.Facet = fpLinhVucCon;

            //Where điều kiện
            string whereClauseLoaiKhieuNai = "*:* ";
            string whereClauseLinhVucChung = "*:* ";
            string whereClauseLinhVucCon = "*:* ";

            string whereClause = string.Empty;
            SolrQuery solrQuery = null;

            DataTable dtLoaiKhieuNai = new DataTable();
            DataTable dtLinhVucChung = new DataTable();
            DataTable dtLinhVucCon = new DataTable();

            dtLoaiKhieuNai.Columns.Add("LoaiKhieuNaiId");
            dtLoaiKhieuNai.Columns.Add("LoaiKhieuNai");
            dtLoaiKhieuNai.Columns.Add("ParentId");

            for (int i = 0; i < listLoaiKhieuNaiId.Count; i++)
            {
                DataRow row = dtLoaiKhieuNai.NewRow();
                row["LoaiKhieuNaiId"] = listLoaiKhieuNaiId[i];
                row["ParentId"] = "0";

                for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                {
                    if (row["LoaiKhieuNaiId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                    {
                        row["LoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                        break;
                    }
                }

                dtLoaiKhieuNai.Rows.Add(row);
            }

            dtLinhVucChung.Columns.Add("LinhVucChungId");
            dtLinhVucChung.Columns.Add("LinhVucChung");
            dtLinhVucChung.Columns.Add("ParentId");

            for (int i = 0; i < listLinhVucChungId.Count; i++)
            {
                DataRow row = dtLinhVucChung.NewRow();
                row["LinhVucChungId"] = listLinhVucChungId[i];

                for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                {
                    if (row["LinhVucChungId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                    {
                        row["LinhVucChung"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                        row["ParentId"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].ParentId;
                        break;
                    }
                }

                dtLinhVucChung.Rows.Add(row);
            }

            dtLinhVucCon.Columns.Add("LinhVucConId");
            dtLinhVucCon.Columns.Add("LinhVucCon");
            dtLinhVucCon.Columns.Add("ParentId");

            for (int i = 0; i < listLinhVucConId.Count; i++)
            {
                DataRow row = dtLinhVucCon.NewRow();
                row["LinhVucConId"] = listLinhVucConId[i];

                for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                {
                    if (row["LinhVucConId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                    {
                        row["LinhVucCon"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                        row["ParentId"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].ParentId;
                        break;
                    }
                }

                dtLinhVucCon.Rows.Add(row);
            }

            for (int indexDoiTac = 0; indexDoiTac < listDoiTacId.Count; indexDoiTac++)
            {
                dtLoaiKhieuNai.Columns.Add(listDoiTacId[indexDoiTac]);
                dtLinhVucChung.Columns.Add(listDoiTacId[indexDoiTac]);
                dtLinhVucCon.Columns.Add(listDoiTacId[indexDoiTac]);

                whereClause = string.Format("{0} AND DoiTacId : {1} AND NgayTiepNhanSort : [{2} TO {3}]", whereClauseLoaiKhieuNai, listDoiTacId[indexDoiTac], sFromDate, sToDate);
                solrQuery = new SolrQuery(whereClause);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
                GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, listDoiTacId[indexDoiTac], listKhieuNaiInfo);

                whereClause = string.Format("{0} AND DoiTacId : {1} AND NgayTiepNhanSort : [{2} TO {3}]", whereClauseLinhVucChung, listDoiTacId[indexDoiTac], sFromDate, sToDate);
                solrQuery = new SolrQuery(whereClause);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
                GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, listDoiTacId[indexDoiTac], listKhieuNaiInfo);

                whereClause = string.Format("{0} AND DoiTacId : {1} AND NgayTiepNhanSort : [{2} TO {3}]", whereClauseLinhVucCon, listDoiTacId[indexDoiTac], sFromDate, sToDate);
                solrQuery = new SolrQuery(whereClause);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);

                GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, listDoiTacId[indexDoiTac], listKhieuNaiInfo);
            }

            dtLoaiKhieuNai.Columns.Add("TongSoPAKNGiaiQuyetDuoc");
            dtLoaiKhieuNai.Columns.Add("TongSoPAKNToXLNVGiaiQuyetDuoc");
            dtLoaiKhieuNai.Columns.Add("TongSoPAKNChuyenDonViLienQuan");
            //dtLoaiKhieuNai.Columns.Add("DonViNhanChuyenTiepKhieuNai");
            dtLoaiKhieuNai.Columns.Add("TongSoKhieuNaiTonDongDoQuaHan");
            //dtLoaiKhieuNai.Columns.Add("DonViTonDongKhieuNai");
            dtLoaiKhieuNai.Columns.Add("TongSoKhieuNaiTonDongHienTai");

            dtLinhVucChung.Columns.Add("TongSoPAKNGiaiQuyetDuoc");
            dtLinhVucChung.Columns.Add("TongSoPAKNToXLNVGiaiQuyetDuoc");
            dtLinhVucChung.Columns.Add("TongSoPAKNChuyenDonViLienQuan");
            //dtLinhVucChung.Columns.Add("DonViNhanChuyenTiepKhieuNai");
            dtLinhVucChung.Columns.Add("TongSoKhieuNaiTonDongDoQuaHan");
            //dtLinhVucChung.Columns.Add("DonViTonDongKhieuNai");
            dtLinhVucChung.Columns.Add("TongSoKhieuNaiTonDongHienTai");

            dtLinhVucCon.Columns.Add("TongSoPAKNGiaiQuyetDuoc");
            dtLinhVucCon.Columns.Add("TongSoPAKNToXLNVGiaiQuyetDuoc");
            dtLinhVucCon.Columns.Add("TongSoPAKNChuyenDonViLienQuan");
            //dtLinhVucCon.Columns.Add("DonViNhanChuyenTiepKhieuNai");
            dtLinhVucCon.Columns.Add("TongSoKhieuNaiTonDongDoQuaHan");
            //dtLinhVucCon.Columns.Add("DonViTonDongKhieuNai");
            dtLinhVucCon.Columns.Add("TongSoKhieuNaiTonDongHienTai");

            #region Tổng số PAKN giải quyết trong tuần

            whereClause = string.Format("{0} AND TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND DoiTacXuLyId:{3}", whereClauseLoaiKhieuNai, sFromDate, sToDate, doiTacId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND DoiTacXuLyId:{3}", whereClauseLinhVucChung, sFromDate, sToDate, doiTacId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND DoiTacXuLyId:{3}", whereClauseLinhVucCon, sFromDate, sToDate, doiTacId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

            #endregion

            #region PAKN TỔ XLNV GIẢI QUYẾT ĐƯỢC

            whereClause = string.Format("{0} AND TrangThai : 3 AND PhongBanXuLyId : {1} AND NgayDongKNSort : [{2} TO {3}]", whereClauseLoaiKhieuNai, phongBanXuLyId, sFromDate, sToDate);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "TongSoPAKNToXLNVGiaiQuyetDuoc", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND TrangThai : 3 AND PhongBanXuLyId : {1} AND NgayDongKNSort : [{2} TO {3}]", whereClauseLinhVucChung, phongBanXuLyId, sFromDate, sToDate);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "TongSoPAKNToXLNVGiaiQuyetDuoc", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND TrangThai : 3 AND PhongBanXuLyId : {1} AND NgayDongKNSort : [{2} TO {3}]", whereClauseLinhVucCon, phongBanXuLyId, sFromDate, sToDate);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "TongSoPAKNToXLNVGiaiQuyetDuoc", listKhieuNaiInfo);

            #endregion

            #region Tổng số PAKN chuyển các đơn vị liên quan
            string fromDateSolr = this.ConvertDateToSolr(sFromDate, true, false);
            string toDateSolr = this.ConvertDateToSolr(sToDate, false, true);

            whereClause = string.Format("{0} AND  PhongBanXuLyTruocId : {1} AND -PhongBanXuLyId : {1} AND NgayTiepNhan : [{2} TO {3}] AND HanhDong:2", whereClauseLoaiKhieuNai, phongBanXuLyId, fromDateSolr, toDateSolr);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "TongSoPAKNChuyenDonViLienQuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND  PhongBanXuLyTruocId : {1} AND -PhongBanXuLyId : {1}  AND NgayTiepNhan : [{2} TO {3}] AND HanhDong:2", whereClauseLinhVucChung, phongBanXuLyId, fromDateSolr, toDateSolr);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "TongSoPAKNChuyenDonViLienQuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND  PhongBanXuLyTruocId : {1} AND -PhongBanXuLyId : {1}  AND NgayTiepNhan : [{2} TO {3}] AND HanhDong:2", whereClauseLinhVucCon, phongBanXuLyId, fromDateSolr, toDateSolr);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "TongSoPAKNChuyenDonViLienQuan", listKhieuNaiInfo);

            #endregion

            #region Đơn vị nhận chuyển tiếp khiếu nại - Bỏ

            //whereClause = string.Format("{0} AND PhongBanXuLyId : {1} AND -PhongBanXuLyTruocId : PhongBanXuLyId", whereClauseLoaiKhieuNai, phongBanXuLyId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(Config.ServerSolr, solrQuery, queryOptionLoaiKhieuNai);
            //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "DonViNhanChuyenTiepKhieuNai", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND  PhongBanXuLyTruocId : {1} AND -PhongBanXuLyTruocId : PhongBanXuLyId", whereClauseLinhVucChung, phongBanXuLyId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(Config.ServerSolr, solrQuery, queryOptionLinhVucChung);
            //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "DonViNhanChuyenTiepKhieuNai", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND  PhongBanXuLyTruocId : {1} AND -PhongBanXuLyTruocId : PhongBanXuLyId", whereClauseLinhVucCon, phongBanXuLyId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(Config.ServerSolr, solrQuery, queryOptionLinhVucCon);
            //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "DonViNhanChuyenTiepKhieuNai", listKhieuNaiInfo);

            #endregion

            #region Số khiếu nại tiếp nhận trong tuần tồn đọng do quá hạn

            whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] AND NgayQuaHanSort : [{1} TO {2}] AND -TrangThai : 3 AND  PhongBanXuLyId : {3}", whereClauseLoaiKhieuNai, sFromDate, sToDate, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "TongSoKhieuNaiTonDongDoQuaHan", listKhieuNaiInfo);

            whereClause = string.Format("{0}  AND NgayTiepNhanSort : [{1} TO {2}] AND NgayQuaHanSort : [{1} TO {2}] AND -TrangThai : 3 AND  PhongBanXuLyId : {3}", whereClauseLinhVucChung, sFromDate, sToDate, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "TongSoKhieuNaiTonDongDoQuaHan", listKhieuNaiInfo);

            whereClause = string.Format("{0}  AND NgayTiepNhanSort : [{1} TO {2}] AND NgayQuaHanSort : [{1} TO {2}] AND -TrangThai : 3 AND  PhongBanXuLyId : {3}", whereClauseLinhVucCon, sFromDate, sToDate, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "TongSoKhieuNaiTonDongDoQuaHan", listKhieuNaiInfo);

            #endregion

            #region Tổng số khiếu nại tồn đọng tính đến thời điểm hiện tại

            whereClause = string.Format("{0} AND -TrangThai : 3 AND  PhongBanXuLyId : {3} AND NgayQuaHanPhongBanXuLy:[* TO {4}]", whereClauseLoaiKhieuNai, sFromDate, sToDate, phongBanXuLyId, ConvertUtility.ConvertDateTimeToSolr(timeNow, timeNow.Hour, timeNow.Minute, timeNow.Second, 999));
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "TongSoKhieuNaiTonDongHienTai", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND -TrangThai : 3 AND  PhongBanXuLyId : {3} AND NgayQuaHanPhongBanXuLy:[* TO {4}]", whereClauseLinhVucChung, sFromDate, sToDate, phongBanXuLyId, ConvertUtility.ConvertDateTimeToSolr(timeNow, timeNow.Hour, timeNow.Minute, timeNow.Second, 999));
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "TongSoKhieuNaiTonDongHienTai", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND -TrangThai : 3 AND  PhongBanXuLyId : {3} AND NgayQuaHanPhongBanXuLy:[* TO {4}]", whereClauseLinhVucCon, sFromDate, sToDate, phongBanXuLyId, ConvertUtility.ConvertDateTimeToSolr(timeNow, timeNow.Hour, timeNow.Minute, timeNow.Second, 999));
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "TongSoKhieuNaiTonDongHienTai", listKhieuNaiInfo);

            #endregion

            #region Đơn vị tồn đọng khiếu nại - Bỏ

            //whereClause = string.Format("{0}  AND NgayQuaHanSort : {{* TO {1}}} AND -TrangThai : 3 AND  PhongBanXuLyId : {2}", whereClauseLoaiKhieuNai, fromDate, phongBanXuLyId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(Config.ServerSolr, solrQuery, queryOptionLoaiKhieuNai);
            //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "DonViTonDongKhieuNai", listKhieuNaiInfo);

            //whereClause = string.Format("{0}  AND NgayQuaHanSort :  {{* TO {1}}} AND -TrangThai : 3 AND  PhongBanXuLyId : {2}", whereClauseLinhVucChung, fromDate, phongBanXuLyId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(Config.ServerSolr, solrQuery, queryOptionLinhVucChung);
            //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "DonViTonDongKhieuNai", listKhieuNaiInfo);

            //whereClause = string.Format("{0}  AND NgayQuaHanSort :  {{* TO {1}}} AND -TrangThai : 3 AND  PhongBanXuLyId : {2}", whereClauseLinhVucCon, fromDate, phongBanXuLyId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(Config.ServerSolr, solrQuery, queryOptionLinhVucCon);
            //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "DonViTonDongKhieuNai", listKhieuNaiInfo);

            #endregion

            dsResult.Tables.Add(dtLoaiKhieuNai);
            dsResult.Tables.Add(dtLinhVucChung);
            dsResult.Tables.Add(dtLinhVucCon);
            return dsResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 25/09/2013
        /// Todo : Thực hiện báo cáo theo khiếu nại (sử dụng lệnh Sql)
        /// </summary>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="listLoaiKhieuNaiId"></param>
        /// <param name="listLinhVucChungId"></param>
        /// <param name="listLinhVucConId"></param>
        /// <returns></returns>        
        public DataSet BaoCaoTongHopKhieuNaiTheoToGQKN_Solr(int khuVucId, int phongBanXuLyId, DateTime fromDate, DateTime toDate, List<string> listLoaiKhieuNaiId, List<string> listLinhVucChungId, List<string> listLinhVucConId)
        {
            DataSet dsResult = new DataSet();

            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);
            string iFromDate = fromDate.ToString("yyyyMMdd");
            string iToDate = toDate.ToString("yyyyMMdd");
            string iStartYear = string.Format("{0}0101", fromDate.Year);
            string iFromDateMinus1 = fromDate.Subtract(new TimeSpan(1, 0, 0, 0)).ToString("yyyyMMdd");

            string colNameLoaiKhieuNaiId = "LoaiKhieuNaiId";
            string colNameLinhVucChungId = "LinhVucChungId";
            string colNameLinhVucConId = "LinhVucConId";

            string loaiKhieuNaiId = string.Empty;
            string linhVucChungId = string.Empty;
            string linhVucConId = string.Empty;

            string sqlLoaiKhieuNai = string.Empty;
            string sqlLinhVucChung = string.Empty;
            string sqlLinhVucCon = string.Empty;

            QueryOptions queryOptionLoaiKhieuNai = new QueryOptions();
            QueryOptions queryOptionLinhVucChung = new QueryOptions();
            QueryOptions queryOptionLinhVucCon = new QueryOptions();

            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"LoaiKhieuNaiId,LoaiKhieuNai");

            queryOptionLoaiKhieuNai.ExtraParams = extraParamLoaiKhieuNai;

            queryOptionLoaiKhieuNai.Start = 0;
            queryOptionLoaiKhieuNai.Rows = listLoaiKhieuNaiId.Count;

            //Lấy ra những trường nào
            var extraParamLinhVucChung = new Dictionary<string, string>();
            extraParamLinhVucChung.Add("fl", @"LinhVucChungId, LinhVucChung");

            queryOptionLinhVucChung.ExtraParams = extraParamLinhVucChung;

            queryOptionLinhVucChung.Start = 0;
            queryOptionLinhVucChung.Rows = listLinhVucChungId.Count;

            //Lấy ra những trường nào
            var extraParamLinhVucCon = new Dictionary<string, string>();
            extraParamLinhVucCon.Add("fl", @"LinhVucConId, LinhVucCon");

            queryOptionLinhVucCon.ExtraParams = extraParamLinhVucCon;

            queryOptionLinhVucCon.Start = 0;
            queryOptionLinhVucCon.Rows = listLinhVucConId.Count;

            FacetParameters fpLoaiKhieuNai = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("LoaiKhieuNaiId");
            fpLoaiKhieuNai.Queries.Add(facetField);
            queryOptionLoaiKhieuNai.Facet = fpLoaiKhieuNai;

            FacetParameters fpLinhVucChung = new FacetParameters();
            facetField = new SolrFacetFieldQuery("LinhVucChungId");
            fpLinhVucChung.Queries.Add(facetField);
            queryOptionLinhVucChung.Facet = fpLinhVucChung;

            FacetParameters fpLinhVucCon = new FacetParameters();
            facetField = new SolrFacetFieldQuery("LinhVucConId");
            fpLinhVucCon.Queries.Add(facetField);
            queryOptionLinhVucCon.Facet = fpLinhVucCon;

            //Where điều kiện
            string whereClauseLoaiKhieuNai = "*:* ";
            string whereClauseLinhVucChung = "*:* ";
            string whereClauseLinhVucCon = "*:* ";
            string whereClausePhongBanXuLy = string.Empty;

            //if (khuVucId != -1)
            //{
            //    whereClauseLoaiKhieuNai = string.Format("{0} AND KhuVucId : {1}", whereClauseLoaiKhieuNai, khuVucId);
            //    whereClauseLinhVucChung = string.Format("{0} AND KhuVucId : {1}", whereClauseLinhVucChung, khuVucId);
            //    whereClauseLinhVucCon = string.Format("{0} AND KhuVucId : {1}", whereClauseLinhVucCon, khuVucId);
            //}

            if (phongBanXuLyId != -1)
            {
                whereClausePhongBanXuLy = string.Format(" AND PhongBanXuLyId : {0}", phongBanXuLyId);
            }

            string whereClause = string.Empty;
            SolrQuery solrQuery = null;

            DataTable dtLoaiKhieuNai = new DataTable();
            DataTable dtLinhVucChung = new DataTable();
            DataTable dtLinhVucCon = new DataTable();

            dtLoaiKhieuNai.Columns.Add("LoaiKhieuNaiId");
            dtLoaiKhieuNai.Columns.Add("LoaiKhieuNai");
            dtLoaiKhieuNai.Columns.Add("ParentId");

            for (int i = 0; i < listLoaiKhieuNaiId.Count; i++)
            {
                DataRow row = dtLoaiKhieuNai.NewRow();
                row["LoaiKhieuNaiId"] = listLoaiKhieuNaiId[i];
                row["ParentId"] = "0";

                for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                {
                    if (row["LoaiKhieuNaiId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                    {
                        row["LoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                        break;
                    }
                }

                dtLoaiKhieuNai.Rows.Add(row);
            }

            dtLinhVucChung.Columns.Add("LinhVucChungId");
            dtLinhVucChung.Columns.Add("LinhVucChung");
            dtLinhVucChung.Columns.Add("ParentId");

            for (int i = 0; i < listLinhVucChungId.Count; i++)
            {
                DataRow row = dtLinhVucChung.NewRow();
                row["LinhVucChungId"] = listLinhVucChungId[i];

                for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                {
                    if (row["LinhVucChungId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                    {
                        row["LinhVucChung"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                        row["ParentId"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].ParentId;
                        break;
                    }
                }

                dtLinhVucChung.Rows.Add(row);
            }

            dtLinhVucCon.Columns.Add("LinhVucConId");
            dtLinhVucCon.Columns.Add("LinhVucCon");
            dtLinhVucCon.Columns.Add("ParentId");

            for (int i = 0; i < listLinhVucConId.Count; i++)
            {
                DataRow row = dtLinhVucCon.NewRow();
                row["LinhVucConId"] = listLinhVucConId[i];

                for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                {
                    if (row["LinhVucConId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                    {
                        row["LinhVucCon"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                        row["ParentId"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].ParentId;
                        break;
                    }
                }

                dtLinhVucCon.Rows.Add(row);
            }

            dtLoaiKhieuNai.Columns.Add("LuyKeKNDaGiaiQuyetDenDauTuanX");
            dtLoaiKhieuNai.Columns.Add("LuyKeKNTonDongDenDauTuanX");
            dtLoaiKhieuNai.Columns.Add("SoLuongTiepNhanTrongTuan");
            dtLoaiKhieuNai.Columns.Add("TongSoPAKNGiaiQuyetDuoc");

            dtLinhVucChung.Columns.Add("LuyKeKNDaGiaiQuyetDenDauTuanX");
            dtLinhVucChung.Columns.Add("LuyKeKNTonDongDenDauTuanX");
            dtLinhVucChung.Columns.Add("SoLuongTiepNhanTrongTuan");
            dtLinhVucChung.Columns.Add("TongSoPAKNGiaiQuyetDuoc");

            dtLinhVucCon.Columns.Add("LuyKeKNDaGiaiQuyetDenDauTuanX");
            dtLinhVucCon.Columns.Add("LuyKeKNTonDongDenDauTuanX");
            dtLinhVucCon.Columns.Add("SoLuongTiepNhanTrongTuan");
            dtLinhVucCon.Columns.Add("TongSoPAKNGiaiQuyetDuoc");

            #region Lũy kế KN đã GQ đến đầu tuần 30/2013

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLoaiKhieuNai, iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "LuyKeKNDaGiaiQuyetDenDauTuanX", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucChung, iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "LuyKeKNDaGiaiQuyetDenDauTuanX", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucCon, iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "LuyKeKNDaGiaiQuyetDenDauTuanX", listKhieuNaiInfo);

            #endregion

            #region Lũy kế KN tồn đọng đầu tuần 30/2013

            whereClause = string.Format("{0} AND NgayTiepNhanSort : [* TO {1}] AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClauseLoaiKhieuNai, iFromDateMinus1, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "LuyKeKNTonDongDenDauTuanX", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayTiepNhanSort : [* TO {1}] AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClauseLinhVucChung, iFromDateMinus1, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "LuyKeKNTonDongDenDauTuanX", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayTiepNhanSort : [* TO {1}] AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClauseLinhVucCon, iFromDateMinus1, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "LuyKeKNTonDongDenDauTuanX", listKhieuNaiInfo);

            #endregion

            #region Số lượng tiếp nhận trong tuần

            whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3}", whereClauseLoaiKhieuNai, sFromDate, sToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3}", whereClauseLinhVucChung, sFromDate, sToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3}", whereClauseLinhVucCon, sFromDate, sToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] {3}", whereClauseLoaiKhieuNai, iFromDate, iToDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] {3}", whereClauseLinhVucChung, iFromDate, iToDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] {3}", whereClauseLinhVucCon, iFromDate, iToDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            #endregion

            #region Số lượng đã giải quyết trong tuần

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLoaiKhieuNai, iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucChung, iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucCon, iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

            #endregion


            //#region Lũy kế KN đã GQ đến đầu tuần 30/2013

            //whereClause = string.Format("{0} AND NgayTiepNhanSort : {{* TO {1}}} AND TrangThai : 3 {2}", whereClauseLoaiKhieuNai, fromDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "LuyKeKNDaGiaiQuyetDenDauTuanX", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort : {{* TO {1}}} AND TrangThai : 3 {2}", whereClauseLinhVucChung, fromDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "LuyKeKNDaGiaiQuyetDenDauTuanX", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort : {{* TO {1}}} AND TrangThai : 3 {2}", whereClauseLinhVucCon, fromDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "LuyKeKNDaGiaiQuyetDenDauTuanX", listKhieuNaiInfo);

            //#endregion

            //#region Lũy kế KN tồn đọng đầu tuần 30/2013

            //whereClause = string.Format("{0} AND NgayTiepNhanSort : {{* TO {1}}} AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClauseLoaiKhieuNai, fromDate, phongBanXuLyId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "LuyKeKNTonDongDenDauTuanX", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort : {{* TO {1}}} AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClauseLinhVucChung, fromDate, phongBanXuLyId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "LuyKeKNTonDongDenDauTuanX", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort : {{* TO {1}}} AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClauseLinhVucCon, fromDate, phongBanXuLyId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "LuyKeKNTonDongDenDauTuanX", listKhieuNaiInfo);

            //#endregion

            //#region Số lượng tiếp nhận trong tuần

            //whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3}", whereClauseLoaiKhieuNai, sFromDate, sToDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLoaiKhieuNai);
            //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3}", whereClauseLinhVucChung, sFromDate, sToDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLinhVucChung);
            //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3}", whereClauseLinhVucCon, sFromDate, sToDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLinhVucCon);
            //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            ////whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] {3}", whereClauseLoaiKhieuNai, fromDate, toDate, whereClausePhongBanXuLy);
            ////solrQuery = new SolrQuery(whereClause);
            ////listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            ////GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            ////whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] {3}", whereClauseLinhVucChung, fromDate, toDate, whereClausePhongBanXuLy);
            ////solrQuery = new SolrQuery(whereClause);
            ////listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            ////GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            ////whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] {3}", whereClauseLinhVucCon, fromDate, toDate, whereClausePhongBanXuLy);
            ////solrQuery = new SolrQuery(whereClause);
            ////listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            ////GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            //#endregion

            //#region Số lượng đã giải quyết trong tuần

            //whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLoaiKhieuNai, fromDate, toDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucChung, fromDate, toDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucCon, fromDate, toDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

            //#endregion

            dsResult.Tables.Add(dtLoaiKhieuNai);
            dsResult.Tables.Add(dtLinhVucChung);
            dsResult.Tables.Add(dtLinhVucCon);

            #region Báo cáo PPS

            // Lấy dữ liệu báo cáo PPS
            int LOAI_KHIEU_NAI_CUOC_TB_TRA_TRUOC = 30;
            DataTable dtPPS = new DataTable();
            dtPPS.Columns.Add("LinhVucConId");
            dtPPS.Columns.Add("LinhVucCon");
            dtPPS.Columns.Add("MaDichVu");
            dtPPS.Columns.Add("CapChiTiet");
            dtPPS.Columns.Add("BuCuoc");
            dtPPS.Columns.Add("SoTien");

            List<LoaiKhieuNaiInfo> listLinhVucChung = LoaiKhieuNaiImpl.ListLoaiKhieuNai.FindAll(delegate (LoaiKhieuNaiInfo obj)
            { return obj.ParentId == LOAI_KHIEU_NAI_CUOC_TB_TRA_TRUOC; });
            if (listLinhVucChung != null)
            {
                for (int i = 0; i < listLinhVucChung.Count; i++)
                {
                    List<LoaiKhieuNaiInfo> listLinhVucCon = LoaiKhieuNaiImpl.ListLoaiKhieuNai.FindAll(delegate (LoaiKhieuNaiInfo obj)
                    { return obj.ParentId == listLinhVucChung[i].Id; });
                    if (listLinhVucCon != null && listLinhVucCon.Count > 0)
                    {
                        for (int j = 0; j < listLinhVucCon.Count; j++)
                        {
                            DataRow row = dtPPS.NewRow();
                            row["LinhVucConId"] = listLinhVucCon[j].Id;
                            row["LinhVucCon"] = listLinhVucCon[j].Name;
                            row["MaDichVu"] = listLinhVucCon[j].MaDichVu;
                            dtPPS.Rows.Add(row);
                        }
                    }
                }
            }

            QueryOptions queryOptionPPS = new QueryOptions();

            //Lấy ra những trường nào
            var extraParamPPS = new Dictionary<string, string>();
            extraParamPPS.Add("fl", @"LinhVucConId, LinhVucCon");

            queryOptionPPS.ExtraParams = extraParamPPS;

            queryOptionPPS.Start = 0;
            queryOptionPPS.Rows = LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count;

            FacetParameters fpPPS = new FacetParameters();
            facetField = new SolrFacetFieldQuery("LinhVucConId");
            fpPPS.Queries.Add(facetField);
            queryOptionPPS.Facet = fpPPS;

            //Where điều kiện
            string whereClauseCapChiTiet = string.Format("LoaiKhieuNaiId : {0} AND IsTraSau : false AND IsCCT : true AND NgayDongKNSort : [{1} TO {2}] {3}", LOAI_KHIEU_NAI_CUOC_TB_TRA_TRUOC, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), whereClausePhongBanXuLy);
            string whereBuCuoc = string.Format("LoaiKhieuNaiId : {0} AND IsTraSau : false AND IsCCT : false AND NgayDongKNSort : [{1} TO {2}] {3}", LOAI_KHIEU_NAI_CUOC_TB_TRA_TRUOC, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), whereClausePhongBanXuLy);

            solrQuery = new SolrQuery(whereClauseCapChiTiet);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOptionPPS);
            GetCountOfFacet(dtPPS, "LinhVucConId", "CapChiTiet", listKhieuNaiInfo);

            solrQuery = new SolrQuery(whereBuCuoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOptionPPS);
            GetCountOfFacet(dtPPS, "LinhVucConId", "BuCuoc", listKhieuNaiInfo);

            StatsParameters spPPS = new StatsParameters();
            spPPS.AddFacet("LinhVucConId");
            spPPS.AddField("SoTienKhauTru_TKC");
            spPPS.AddField("SoTienKhauTru_KM");
            spPPS.AddField("SoTienKhauTru_KM1");
            spPPS.AddField("SoTienKhauTru_KM2");
            spPPS.AddField("SoTienKhauTru_Data");
            spPPS.AddField("SoTienKhauTru_Khac");
            queryOptionPPS.Stats = spPPS;
            string whereClauseSoTien = string.Format("LoaiKhieuNaiId : {0} AND IsTraSau : false AND IsCCT : false AND NgayDongKNSort : [{1} TO {2}] {3}", LOAI_KHIEU_NAI_CUOC_TB_TRA_TRUOC, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClauseSoTien);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOptionPPS);
            //GetCountOfFacet(dtPPS, "LinhVucConId", "SoTien", listKhieuNaiInfo);

            List<string> listKhieuNaiId = new List<string>();
            List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

            foreach (var kv in listKhieuNaiInfo.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Data, SoTienKhauTru_Khac
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);
                        KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();

                        if (!listKhieuNaiId.Contains(fv.Key))
                        {

                            int loaiKhieuNaiIdTemp = ConvertUtility.ToInt32(fv.Key);
                            reportInfo.LoaiKhieuNaiId = loaiKhieuNaiIdTemp;
                            reportInfo.LinhVucChungId = loaiKhieuNaiIdTemp;
                            reportInfo.LinhVucConId = loaiKhieuNaiIdTemp;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);

                            switch (kv.Key)
                            {
                                case "SoTienKhauTru_TKC":
                                    reportInfo.SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM":
                                    reportInfo.SoTienKhauTru_KM = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM1":
                                    reportInfo.SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM2":
                                    reportInfo.SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_Data":
                                    reportInfo.SoTienKhauTru_Data = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_Khac":
                                    reportInfo.SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
                                    break;
                            }

                            listKhieuNaiId.Add(fv.Key);
                            listKhieuNai.Add(reportInfo);
                        } // end if (!listKhieuNaiId.Contains(fv.Key))
                        else
                        {
                            for (int i = 0; i < listKhieuNai.Count; i++)
                            {
                                if (listKhieuNai[i].LoaiKhieuNaiId.ToString() == fv.Key)
                                {
                                    switch (kv.Key)
                                    {
                                        case "SoTienKhauTru_TKC":
                                            listKhieuNai[i].SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM":
                                            listKhieuNai[i].SoTienKhauTru_KM = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM1":
                                            listKhieuNai[i].SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM2":
                                            listKhieuNai[i].SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_Data":
                                            listKhieuNai[i].SoTienKhauTru_Data = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_Khac":
                                            listKhieuNai[i].SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
                                            break;
                                    }
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)    

            //for (int i = 0; i < dtPPS.Rows.Count; i++)
            //{
            //    if (dtPPS.Rows[i]["CapChiTiet"].ToString() == "" && dtPPS.Rows[i]["BuCuoc"].ToString() == "")
            //    {
            //        dtPPS.Rows.RemoveAt(i);
            //        i--;
            //    }
            //}

            if (listKhieuNai != null && listKhieuNai.Count > 0)
            {
                foreach (DataRow row in dtPPS.Rows)
                {
                    for (int i = 0; i < listKhieuNai.Count; i++)
                    {
                        if (row["LinhVucConId"].ToString() == listKhieuNai[i].LinhVucConId.ToString())
                        {
                            row["SoTien"] = listKhieuNai[i].SoTienKhauTru_TKC + listKhieuNai[i].SoTienKhauTru_KM + listKhieuNai[i].SoTienKhauTru_KM1
                                        + listKhieuNai[i].SoTienKhauTru_KM2 + listKhieuNai[i].SoTienKhauTru_Khac; // listKhieuNai[i].SoTienKhauTru_Data +
                            break;
                        }
                    }
                }
            }

            #endregion

            #region Báo cáo hỗ trợ VNPT TT Code cu

            //// Báo cáo dữ liệu hỗ trợ VNPT TT
            //string LOAI_KHIEU_NAI_CUOC_TB_TRA_SAU = "35";
            //DataTable dtVNPTTT = new DataTable();
            //dtVNPTTT.Columns.Add("DoiTacId");
            //dtVNPTTT.Columns.Add("DoiTac");
            //dtVNPTTT.Columns.Add("CapSoLieuGoc");
            //dtVNPTTT.Columns.Add("PhanTichSoLieuIR");
            //dtVNPTTT.Columns.Add("GiaiThichSoLieuKhac");

            //string kvVNPTTT = string.Empty;
            //switch (phongBanXuLyId)
            //{ 
            //    case 53: // VNP1_GQKN
            //        kvVNPTTT = "10034";
            //        break;
            //    case 62: // VNP2_GQKN
            //        kvVNPTTT = "10076";
            //        break;
            //    case 67: // VNP3_GQKN
            //        kvVNPTTT = "10062";
            //        break;
            //}

            //List<DoiTacInfo> listDoiTac = new DoiTacImpl().GetListDynamic("*", "DonViTrucThuoc=" + kvVNPTTT, "TenDoiTac ASC");
            //string sDoiTacXuLyId = string.Empty;
            //for (int i = 0; i < listDoiTac.Count; i++)
            //{
            //    DataRow row = dtVNPTTT.NewRow();
            //    row["DoiTacId"] = listDoiTac[i].Id;
            //    row["DoiTac"] = listDoiTac[i].TenDoiTac;
            //    dtVNPTTT.Rows.Add(row);

            //    sDoiTacXuLyId = string.Format("{0}{1} ", sDoiTacXuLyId, listDoiTac[i].Id);
            //}

            //if(sDoiTacXuLyId.Length > 0)
            //{
            //    sDoiTacXuLyId = sDoiTacXuLyId.TrimEnd();
            //}

            //QueryOptions queryOptionVNPTTT = new QueryOptions();

            ////Lấy ra những trường nào
            //var extraParamVNPTTT = new Dictionary<string, string>();
            //extraParamVNPTTT.Add("fl", @"DoiTacXuLyId");

            //queryOptionVNPTTT.ExtraParams = extraParamVNPTTT;

            //queryOptionVNPTTT.Start = 0;
            //queryOptionVNPTTT.Rows = 64;

            //FacetParameters fpVNPTTT = new FacetParameters();
            //facetField = new SolrFacetFieldQuery("DoiTacXuLyId");
            //fpVNPTTT.Queries.Add(facetField);
            //queryOptionVNPTTT.Facet = fpVNPTTT;

            ////Where điều kiện
            //string whereClauseCapSoLieuGoc = string.Format("KQXuLy_CSL : true AND NgayDongKNSort : [{0} TO {1}] AND DoiTacXuLyId : ({2}) AND LoaiKhieuNaiId : {3}", fromDate, toDate, sDoiTacXuLyId, LOAI_KHIEU_NAI_CUOC_TB_TRA_SAU);
            //string whereClauseIR = string.Format("KQXuLy_PTSL_IR : true AND NgayDongKNSort : [{0} TO {1}] AND DoiTacXuLyId : ({2}) AND LoaiKhieuNaiId : {3}", fromDate, toDate, sDoiTacXuLyId, LOAI_KHIEU_NAI_CUOC_TB_TRA_SAU);
            //string whereClauseGiaiThichSoLieuKhac = string.Format("-KQXuLy_PTSL_Khac : \"\" AND NgayDongKNSort : [{0} TO {1}] AND DoiTacXuLyId : ({2}) AND LoaiKhieuNaiId : {3}", fromDate, toDate, sDoiTacXuLyId, LOAI_KHIEU_NAI_CUOC_TB_TRA_SAU);

            //solrQuery = new SolrQuery(whereClauseCapSoLieuGoc);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionVNPTTT);
            //GetCountOfFacet(dtVNPTTT, "DoiTacId", "CapSoLieuGoc", listKhieuNaiInfo);

            //solrQuery = new SolrQuery(whereClauseIR);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionVNPTTT);
            //GetCountOfFacet(dtVNPTTT, "DoiTacId", "PhanTichSoLieuIR", listKhieuNaiInfo);

            //solrQuery = new SolrQuery(whereClauseGiaiThichSoLieuKhac);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionVNPTTT);
            //GetCountOfFacet(dtVNPTTT, "DoiTacId", "GiaiThichSoLieuKhac", listKhieuNaiInfo);

            #endregion

            #region Báo cáo hỗ trợ VNPT TT Code mới

            // Báo cáo dữ liệu hỗ trợ VNPT TT
            string LOAI_KHIEU_NAI_CUOC_TB_TRA_SAU = "35";
            DataTable dtVNPTTT = new DataTable();
            dtVNPTTT.Columns.Add("MaTinhId");
            dtVNPTTT.Columns.Add("MaTinh");
            dtVNPTTT.Columns.Add("CapSoLieuGoc");
            dtVNPTTT.Columns.Add("PhanTichSoLieuIR");
            dtVNPTTT.Columns.Add("GiaiThichSoLieuKhac");

            string kvVNPTTT = string.Empty;
            switch (phongBanXuLyId)
            {
                case 53: // VNP1_GQKN
                    kvVNPTTT = DoiTacInfo.DoiTacIdValue.VNP1.ToString();
                    break;
                case 62: // VNP2_GQKN
                    kvVNPTTT = DoiTacInfo.DoiTacIdValue.VNP1.ToString();
                    break;
                case 67: // VNP3_GQKN
                    kvVNPTTT = DoiTacInfo.DoiTacIdValue.VNP1.ToString();
                    break;
            }

            string sql = @"SELECT Province.* FROM Province
                            INNER JOIN DoiTac ON Province.Id = DoiTac.ProvinceId
                            WHERE DoiTac.DonViTrucThuoc = " + kvVNPTTT + " ORDER BY Name ASC";

            SqlCommand cmd = new SqlCommand();
            cmd.CommandText = sql;
            cmd.CommandType = CommandType.Text;
            //SqlParameter [] sqlParam = new SqlParameter  [] {
            //    new SqlParameter("@KVVNPTTT", kvVNPTTT)
            //};


            DataSet ds = new ProvinceImpl().ExecuteQueryToDataSet(cmd);
            if (ds != null && ds.Tables.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    DataRow row = dtVNPTTT.NewRow();
                    row["MaTinhId"] = ds.Tables[0].Rows[i]["Id"];
                    row["MaTinh"] = ds.Tables[0].Rows[i]["Name"];

                    dtVNPTTT.Rows.Add(row);
                }

                QueryOptions queryOptionVNPTTT = new QueryOptions();

                //Lấy ra những trường nào
                var extraParamVNPTTT = new Dictionary<string, string>();
                extraParamVNPTTT.Add("fl", @"MaTinh");

                queryOptionVNPTTT.ExtraParams = extraParamVNPTTT;

                queryOptionVNPTTT.Start = 0;
                queryOptionVNPTTT.Rows = 64;

                FacetParameters fpVNPTTT = new FacetParameters();
                facetField = new SolrFacetFieldQuery("MaTinhId");
                fpVNPTTT.Queries.Add(facetField);
                queryOptionVNPTTT.Facet = fpVNPTTT;

                //Where điều kiện
                string whereClauseCapSoLieuGoc = string.Format("IsCSL : true AND NgayDongKNSort : [{0} TO {1}] AND PhongBanXuLyId : ({2}) AND LoaiKhieuNaiId : {3}", iFromDate, iToDate, phongBanXuLyId, LOAI_KHIEU_NAI_CUOC_TB_TRA_SAU);
                string whereClauseIR = string.Format("PTSoLieu_IR : true AND NgayDongKNSort : [{0} TO {1}] AND PhongBanXuLyId : ({2}) AND LoaiKhieuNaiId : {3}", iFromDate, iToDate, phongBanXuLyId, LOAI_KHIEU_NAI_CUOC_TB_TRA_SAU);
                string whereClauseGiaiThichSoLieuKhac = string.Format("-PTSoLieu_Khac : \"\" AND NgayDongKNSort : [{0} TO {1}] AND PhongBanXuLyId : ({2}) AND LoaiKhieuNaiId : {3}", iFromDate, iToDate, phongBanXuLyId, LOAI_KHIEU_NAI_CUOC_TB_TRA_SAU);

                solrQuery = new SolrQuery(whereClauseCapSoLieuGoc);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOptionVNPTTT);
                GetCountOfFacet(dtVNPTTT, "MaTinhId", "CapSoLieuGoc", listKhieuNaiInfo);

                solrQuery = new SolrQuery(whereClauseIR);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOptionVNPTTT);
                GetCountOfFacet(dtVNPTTT, "MaTinhId", "PhanTichSoLieuIR", listKhieuNaiInfo);

                solrQuery = new SolrQuery(whereClauseGiaiThichSoLieuKhac);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOptionVNPTTT);
                GetCountOfFacet(dtVNPTTT, "MaTinhId", "GiaiThichSoLieuKhac", listKhieuNaiInfo);
            } // end if(listProvince != null && listProvince.Count > 0)

            #endregion


            dsResult.Tables.Add(dtPPS);
            dsResult.Tables.Add(dtVNPTTT);

            return dsResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 24/11/2013
        /// Todo : Lấy báo cáo khối lượng xử lý công việc của tổ xử lý nghiệp vụ
        /// </summary>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="listLoaiKhieuNaiId">tạm thời chưa xử lý</param>
        /// <param name="listLinhVucChungId">tạm thời chưa xử lý</param>
        /// <param name="listLinhVucConId">tạm thời chưa xử lý</param>
        /// <returns></returns>
        public DataTable BaoCaoKhoiLuongCongViecToXLNV(int phongBanXuLyId, DateTime fromDate, DateTime toDate, List<string> listLoaiKhieuNaiId, List<string> listLinhVucChungId, List<string> listLinhVucConId)
        {
            DataTable dtReport = new DataTable();
            dtReport.Columns.Add("TenTruyCap");
            dtReport.Columns.Add("TenNguoiSuDung");
            dtReport.Columns.Add("SLPAKNDaGiaiQuyet");

            List<NguoiSuDungInfo> listNguoiSuDungInfo = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanXuLyId);
            if (listNguoiSuDungInfo != null && listNguoiSuDungInfo.Count > 0)
            {
                string listTenTruyCap = string.Empty;
                for (int i = 0; i < listNguoiSuDungInfo.Count; i++)
                {
                    DataRow row = dtReport.NewRow();
                    row["TenTruyCap"] = listNguoiSuDungInfo[i].TenTruyCap;
                    row["TenNguoiSuDung"] = listNguoiSuDungInfo[i].TenDayDu;
                    row["SLPAKNDaGiaiQuyet"] = 0;
                    dtReport.Rows.Add(row);

                    listTenTruyCap = string.Format("{0}{1} ", listTenTruyCap, listNguoiSuDungInfo[i].TenTruyCap);
                }

                listTenTruyCap = listTenTruyCap.Trim();

                string whereClause = string.Format("PhongBanXuLyId:{0} AND NguoiXuLy:({1}) AND NgayDongKNSort:[{2} TO {3}]", phongBanXuLyId, listTenTruyCap, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));

                SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
                SolrQuery solrQuery = new SolrQuery(whereClause);
                QueryOptions queryOption = new QueryOptions();
                //Lấy ra những trường nào
                var extraParam = new Dictionary<string, string>();
                extraParam.Add("fl", @"");
                queryOption.ExtraParams = extraParam;
                queryOption.Start = 0;
                queryOption.Rows = 0;

                FacetParameters fp = new FacetParameters();
                SolrFacetFieldQuery ffqNguoiSuDung = new SolrFacetFieldQuery("NguoiXuLy");
                fp.Queries.Add(ffqNguoiSuDung);
                queryOption.Facet = fp;

                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOption);
                if (listKhieuNaiInfo != null)
                {
                    GetCountOfFacet(dtReport, "TenTruyCap", "SLPAKNDaGiaiQuyet", listKhieuNaiInfo);
                }
            }

            return dtReport;
        }

        #endregion

        #region Dùng chung cho các đơn vị

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 08/09/2014
        /// Todo :  Báo cáo tổng hợp của cả đối tác        
        ///     - Số lượng tồn trước kỳ
        ///     - Số lượng tiếp nhận
        ///     - Số lượng xử lý
        ///     - Số lượng xử lý quá hạn
        ///     - Số lượng tồn
        ///     - Số lượng tồn quá hạn
        ///     - Số lượng tạo mới
        ///     - Số lượng đã đóng
        /// </summary>
        /// <param name="trungTamId"></param>        
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoDoiTac_V2_Solr(int doiTacId, DateTime fromDate, DateTime toDate)
        {
            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            DoiTacInfo doiTacInfo = new DoiTacImpl().GetInfo(doiTacId);

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtDoiTac = new DataTable();
            dtDoiTac.Columns.Add("DoiTacId");
            dtDoiTac.Columns.Add("TenDoiTac");
            dtDoiTac.Columns.Add("SLTonDongKyTruoc");
            dtDoiTac.Columns.Add("SLTiepNhan");
            dtDoiTac.Columns.Add("SLDaXuLy");
            dtDoiTac.Columns.Add("SLQuaHanDaXuLy");
            dtDoiTac.Columns.Add("SLTonDong");
            dtDoiTac.Columns.Add("SLQuaHanTonDong");
            dtDoiTac.Columns.Add("SLTaoMoi");
            dtDoiTac.Columns.Add("SLDaDong");
            dtDoiTac.Columns.Add("SLChuyenXuLy");
            dtDoiTac.Columns.Add("SLChuyenPhanHoi");
            dtDoiTac.Columns.Add("SLChuyenNgangHang");

            DataRow row = dtDoiTac.NewRow();
            row["DoiTacId"] = doiTacId;
            row["TenDoiTac"] = doiTacInfo != null ? doiTacInfo.TenDoiTac : string.Empty;
            row["SLTonDongKyTruoc"] = 0;
            row["SLTiepNhan"] = 0;
            row["SLDaXuLy"] = 0;
            row["SLQuaHanDaXuLy"] = 0;
            row["SLTonDong"] = 0;
            row["SLQuaHanTonDong"] = 0;
            row["SLTaoMoi"] = 0;
            row["SLDaDong"] = 0;
            row["SLChuyenXuLy"] = 0;
            row["SLChuyenPhanHoi"] = 0;
            row["SLChuyenNgangHang"] = 0;
            dtDoiTac.Rows.Add(row);

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, DoiTacXuLyId");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND (KhieuNai_NgayDongKN : [{1} TO *])", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            List<int> listKhieuNaiIdTonDongKyTruoc = new List<int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return obj.DoiTacXuLyId != doiTacId;
                });
                dtDoiTac.Rows[0]["SLTonDongKyTruoc"] = listKhieuNaiInfo.Count;

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            List<int> listKhieuNaiIdTonDong = new List<int>();

            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, DoiTacXuLyId");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            //string whereClauseTonDong = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(nextToDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN:[{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            if (listKhieuNaiInfo != null)
            {
                //List<KhieuNai_ReportInfo> listKhieuNaiTonDong = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN && obj.DoiTacXuLyId == doiTacId; });
                //listKhieuNaiInfo = null;

                //int numberDelete = listKhieuNaiInfo.RemoveAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Đóng_KN || obj.DoiTacXuLyId != doiTacId; });
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.DoiTacXuLyId != doiTacId; });

                if (listKhieuNaiInfo != null)
                {
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId);
                    }

                    dtDoiTac.Rows[0]["SLTonDong"] = listKhieuNaiInfo.Count;
                    dtDoiTac.Rows[0]["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    {
                        //return (obj.LDate <= toDate && obj.LDate >= obj.NgayQuaHan) || (obj.LDate > toDate && toDate >= obj.NgayQuaHan);
                        return toDate >= obj.NgayQuaHan;
                    }).Count;
                }
            }

            // Số lượng tiếp nhận
            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId");
            queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;


            SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
            List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
            listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

            GroupingParameters gpTiepNhan = new GroupingParameters();
            gpTiepNhan.Fields = listGroupField;
            gpTiepNhan.Limit = 1;
            gpTiepNhan.Main = true;
            gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
            queryOptionTiepNhan.Grouping = gpTiepNhan;

            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId: {2} AND HanhDong:(0 1 2 3)", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), doiTacId);
            solrQuery = new SolrQuery(whereClauseTiepNhan);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                {
                    int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                    { return listKhieuNaiIdTonDongKyTruoc.Contains(obj.KhieuNaiId); });
                }

                dtDoiTac.Rows[0]["SLTiepNhan"] = listKhieuNaiInfo.Count;
            }

            // Số lượng đã xử lý
            // Số lượng quá hạn đã xử lý
            QueryOptions queryOptionXuLy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamXuLy = new Dictionary<string, string>();
            extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, NgayQuaHan_PhongBanXuLyTruoc, LDate, HanhDong");
            queryOptionXuLy.ExtraParams = extraParamXuLy;
            queryOptionXuLy.Start = 0;
            queryOptionXuLy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
            listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

            GroupingParameters gpXuLy = new GroupingParameters();
            gpXuLy.Fields = listGroupField;
            gpXuLy.Limit = 1;
            gpXuLy.Main = true;
            gpXuLy.OrderBy = listSortOrderNgayXuLy;
            queryOptionXuLy.Grouping = gpXuLy;

            //string whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND ((DoiTacXuLyTruocId: {2} AND -DoiTacXuLyId : {2}) OR (DoiTacXuLyId:{2} AND HanhDong:4))", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId);
            string whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND  DoiTacXuLyTruocId: {2} AND -DoiTacXuLyId : {2} AND -HanhDong:4) OR (LDate:[{0} TO {1}] AND  DoiTacXuLyId:{2} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId);
            solrQuery = new SolrQuery(whereClauseXuLy);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return listKhieuNaiIdTonDong.Contains(obj.KhieuNaiId); });
                if (listKhieuNaiInfo != null)
                {
                    dtDoiTac.Rows[0]["SLDaXuLy"] = listKhieuNaiInfo.Count;
                    dtDoiTac.Rows[0]["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;

                    dtDoiTac.Rows[0]["SLChuyenXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban; }).Count;
                    dtDoiTac.Rows[0]["SLChuyenPhanHoi"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; }).Count;
                    dtDoiTac.Rows[0]["SLChuyenNgangHang"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng; }).Count;
                }
            }

            // Số lượng tạo mới                    
            QueryOptions queryOptionTaoMoi = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTaoMoi = new Dictionary<string, string>();
            extraParamTaoMoi.Add("fl", @"Id");
            queryOptionTaoMoi.ExtraParams = extraParamTaoMoi;
            queryOptionTaoMoi.Start = 0;
            queryOptionTaoMoi.Rows = int.MaxValue;

            string whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), doiTacId);
            solrQuery = new SolrQuery(whereClauseTaoMoi);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTaoMoi);

            row["SLTaoMoi"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

            // Số lượng tạo đã đóng                   
            QueryOptions queryOptionDaDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamDaDong = new Dictionary<string, string>();
            extraParamDaDong.Add("fl", @"Id");
            queryOptionDaDong.ExtraParams = extraParamDaDong;
            queryOptionDaDong.Start = 0;
            queryOptionDaDong.Rows = int.MaxValue;

            string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND DoiTacXuLyId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), doiTacId);
            solrQuery = new SolrQuery(whereClauseDaDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionDaDong);

            row["SLDaDong"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

            return dtDoiTac;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 08/09/2014
        /// Todo : Thống kê số lượng khiếu nại theo các phòng ban của đối tác
        ///     - Số lượng tồn trước kỳ
        ///     - Số lượng tiếp nhận
        ///     - Số lượng xử lý
        ///     - Số lượng xử lý quá hạn
        ///     - Số lượng tồn
        ///     - Số lượng tồn quá hạn
        ///     - Số lượng tạo mới
        ///     - Số lượng đã đóng
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="listPhongBanId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoPhongBanDoiTac_V2_Solr(int doiTacId, List<int> listPhongBanId, DateTime fromDate, DateTime toDate)
        {
            if (listPhongBanId == null || listPhongBanId.Count == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            List<PhongBanInfo> listPhongBan = new PhongBanImpl().GetListPhongBanByDoiTacId(doiTacId);

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtPhongBan = new DataTable();
            dtPhongBan.Columns.Add("PhongBanId");
            dtPhongBan.Columns.Add("TenPhongBan");
            dtPhongBan.Columns.Add("SLTonDongKyTruoc");
            dtPhongBan.Columns.Add("SLTiepNhan");
            dtPhongBan.Columns.Add("SLDaXuLy");
            dtPhongBan.Columns.Add("SLQuaHanDaXuLy");
            dtPhongBan.Columns.Add("SLTonDong");
            dtPhongBan.Columns.Add("SLQuaHanTonDong");
            dtPhongBan.Columns.Add("SLTaoMoi");
            dtPhongBan.Columns.Add("SLDaDong");
            dtPhongBan.Columns.Add("SLChuyenXuLy");
            dtPhongBan.Columns.Add("SLChuyenPhanHoi");
            dtPhongBan.Columns.Add("SLChuyenNgangHang");

            for (int i = 0; i < listPhongBanId.Count; i++)
            {
                DataRow row = dtPhongBan.NewRow();
                row["PhongBanId"] = listPhongBanId[i];
                row["TenPhongBan"] = "Phòng ban " + listPhongBanId[i].ToString();
                row["SLTonDongKyTruoc"] = 0;
                row["SLTiepNhan"] = 0;
                row["SLDaXuLy"] = 0;
                row["SLQuaHanDaXuLy"] = 0;
                row["SLTonDong"] = 0;
                row["SLQuaHanTonDong"] = 0;
                row["SLTaoMoi"] = 0;
                row["SLDaDong"] = 0;
                row["SLChuyenXuLy"] = 0;
                row["SLChuyenPhanHoi"] = 0;
                row["SLChuyenNgangHang"] = 0;

                if (listPhongBan != null)
                {
                    for (int j = 0; j < listPhongBan.Count; j++)
                    {
                        if (listPhongBan[j].Id == listPhongBanId[i])
                        {
                            row["TenPhongBan"] = listPhongBan[j].Name;
                            break;
                        }
                    } // end for(int j=0;j<listPhongBan.Count;j++)
                } // end if(listPhongBan != null)

                dtPhongBan.Rows.Add(row);
            }

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, PhongBanXuLyId");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            //string whereClauseTonDongKyTruoc = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(previousFromDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            Dictionary<int, int> listKhieuNaiIdTonDongKyTruoc = new Dictionary<int, int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return !listPhongBanId.Contains(obj.PhongBanXuLyId);
                });

                foreach (DataRow row in dtPhongBan.Rows)
                {
                    int curPhongBanXuLyId = ConvertUtility.ToInt32(row["PhongBanId"]);
                    row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.PhongBanXuLyId == curPhongBanXuLyId; }).Count;
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].PhongBanXuLyId);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, DoiTacXuLyId, PhongBanXuLyId");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            //string whereClauseTonDong = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(nextToDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            Dictionary<int, int> listKhieuNaiIdTonDong = new Dictionary<int, int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return !listPhongBanId.Contains(obj.PhongBanXuLyId); });

                if (listKhieuNaiInfo != null)
                {
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].PhongBanXuLyId);
                    }

                    foreach (DataRow row in dtPhongBan.Rows)
                    {
                        int curPhongBanXuLyId = ConvertUtility.ToInt32(row["PhongBanId"]);
                        row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.PhongBanXuLyId == curPhongBanXuLyId; }).Count;
                        row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            return toDate >= obj.NgayQuaHan && obj.PhongBanXuLyId == curPhongBanXuLyId;
                        }).Count;

                        //if (curPhongBanXuLyId == 50)
                        //{
                        //    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                        //    {
                        //        if (listKhieuNaiInfo[i].PhongBanXuLyId == curPhongBanXuLyId)
                        //        {
                        //            if (toDate >= listKhieuNaiInfo[i].NgayQuaHan)
                        //            {

                        //            }
                        //        }
                        //    }
                        //}
                    }
                }
            }

            foreach (DataRow row in dtPhongBan.Rows)
            {
                int curPhongBanXuLyId = ConvertUtility.ToInt32(row["PhongBanId"]);

                // Số lượng tiếp nhận
                QueryOptions queryOptionTiepNhan = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId");
                queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
                queryOptionTiepNhan.Start = 0;
                queryOptionTiepNhan.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
                List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
                listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

                GroupingParameters gpTiepNhan = new GroupingParameters();
                gpTiepNhan.Fields = listGroupField;
                gpTiepNhan.Limit = 1;
                gpTiepNhan.Main = true;
                gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
                queryOptionTiepNhan.Grouping = gpTiepNhan;

                string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId: {2} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), curPhongBanXuLyId);
                solrQuery = new SolrQuery(whereClauseTiepNhan);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curPhongBanXuLyId)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLTiepNhan"] = listKhieuNaiInfo.Count;
                    }
                }

                // Số lượng đã xử lý
                // Số lượng quá hạn đã xử lý
                QueryOptions queryOptionXuLy = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamXuLy = new Dictionary<string, string>();
                extraParamXuLy.Add("fl", @"Id, KhieuNaiId, NgayTiepNhan, NgayQuaHan_PhongBanXuLyTruoc, HanhDong");
                queryOptionXuLy.ExtraParams = extraParamXuLy;
                queryOptionXuLy.Start = 0;
                queryOptionXuLy.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                //SolrNet.SortOrder sortOrderActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
                listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);
                //listSortOrderNgayXuLy.Add(sortOrderActivityId);

                GroupingParameters gpXuLy = new GroupingParameters();
                gpXuLy.Fields = listGroupField;
                gpXuLy.Limit = 1;
                gpXuLy.Main = true;
                gpXuLy.OrderBy = listSortOrderNgayXuLy;
                queryOptionXuLy.Grouping = gpXuLy;

                string whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND  PhongBanXuLyTruocId: {2} AND -PhongBanXuLyId : {2} AND -HanhDong:4) OR (LDate:[{0} TO {1}] AND  PhongBanXuLyId:{2} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), curPhongBanXuLyId);
                solrQuery = new SolrQuery(whereClauseXuLy);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curPhongBanXuLyId)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        //for (int i = 0; i< listKhieuNaiInfo.Count;i++ )
                        //{
                        //    if(listKhieuNaiInfo[i].KhieuNaiId == 328027)
                        //    {

                        //    }
                        //}

                        row["SLDaXuLy"] = listKhieuNaiInfo.Count;
                        row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;

                        row["SLChuyenXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban; }).Count;
                        row["SLChuyenPhanHoi"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; }).Count;
                        row["SLChuyenNgangHang"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng; }).Count;
                    }
                }

                // Số lượng tạo mới                    
                QueryOptions queryOptionTaoMoi = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamTaoMoi = new Dictionary<string, string>();
                extraParamTaoMoi.Add("fl", @"Id");
                queryOptionTaoMoi.ExtraParams = extraParamTaoMoi;
                queryOptionTaoMoi.Start = 0;
                queryOptionTaoMoi.Rows = int.MaxValue;

                string whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanTiepNhanId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), curPhongBanXuLyId);
                solrQuery = new SolrQuery(whereClauseTaoMoi);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTaoMoi);

                row["SLTaoMoi"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

                // Số lượng tạo đã đóng                   
                QueryOptions queryOptionDaDong = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamDaDong = new Dictionary<string, string>();
                extraParamDaDong.Add("fl", @"Id");
                queryOptionDaDong.ExtraParams = extraParamDaDong;
                queryOptionDaDong.Start = 0;
                queryOptionDaDong.Rows = int.MaxValue;

                string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND PhongBanXuLyId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), curPhongBanXuLyId);
                solrQuery = new SolrQuery(whereClauseDaDong);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionDaDong);

                row["SLDaDong"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;
            }

            return dtPhongBan;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 08/09/2014
        /// Todo : Thống kê số lượng khiếu nại theo người dùng
        ///     - Số lượng tồn trước kỳ
        ///     - Số lượng tiếp nhận
        ///     - Số lượng khiếu nại người dùng tạo
        ///     - Số lượng xử lý
        ///     - Số lượng khiếu nại người dùng đóng
        ///     - Số lượng xử lý quá hạn
        ///     - Số lượng tồn
        ///     - Số lượng tồn quá hạn
        /// </summary>
        /// <param name="phongBanId"></param>
        /// <param name="listTenTruyCap"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoNguoiDungCuaPhongBan_V2_Solr(int doiTacId, int phongBanId, DateTime fromDate, DateTime toDate)
        {
            int NO_VALUE = -1;
            List<NguoiSuDungInfo> listNguoiSuDung = null;
            if (phongBanId != NO_VALUE)
            {
                listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanId);
            }
            else
            {
                string innerJoin = @" INNER JOIN PhongBan_User ON a.Id = PhongBan_User.NguoiSuDungId
                                        INNER JOIN PhongBan ON PhongBan_User.PhongBanId = PhongBan.Id";
                string whereClause = string.Format(" PhongBan.DoiTacId={0}", doiTacId);

                listNguoiSuDung = new NguoiSuDungImpl().GetListDynamicJoin("a.*", innerJoin, whereClause, "TenTruyCap ASC");
            }

            if (listNguoiSuDung == null || listNguoiSuDung.Count == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtNguoiDung = new DataTable();
            dtNguoiDung.Columns.Add("TenTruyCap");
            dtNguoiDung.Columns.Add("TenDayDu");
            dtNguoiDung.Columns.Add("SLTonDongKyTruoc");
            dtNguoiDung.Columns.Add("SLTiepNhan");
            dtNguoiDung.Columns.Add("SLDaXuLy");
            dtNguoiDung.Columns.Add("SLChuyenXuLy");
            dtNguoiDung.Columns.Add("SLChuyenPhanHoi");
            dtNguoiDung.Columns.Add("SLChuyenNgangHang");
            dtNguoiDung.Columns.Add("SLQuaHanDaXuLy");
            dtNguoiDung.Columns.Add("SLTonDong");
            dtNguoiDung.Columns.Add("SLQuaHanTonDong");
            dtNguoiDung.Columns.Add("SLTaoMoi");
            dtNguoiDung.Columns.Add("SLDaDong");

            DataRow rowNguoiDung = dtNguoiDung.NewRow();
            rowNguoiDung["TenTruyCap"] = "";
            rowNguoiDung["TenDayDu"] = "Chưa có người xử lý";
            rowNguoiDung["SLTonDongKyTruoc"] = 0;
            rowNguoiDung["SLTiepNhan"] = 0;
            rowNguoiDung["SLDaXuLy"] = 0;
            rowNguoiDung["SLChuyenXuLy"] = 0;
            rowNguoiDung["SLChuyenPhanHoi"] = 0;
            rowNguoiDung["SLChuyenNgangHang"] = 0;
            rowNguoiDung["SLQuaHanDaXuLy"] = 0;
            rowNguoiDung["SLTonDong"] = 0;
            rowNguoiDung["SLQuaHanTonDong"] = 0;
            rowNguoiDung["SLTaoMoi"] = 0;
            rowNguoiDung["SLDaDong"] = 0;

            dtNguoiDung.Rows.Add(rowNguoiDung);

            for (int i = 0; i < listNguoiSuDung.Count; i++)
            {
                DataRow row = dtNguoiDung.NewRow();
                row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
                row["TenDayDu"] = listNguoiSuDung[i].TenDayDu;
                row["SLTonDongKyTruoc"] = 0;
                row["SLTiepNhan"] = 0;
                row["SLDaXuLy"] = 0;
                row["SLChuyenXuLy"] = 0;
                row["SLChuyenPhanHoi"] = 0;
                row["SLChuyenNgangHang"] = 0;
                row["SLQuaHanDaXuLy"] = 0;
                row["SLTonDong"] = 0;
                row["SLQuaHanTonDong"] = 0;
                row["SLTaoMoi"] = 0;
                row["SLDaDong"] = 0;
                dtNguoiDung.Rows.Add(row);
            }

            DataRow rowNguoiDung_0 = dtNguoiDung.Rows[0];

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, NguoiXuLy, PhongBanXuLyId, DoiTacXuLyId, NgayTiepNhan_NguoiXuLy, LDate");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            //string whereClauseTonDongKyTruoc = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(previousFromDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDongKyTruoc = string.Format("((NgayTiepNhan:[* TO {0}] AND -HanhDong:1) OR (LDate_ActivityTruoc:[* TO {0}] AND HanhDong:1)) AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            //string whereClauseTonDongKyTruoc = string.Format("((-NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND NgayTiepNhan_NguoiXuLy:[* TO {0}]) OR (NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND  NgayTiepNhan:[* TO {0}])) AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            Dictionary<int, string> listKhieuNaiIdTonDongKyTruoc = new Dictionary<int, string>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return obj.DoiTacXuLyId != doiTacId || (obj.PhongBanXuLyId != phongBanId && phongBanId != NO_VALUE) || (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy < DateTime.MaxValue);
                });

                rowNguoiDung_0["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.NgayTiepNhan_NguoiXuLy > previousFromDate; }).Count;

                foreach (DataRow row in dtNguoiDung.Rows)
                {
                    string tenTruyCap = row["TenTruyCap"].ToString();
                    //row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return (obj.PhongBanXuLyId == phongBanId || phongBanId == NO_VALUE) && obj.NguoiXuLy.ToLower() == tenTruyCap.ToLower() && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                    row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return (obj.PhongBanXuLyId == phongBanId || phongBanId == NO_VALUE) && obj.NguoiXuLy.ToLower() == tenTruyCap.ToLower(); }).Count;
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, PhongBanXuLyId, NguoiXuLy, DoiTacXuLyId, NgayTiepNhan_NguoiXuLy");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            //string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            string whereClauseTonDong = string.Format("((-NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND NgayTiepNhan_NguoiXuLy:[* TO {0}]) OR (NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND  NgayTiepNhan:[* TO {0}])) AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            Dictionary<int, string> listKhieuNaiIdTonDong = new Dictionary<int, string>();

            if (listKhieuNaiInfo != null)
            {
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.DoiTacXuLyId != doiTacId || (obj.PhongBanXuLyId != phongBanId && phongBanId != NO_VALUE) || obj.NgayTiepNhan_NguoiXuLy > toDate; });

                if (listKhieuNaiInfo != null)
                {
                    rowNguoiDung_0["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate; }).Count;
                    rowNguoiDung_0["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate && toDate >= obj.NgayQuaHan; }).Count;

                    foreach (DataRow row in dtNguoiDung.Rows)
                    {
                        string tenTruyCap = row["TenTruyCap"].ToString();
                        //row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                        //row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy < fromDate); }).Count;                        
                        row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                        row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            //return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate);
                            //return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy < fromDate);                            
                            return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy <= toDate);
                        }).Count;
                    }

                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
                    }
                }
            }

            foreach (DataRow row in dtNguoiDung.Rows)
            {
                string tenTruyCap = row["TenTruyCap"].ToString();
                string tenTruyCapSolr = tenTruyCap;
                if (tenTruyCapSolr.Trim().Length == 0)
                {
                    tenTruyCapSolr = "\"\"";
                }

                // Số lượng tiếp nhận
                QueryOptions queryOptionTiepNhan = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId, NguoiXuLy, NgayTiepNhan_NguoiXuLy");
                queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
                queryOptionTiepNhan.Start = 0;
                queryOptionTiepNhan.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
                List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
                listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

                GroupingParameters gpTiepNhan = new GroupingParameters();
                gpTiepNhan.Fields = listGroupField;
                gpTiepNhan.Limit = 1;
                gpTiepNhan.Main = true;
                gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
                queryOptionTiepNhan.Grouping = gpTiepNhan;

                string whereClauseTiepNhan = string.Empty;
                if (phongBanId == NO_VALUE)
                {
                    //whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId : {2} AND (NgayTiepNhan_NguoiXuLy:[{3} TO *])",
                                                ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                                                doiTacId, ConvertUtility.ConvertDateTimeToSolr(nextToDate));
                    }
                    else
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan_NguoiXuLy:[{0} TO {1}] AND DoiTacXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    }
                }
                else
                {
                    //if(tenTruyCap == "ducvm_ptdv")
                    //{

                    //}
                    //whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2} AND (NgayTiepNhan_NguoiXuLy:[{3} TO *])",
                                                ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                                                phongBanId, ConvertUtility.ConvertDateTimeToSolr(nextToDate));
                    }
                    else
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan_NguoiXuLy:[{0} TO {1}] AND PhongBanXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    }
                }

                solrQuery = new SolrQuery(whereClauseTiepNhan);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                    {
                        // BEGINTEST
                        //List<KhieuNai_ReportInfo> listTest = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                        // ENDTEST

                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLTiepNhan"] = listKhieuNaiInfo.Count;
                    }
                }

                // Số lượng đã xử lý
                // Số lượng quá hạn đã xử lý
                QueryOptions queryOptionXuLy = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamXuLy = new Dictionary<string, string>();
                extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan_PhongBanXuLyTruoc, HanhDong");
                queryOptionXuLy.ExtraParams = extraParamXuLy;
                queryOptionXuLy.Start = 0;
                queryOptionXuLy.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
                listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

                GroupingParameters gpXuLy = new GroupingParameters();
                gpXuLy.Fields = listGroupField;
                gpXuLy.Limit = 1;
                gpXuLy.Main = true;
                gpXuLy.OrderBy = listSortOrderNgayXuLy;
                queryOptionXuLy.Grouping = gpXuLy;

                string whereClauseXuLy = string.Empty;
                if (phongBanId == NO_VALUE)
                {
                    //whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3} AND -HanhDong:4) OR (NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLId :{2} AND NguoiXuLy:{3} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        //whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                        whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    }
                    else
                    {
                        //whereClauseXuLy = string.Format("NgayTiepNhan_NguoiXuLyTruoc:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                        whereClauseXuLy = string.Format("LDate_ActivityTruoc:[{0} TO {1}] AND DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                        //whereClauseXuLy = string.Format("DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND ((HanhDong:(2 3) AND NgayTiepNhan:[{0} TO {1}]) OR (HanhDong:1 AND NgayTiepNhan_NguoiXuLy:[{0} TO {1}]))", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    }
                }
                else
                {
                    //whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3} AND -HanhDong:4) OR (LDate:[{0} TO {1}] AND PhongBanXuLyId :{2} AND NguoiXuLy:{3} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        //whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                        whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    }
                    else
                    {
                        //whereClauseXuLy = string.Format("NgayTiepNhan_NguoiXuLyTruoc:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                        whereClauseXuLy = string.Format("LDate_ActivityTruoc:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                        //whereClauseXuLy = string.Format("PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND ((HanhDong:(2 3) AND NgayTiepNhan:[{0} TO {1}]) OR (HanhDong:1 AND NgayTiepNhan_NguoiXuLy:[{0} TO {1}]))", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    }
                }

                solrQuery = new SolrQuery(whereClauseXuLy);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLDaXuLy"] = listKhieuNaiInfo.Count;
                        row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;

                        row["SLChuyenXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban; }).Count;
                        row["SLChuyenPhanHoi"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; }).Count;
                        row["SLChuyenNgangHang"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng; }).Count;
                    }
                }


                // Tính số lượng tạo mới và đã đóng
                if (tenTruyCap.Length > 0)
                {
                    // Số lượng tạo mới                    
                    QueryOptions queryOptionTaoMoi = new QueryOptions();
                    //Lấy ra những trường nào
                    var extraParamTaoMoi = new Dictionary<string, string>();
                    extraParamTaoMoi.Add("fl", @"Id");
                    queryOptionTaoMoi.ExtraParams = extraParamTaoMoi;
                    queryOptionTaoMoi.Start = 0;
                    queryOptionTaoMoi.Rows = int.MaxValue;

                    string whereClauseTaoMoi = string.Empty;
                    if (phongBanId == NO_VALUE)
                    {
                        whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiTiepNhan : {2} AND DoiTacId :  {3}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, doiTacId);
                    }
                    else
                    {
                        whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiTiepNhan : {2} AND PhongBanTiepNhanId : {3}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, phongBanId);
                    }
                    solrQuery = new SolrQuery(whereClauseTaoMoi);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTaoMoi);

                    row["SLTaoMoi"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

                    // Số lượng tạo đã đóng                   
                    QueryOptions queryOptionDaDong = new QueryOptions();
                    //Lấy ra những trường nào
                    var extraParamDaDong = new Dictionary<string, string>();
                    extraParamDaDong.Add("fl", @"Id");
                    queryOptionDaDong.ExtraParams = extraParamDaDong;
                    queryOptionDaDong.Start = 0;
                    queryOptionDaDong.Rows = int.MaxValue;

                    string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap);
                    if (phongBanId == NO_VALUE)
                    {
                        whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2} AND DoiTacXuLyId : {3}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, doiTacId);
                    }
                    else
                    {
                        whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2} AND PhongBanXuLyId : {3}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, phongBanId);
                    }
                    solrQuery = new SolrQuery(whereClauseDaDong);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionDaDong);

                    row["SLDaDong"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;
                }
            }

            return dtNguoiDung;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 18/04/2015
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="phongBanId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="loaiKhieuNai_NhomId"></param>
        /// <param name="loaiKhieuNaiId"></param>
        /// <param name="linhVucChungId"></param>
        /// <param name="linhVucConId"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoNguoiDungCuaPhongBan_V2_Solr(int doiTacId, int phongBanId, DateTime fromDate, DateTime toDate, int loaiKhieuNai_NhomId, int loaiKhieuNaiId, int linhVucChungId, int linhVucConId)
        {
            int NO_VALUE = -1;
            List<NguoiSuDungInfo> listNguoiSuDung = null;
            if (phongBanId != NO_VALUE)
            {
                listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanId);
            }
            else
            {
                string innerJoin = @" INNER JOIN PhongBan_User ON a.Id = PhongBan_User.NguoiSuDungId
                                        INNER JOIN PhongBan ON PhongBan_User.PhongBanId = PhongBan.Id";
                string whereClause = string.Format(" PhongBan.DoiTacId={0}", doiTacId);

                listNguoiSuDung = new NguoiSuDungImpl().GetListDynamicJoin("a.*", innerJoin, whereClause, "TenTruyCap ASC");
            }

            if (listNguoiSuDung == null || listNguoiSuDung.Count == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            string whereClauseLoaiKhieuNai = string.Empty;
            if (loaiKhieuNai_NhomId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LoaiKhieuNai_NhomId:{1}", whereClauseLoaiKhieuNai, loaiKhieuNai_NhomId);
            }
            if (loaiKhieuNaiId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LoaiKhieuNaiId:{1}", whereClauseLoaiKhieuNai, loaiKhieuNaiId);
            }
            if (linhVucChungId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucChungId:{1}", whereClauseLoaiKhieuNai, linhVucChungId);
            }
            if (linhVucConId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucConId:{1}", whereClauseLoaiKhieuNai, linhVucConId);
            }

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtNguoiDung = new DataTable();
            dtNguoiDung.Columns.Add("TenTruyCap");
            dtNguoiDung.Columns.Add("TenDayDu");
            dtNguoiDung.Columns.Add("SLTonDongKyTruoc");
            dtNguoiDung.Columns.Add("SLTiepNhan");
            dtNguoiDung.Columns.Add("SLDaXuLy");
            dtNguoiDung.Columns.Add("SLChuyenXuLy");
            dtNguoiDung.Columns.Add("SLChuyenPhanHoi");
            dtNguoiDung.Columns.Add("SLChuyenNgangHang");
            dtNguoiDung.Columns.Add("SLQuaHanDaXuLy");
            dtNguoiDung.Columns.Add("SLTonDong");
            dtNguoiDung.Columns.Add("SLQuaHanTonDong");
            dtNguoiDung.Columns.Add("SLTaoMoi");
            dtNguoiDung.Columns.Add("SLDaDong");

            DataRow rowNguoiDung = dtNguoiDung.NewRow();
            rowNguoiDung["TenTruyCap"] = "";
            rowNguoiDung["TenDayDu"] = "Chưa có người xử lý";
            rowNguoiDung["SLTonDongKyTruoc"] = 0;
            rowNguoiDung["SLTiepNhan"] = 0;
            rowNguoiDung["SLDaXuLy"] = 0;
            rowNguoiDung["SLChuyenXuLy"] = 0;
            rowNguoiDung["SLChuyenPhanHoi"] = 0;
            rowNguoiDung["SLChuyenNgangHang"] = 0;
            rowNguoiDung["SLQuaHanDaXuLy"] = 0;
            rowNguoiDung["SLTonDong"] = 0;
            rowNguoiDung["SLQuaHanTonDong"] = 0;
            rowNguoiDung["SLTaoMoi"] = 0;
            rowNguoiDung["SLDaDong"] = 0;

            dtNguoiDung.Rows.Add(rowNguoiDung);

            for (int i = 0; i < listNguoiSuDung.Count; i++)
            {
                DataRow row = dtNguoiDung.NewRow();
                row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
                row["TenDayDu"] = listNguoiSuDung[i].TenDayDu;
                row["SLTonDongKyTruoc"] = 0;
                row["SLTiepNhan"] = 0;
                row["SLDaXuLy"] = 0;
                row["SLChuyenXuLy"] = 0;
                row["SLChuyenPhanHoi"] = 0;
                row["SLChuyenNgangHang"] = 0;
                row["SLQuaHanDaXuLy"] = 0;
                row["SLTonDong"] = 0;
                row["SLQuaHanTonDong"] = 0;
                row["SLTaoMoi"] = 0;
                row["SLDaDong"] = 0;
                dtNguoiDung.Rows.Add(row);
            }

            DataRow rowNguoiDung_0 = dtNguoiDung.Rows[0];

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, NguoiXuLy, PhongBanXuLyId, DoiTacXuLyId, NgayTiepNhan_NguoiXuLy, LDate");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            //string whereClauseTonDongKyTruoc = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(previousFromDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDongKyTruoc = string.Format("((NgayTiepNhan:[* TO {0}] AND -HanhDong:1) OR (LDate_ActivityTruoc:[* TO {0}] AND HanhDong:1)) AND KhieuNai_NgayDongKN : [{1} TO *] {2}", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate), whereClauseLoaiKhieuNai);
            //string whereClauseTonDongKyTruoc = string.Format("((-NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND NgayTiepNhan_NguoiXuLy:[* TO {0}]) OR (NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND  NgayTiepNhan:[* TO {0}])) AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            Dictionary<int, string> listKhieuNaiIdTonDongKyTruoc = new Dictionary<int, string>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return obj.DoiTacXuLyId != doiTacId || (obj.PhongBanXuLyId != phongBanId && phongBanId != NO_VALUE) || (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy < DateTime.MaxValue);
                });

                rowNguoiDung_0["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.NgayTiepNhan_NguoiXuLy > previousFromDate; }).Count;

                foreach (DataRow row in dtNguoiDung.Rows)
                {
                    string tenTruyCap = row["TenTruyCap"].ToString();
                    //row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return (obj.PhongBanXuLyId == phongBanId || phongBanId == NO_VALUE) && obj.NguoiXuLy.ToLower() == tenTruyCap.ToLower() && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                    row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return (obj.PhongBanXuLyId == phongBanId || phongBanId == NO_VALUE) && obj.NguoiXuLy.ToLower() == tenTruyCap.ToLower(); }).Count;
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, PhongBanXuLyId, NguoiXuLy, DoiTacXuLyId, NgayTiepNhan_NguoiXuLy");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            //string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            string whereClauseTonDong = string.Format("((-NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND NgayTiepNhan_NguoiXuLy:[* TO {0}]) OR (NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND  NgayTiepNhan:[* TO {0}])) AND KhieuNai_NgayDongKN : [{1} TO *] {2}", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate), whereClauseLoaiKhieuNai);
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            Dictionary<int, string> listKhieuNaiIdTonDong = new Dictionary<int, string>();

            if (listKhieuNaiInfo != null)
            {
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.DoiTacXuLyId != doiTacId || (obj.PhongBanXuLyId != phongBanId && phongBanId != NO_VALUE) || obj.NgayTiepNhan_NguoiXuLy > toDate; });

                if (listKhieuNaiInfo != null)
                {
                    rowNguoiDung_0["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate; }).Count;
                    rowNguoiDung_0["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate && toDate >= obj.NgayQuaHan; }).Count;

                    foreach (DataRow row in dtNguoiDung.Rows)
                    {
                        string tenTruyCap = row["TenTruyCap"].ToString();
                        //row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                        //row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy < fromDate); }).Count;                        
                        row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                        row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            //return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate);
                            //return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy < fromDate);                            
                            return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy <= toDate);
                        }).Count;
                    }

                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
                    }
                }
            }

            foreach (DataRow row in dtNguoiDung.Rows)
            {
                string tenTruyCap = row["TenTruyCap"].ToString();
                string tenTruyCapSolr = tenTruyCap;
                if (tenTruyCapSolr.Trim().Length == 0)
                {
                    tenTruyCapSolr = "\"\"";
                }

                // Số lượng tiếp nhận
                QueryOptions queryOptionTiepNhan = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId, NguoiXuLy, NgayTiepNhan_NguoiXuLy");
                queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
                queryOptionTiepNhan.Start = 0;
                queryOptionTiepNhan.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
                List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
                listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

                GroupingParameters gpTiepNhan = new GroupingParameters();
                gpTiepNhan.Fields = listGroupField;
                gpTiepNhan.Limit = 1;
                gpTiepNhan.Main = true;
                gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
                queryOptionTiepNhan.Grouping = gpTiepNhan;

                string whereClauseTiepNhan = string.Empty;
                if (phongBanId == NO_VALUE)
                {
                    //whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId : {2} AND (NgayTiepNhan_NguoiXuLy:[{3} TO *]) {4}",
                                                ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                                                doiTacId, ConvertUtility.ConvertDateTimeToSolr(nextToDate), whereClauseLoaiKhieuNai);
                    }
                    else
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan_NguoiXuLy:[{0} TO {1}] AND DoiTacXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3) {4}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr, whereClauseLoaiKhieuNai);
                    }
                }
                else
                {
                    //if(tenTruyCap == "ducvm_ptdv")
                    //{

                    //}
                    //whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2} AND (NgayTiepNhan_NguoiXuLy:[{3} TO *]) {4}",
                                                ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                                                phongBanId, ConvertUtility.ConvertDateTimeToSolr(nextToDate), whereClauseLoaiKhieuNai);
                    }
                    else
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan_NguoiXuLy:[{0} TO {1}] AND PhongBanXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3) {4}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr, whereClauseLoaiKhieuNai);
                    }
                }

                solrQuery = new SolrQuery(whereClauseTiepNhan);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                    {
                        // BEGINTEST
                        //List<KhieuNai_ReportInfo> listTest = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                        // ENDTEST

                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLTiepNhan"] = listKhieuNaiInfo.Count;
                    }
                }

                // Số lượng đã xử lý
                // Số lượng quá hạn đã xử lý
                QueryOptions queryOptionXuLy = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamXuLy = new Dictionary<string, string>();
                extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayTiepNhan_NguoiXuLyTruoc, NgayQuaHan_PhongBanXuLyTruoc, HanhDong");
                queryOptionXuLy.ExtraParams = extraParamXuLy;
                queryOptionXuLy.Start = 0;
                queryOptionXuLy.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
                listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

                GroupingParameters gpXuLy = new GroupingParameters();
                gpXuLy.Fields = listGroupField;
                gpXuLy.Limit = 1;
                gpXuLy.Main = true;
                gpXuLy.OrderBy = listSortOrderNgayXuLy;
                queryOptionXuLy.Grouping = gpXuLy;

                string whereClauseXuLy = string.Empty;
                if (phongBanId == NO_VALUE)
                {
                    //whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3} AND -HanhDong:4) OR (NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLId :{2} AND NguoiXuLy:{3} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        //whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                        whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4) {4}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr, whereClauseLoaiKhieuNai);
                    }
                    else
                    {
                        //whereClauseXuLy = string.Format("NgayTiepNhan_NguoiXuLyTruoc:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                        whereClauseXuLy = string.Format("LDate_ActivityTruoc:[{0} TO {1}] AND DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4) {4}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr, whereClauseLoaiKhieuNai);
                        //whereClauseXuLy = string.Format("DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND ((HanhDong:(2 3) AND NgayTiepNhan:[{0} TO {1}]) OR (HanhDong:1 AND NgayTiepNhan_NguoiXuLy:[{0} TO {1}]))", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    }
                }
                else
                {
                    //whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3} AND -HanhDong:4) OR (LDate:[{0} TO {1}] AND PhongBanXuLyId :{2} AND NguoiXuLy:{3} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        //whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                        whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4) {4}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr, whereClauseLoaiKhieuNai);
                    }
                    else
                    {
                        //whereClauseXuLy = string.Format("NgayTiepNhan_NguoiXuLyTruoc:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                        whereClauseXuLy = string.Format("LDate_ActivityTruoc:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4) {4}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr, whereClauseLoaiKhieuNai);
                        //whereClauseXuLy = string.Format("PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND ((HanhDong:(2 3) AND NgayTiepNhan:[{0} TO {1}]) OR (HanhDong:1 AND NgayTiepNhan_NguoiXuLy:[{0} TO {1}]))", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    }
                }

                solrQuery = new SolrQuery(whereClauseXuLy);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLDaXuLy"] = listKhieuNaiInfo.Count;
                        row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NgayTiepNhan_NguoiXuLyTruoc < obj.NgayQuaHan_PhongBanXuLyTruoc && obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;

                        row["SLChuyenXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban; }).Count;
                        row["SLChuyenPhanHoi"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; }).Count;
                        row["SLChuyenNgangHang"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng; }).Count;
                    }
                }


                // Tính số lượng tạo mới và đã đóng
                if (tenTruyCap.Length > 0)
                {
                    // Số lượng tạo mới                    
                    QueryOptions queryOptionTaoMoi = new QueryOptions();
                    //Lấy ra những trường nào
                    var extraParamTaoMoi = new Dictionary<string, string>();
                    extraParamTaoMoi.Add("fl", @"Id");
                    queryOptionTaoMoi.ExtraParams = extraParamTaoMoi;
                    queryOptionTaoMoi.Start = 0;
                    queryOptionTaoMoi.Rows = int.MaxValue;

                    string whereClauseTaoMoi = string.Empty;
                    if (phongBanId == NO_VALUE)
                    {
                        whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiTiepNhan : {2} AND DoiTacId :  {3} {4}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, doiTacId, whereClauseLoaiKhieuNai);
                    }
                    else
                    {
                        whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiTiepNhan : {2} AND PhongBanTiepNhanId : {3} {4}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, phongBanId, whereClauseLoaiKhieuNai);
                    }
                    solrQuery = new SolrQuery(whereClauseTaoMoi);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTaoMoi);

                    row["SLTaoMoi"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

                    // Số lượng tạo đã đóng                   
                    QueryOptions queryOptionDaDong = new QueryOptions();
                    //Lấy ra những trường nào
                    var extraParamDaDong = new Dictionary<string, string>();
                    extraParamDaDong.Add("fl", @"Id");
                    queryOptionDaDong.ExtraParams = extraParamDaDong;
                    queryOptionDaDong.Start = 0;
                    queryOptionDaDong.Rows = int.MaxValue;

                    string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap);
                    if (phongBanId == NO_VALUE)
                    {
                        whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2} AND DoiTacXuLyId : {3} {4}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, doiTacId, whereClauseLoaiKhieuNai);
                    }
                    else
                    {
                        whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2} AND PhongBanXuLyId : {3} {4}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, phongBanId, whereClauseLoaiKhieuNai);
                    }
                    solrQuery = new SolrQuery(whereClauseDaDong);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionDaDong);

                    row["SLDaDong"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;
                }
            }

            return dtNguoiDung;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 16/0/2015
        /// Edited 18/05/2016 truongvv
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="phongBanId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoNguoiDungCuaPhongBan_Solr_V3(int doiTacId, int phongBanId, DateTime fromDate, DateTime toDate)
        {
            int NO_VALUE = -1;
            List<NguoiSuDungInfo> listNguoiSuDung = null;
            // Lấy danh sách người dùng trong phong ban
            if (phongBanId != NO_VALUE)
            {
                listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanId);
            }
            else // Lấy tất cả người dung thuộc Đối tác = DoiTacId => User mà không nằm trong phòng ban nào cả!
            {
                string innerJoin = @" INNER JOIN PhongBan_User ON a.Id = PhongBan_User.NguoiSuDungId
                                        INNER JOIN PhongBan ON PhongBan_User.PhongBanId = PhongBan.Id";
                string whereClause = string.Format(" PhongBan.DoiTacId={0}", doiTacId);

                listNguoiSuDung = new NguoiSuDungImpl().GetListDynamicJoin("a.*", innerJoin, whereClause, "TenTruyCap ASC");
            }

            if (listNguoiSuDung == null || listNguoiSuDung.Count == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtNguoiDung = new DataTable();
            dtNguoiDung.Columns.Add("TenTruyCap");
            dtNguoiDung.Columns.Add("TenDayDu");
            dtNguoiDung.Columns.Add("SLTonDongKyTruoc");
            dtNguoiDung.Columns.Add("SLTiepNhan");
            dtNguoiDung.Columns.Add("SLDaXuLy");
            dtNguoiDung.Columns.Add("SLChuyenXuLy");
            dtNguoiDung.Columns.Add("SLChuyenPhanHoi");
            dtNguoiDung.Columns.Add("SLChuyenNgangHang");
            dtNguoiDung.Columns.Add("SLQuaHanDaXuLy");
            dtNguoiDung.Columns.Add("SLTonDong");
            dtNguoiDung.Columns.Add("SLQuaHanTonDong");
            dtNguoiDung.Columns.Add("SLTaoMoi");
            dtNguoiDung.Columns.Add("SLDaDong");

            DataRow rowNguoiDung = dtNguoiDung.NewRow();
            rowNguoiDung["TenTruyCap"] = "";
            rowNguoiDung["TenDayDu"] = "Chưa có người xử lý";
            rowNguoiDung["SLTonDongKyTruoc"] = 0;
            rowNguoiDung["SLTiepNhan"] = 0;
            rowNguoiDung["SLDaXuLy"] = 0;
            rowNguoiDung["SLChuyenXuLy"] = 0;
            rowNguoiDung["SLChuyenPhanHoi"] = 0;
            rowNguoiDung["SLChuyenNgangHang"] = 0;
            rowNguoiDung["SLQuaHanDaXuLy"] = 0;
            rowNguoiDung["SLTonDong"] = 0;
            rowNguoiDung["SLQuaHanTonDong"] = 0;
            rowNguoiDung["SLTaoMoi"] = 0;
            rowNguoiDung["SLDaDong"] = 0;

            dtNguoiDung.Rows.Add(rowNguoiDung);

            for (int i = 0; i < listNguoiSuDung.Count; i++)
            {
                DataRow row = dtNguoiDung.NewRow();
                row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
                row["TenDayDu"] = listNguoiSuDung[i].TenDayDu;
                row["SLTonDongKyTruoc"] = 0;
                row["SLTiepNhan"] = 0;
                row["SLDaXuLy"] = 0;
                row["SLChuyenXuLy"] = 0;
                row["SLChuyenPhanHoi"] = 0;
                row["SLChuyenNgangHang"] = 0;
                row["SLQuaHanDaXuLy"] = 0;
                row["SLTonDong"] = 0;
                row["SLQuaHanTonDong"] = 0;
                row["SLTaoMoi"] = 0;
                row["SLDaDong"] = 0;
                dtNguoiDung.Rows.Add(row);
            }

            DataRow rowNguoiDung_0 = dtNguoiDung.Rows[0];

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, NguoiXuLy, PhongBanXuLyId, DoiTacXuLyId, NgayTiepNhan_NguoiXuLy, LDate");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            // DateTime previousFromDate = fromDate.AddDays(-1);
            // Luôn phải tính toán số liệu đến hết ngày trong 1 kỳ lấy số liệu, ví dụ nếu từ ngày đến ngày thì đến ngày là đến Hết ngày đó
            // chuẩn bị sang ngày mới (ví dụ 23:59:59) còn nếu bắt đầu thì sẽ là 00:00:00
            DateTime previousFromDate = new DateTime(fromDate.AddDays(-1).Year, fromDate.AddDays(-1).Month, fromDate.AddDays(-1).Day, 23, 59, 59);
            //string whereClauseTonDongKyTruoc = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(previousFromDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
            //string whereClauseTonDongKyTruoc = string.Format("((NgayTiepNhan:[* TO {0}] AND -HanhDong:1) OR (LDate_ActivityTruoc:[* TO {0}] AND HanhDong:1)) AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            //string whereClauseTonDongKyTruoc = string.Format("((-NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND NgayTiepNhan_NguoiXuLy:[* TO {0}]) OR (NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND  NgayTiepNhan:[* TO {0}])) AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            Dictionary<int, string> listKhieuNaiIdTonDongKyTruoc = new Dictionary<int, string>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    //return obj.DoiTacXuLyId != doiTacId || (obj.PhongBanXuLyId != phongBanId && phongBanId != NO_VALUE) || (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy < DateTime.MaxValue);
                    return obj.DoiTacXuLyId != doiTacId || (obj.PhongBanXuLyId != phongBanId && phongBanId != NO_VALUE);
                });

                rowNguoiDung_0["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.NgayTiepNhan_NguoiXuLy > previousFromDate; }).Count;
                int sl = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.NgayTiepNhan_NguoiXuLy > previousFromDate; }).Count;

                foreach (DataRow row in dtNguoiDung.Rows)
                {
                    string tenTruyCap = row["TenTruyCap"].ToString();
                    if (tenTruyCap != "")
                    {
                        //row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return (obj.PhongBanXuLyId == phongBanId || phongBanId == NO_VALUE) && obj.NguoiXuLy.ToLower() == tenTruyCap.ToLower() && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                        //row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj) { return (obj.PhongBanXuLyId == phongBanId || phongBanId == NO_VALUE) && obj.NguoiXuLy.ToLower() == tenTruyCap.ToLower(); }).Count;

                        row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy <= previousFromDate); }).Count;
                    }
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, PhongBanXuLyId, NguoiXuLy, DoiTacXuLyId, NgayTiepNhan_NguoiXuLy");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            //string whereClauseTonDong = string.Format("((-NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND NgayTiepNhan_NguoiXuLy:[* TO {0}]) OR (NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND  NgayTiepNhan:[* TO {0}])) AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            Dictionary<int, string> listKhieuNaiIdTonDong = new Dictionary<int, string>();

            if (listKhieuNaiInfo != null)
            {
                //int numberDelete = listKhieuNaiInfo.RemoveAll(delegate(KhieuNai_ReportInfo obj) { return obj.DoiTacXuLyId != doiTacId || (obj.PhongBanXuLyId != phongBanId && phongBanId != NO_VALUE) || obj.NgayTiepNhan_NguoiXuLy > toDate; });
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.DoiTacXuLyId != doiTacId || (obj.PhongBanXuLyId != phongBanId && phongBanId != NO_VALUE); });

                if (listKhieuNaiInfo != null)
                {
                    rowNguoiDung_0["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate; }).Count;
                    rowNguoiDung_0["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate && toDate >= obj.NgayQuaHan; }).Count;
                    var sl = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate; }).Count;


                    foreach (DataRow row in dtNguoiDung.Rows)
                    {
                        string tenTruyCap = row["TenTruyCap"].ToString();
                        if (tenTruyCap != "")
                        {
                            //row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                            //row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy < fromDate); }).Count;                        
                            row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                            { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                            row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                            {
                                //return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate);
                                //return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy < fromDate);                            
                                return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy <= toDate);
                            }).Count;
                        }
                    }

                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
                    }
                }
            }

            foreach (DataRow row in dtNguoiDung.Rows)
            {
                string tenTruyCap = row["TenTruyCap"].ToString();
                string tenTruyCapSolr = tenTruyCap;
                if (tenTruyCapSolr.Trim().Length == 0)
                {
                    tenTruyCapSolr = "\"\"";
                }

                // Số lượng tiếp nhận
                QueryOptions queryOptionTiepNhan = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId, NguoiXuLy, NgayTiepNhan_NguoiXuLy");
                queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
                queryOptionTiepNhan.Start = 0;
                queryOptionTiepNhan.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
                List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
                listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

                GroupingParameters gpTiepNhan = new GroupingParameters();
                gpTiepNhan.Fields = listGroupField;
                gpTiepNhan.Limit = 1;
                gpTiepNhan.Main = true;
                gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
                queryOptionTiepNhan.Grouping = gpTiepNhan;

                string whereClauseTiepNhan = string.Empty;
                if (phongBanId == NO_VALUE)
                {
                    //whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId : {2} AND (NgayTiepNhan_NguoiXuLy:[{3} TO *])",
                                                ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                                                doiTacId, ConvertUtility.ConvertDateTimeToSolr(nextToDate));
                    }
                    else
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan_NguoiXuLy:[{0} TO {1}] AND DoiTacXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    }
                }
                else
                {
                    //if(tenTruyCap == "ducvm_ptdv")
                    //{

                    //}
                    //whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2} AND (NgayTiepNhan_NguoiXuLy:[{3} TO *])",
                                                ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                                                phongBanId, ConvertUtility.ConvertDateTimeToSolr(nextToDate));
                    }
                    else
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan_NguoiXuLy:[{0} TO {1}] AND PhongBanXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    }
                }

                solrQuery = new SolrQuery(whereClauseTiepNhan);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLTiepNhan"] = listKhieuNaiInfo.Count;
                    }
                }

                // Số lượng đã xử lý
                // Số lượng quá hạn đã xử lý
                QueryOptions queryOptionXuLy = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamXuLy = new Dictionary<string, string>();
                extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayTiepNhan_NguoiXuLyTruoc, NgayQuaHan_PhongBanXuLyTruoc, HanhDong");
                queryOptionXuLy.ExtraParams = extraParamXuLy;
                queryOptionXuLy.Start = 0;
                queryOptionXuLy.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
                listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

                GroupingParameters gpXuLy = new GroupingParameters();
                gpXuLy.Fields = listGroupField;
                gpXuLy.Limit = 1;
                gpXuLy.Main = true;
                gpXuLy.OrderBy = listSortOrderNgayXuLy;
                queryOptionXuLy.Grouping = gpXuLy;

                string whereClauseXuLy = string.Empty;
                if (phongBanId == NO_VALUE)
                {
                    //whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3} AND -HanhDong:4) OR (NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLId :{2} AND NguoiXuLy:{3} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    }
                    else
                    {
                        whereClauseXuLy = string.Format("(LDate_ActivityTruoc:[{0} TO {1}] AND DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4)) OR (LDate:[{0} TO {1}] AND  NguoiXuLy:{3} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    }
                }
                else
                {
                    if (tenTruyCap.Length == 0)
                    {
                        whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    }
                    else
                    {
                        whereClauseXuLy = string.Format("(LDate_ActivityTruoc:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4)) OR (LDate:[{0} TO {1}] AND  NguoiXuLy:{3} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    }
                }

                solrQuery = new SolrQuery(whereClauseXuLy);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLDaXuLy"] = listKhieuNaiInfo.Count;
                        row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;
                        //row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.NgayTiepNhan_NguoiXuLyTruoc < obj.NgayQuaHan_PhongBanXuLyTruoc && obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;

                        row["SLChuyenXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban; }).Count;
                        row["SLChuyenPhanHoi"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; }).Count;
                        row["SLChuyenNgangHang"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng; }).Count;
                    }
                }


                // Tính số lượng tạo mới và đã đóng
                if (tenTruyCap.Length > 0)
                {
                    // Số lượng tạo mới                    
                    QueryOptions queryOptionTaoMoi = new QueryOptions();
                    //Lấy ra những trường nào
                    var extraParamTaoMoi = new Dictionary<string, string>();
                    extraParamTaoMoi.Add("fl", @"Id");
                    queryOptionTaoMoi.ExtraParams = extraParamTaoMoi;
                    queryOptionTaoMoi.Start = 0;
                    queryOptionTaoMoi.Rows = int.MaxValue;

                    string whereClauseTaoMoi = string.Empty;
                    if (phongBanId == NO_VALUE)
                    {
                        whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiTiepNhan : {2} AND DoiTacId :  {3}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, doiTacId);
                    }
                    else
                    {
                        whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiTiepNhan : {2} AND PhongBanTiepNhanId : {3}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, phongBanId);
                    }
                    solrQuery = new SolrQuery(whereClauseTaoMoi);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTaoMoi);

                    row["SLTaoMoi"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

                    // Số lượng tạo đã đóng                   
                    QueryOptions queryOptionDaDong = new QueryOptions();
                    //Lấy ra những trường nào
                    var extraParamDaDong = new Dictionary<string, string>();
                    extraParamDaDong.Add("fl", @"Id");
                    queryOptionDaDong.ExtraParams = extraParamDaDong;
                    queryOptionDaDong.Start = 0;
                    queryOptionDaDong.Rows = int.MaxValue;

                    string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap);
                    if (phongBanId == NO_VALUE)
                    {
                        whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2} AND DoiTacXuLyId : {3}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, doiTacId);
                    }
                    else
                    {
                        whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2} AND PhongBanXuLyId : {3}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, phongBanId);
                    }
                    solrQuery = new SolrQuery(whereClauseDaDong);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionDaDong);

                    row["SLDaDong"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;
                }
            }

            return dtNguoiDung;
        }

        // Edited by	: Dao Van Duong
        // Datetime		: 9.8.2016 10:26
        // Note			: Nâng cấp thêm tham số tỉnh, huyện
        public DataTable BaoCaoTongHopPAKNTheoNguoiDungCuaPhongBan_Solr_V4(int doiTacId, int phongBanId, DateTime fromDate, DateTime toDate, int tinhId, int huyenId)
        {
            int NO_VALUE = -1;
            List<NguoiSuDungInfo> listNguoiSuDung = null;
            if (phongBanId != NO_VALUE) // Có phòng ban => Lấy tất cả người dùng thuộc phòng ban đó
            {
                listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanId);
            }
            else
            {
                string innerJoin = @" INNER JOIN PhongBan_User ON a.Id = PhongBan_User.NguoiSuDungId
                                        INNER JOIN PhongBan ON PhongBan_User.PhongBanId = PhongBan.Id";
                string whereClause = string.Format(" PhongBan.DoiTacId = {0}", doiTacId);

                listNguoiSuDung = new NguoiSuDungImpl().GetListDynamicJoin("a.*", innerJoin, whereClause, "TenTruyCap ASC");
            }

            if (listNguoiSuDung == null || listNguoiSuDung.Count == 0)
                return null;

            string dsSolrDanhSachNguoiDung = string.Format(" AND NguoiXuLy: ({0})", string.Join(" ", listNguoiSuDung.Select(v => v.TenTruyCap)));

            string dkTinh = tinhId > 0 ? string.Format(" AND MaTinhId : {0}", tinhId) : string.Empty;
            string dkHuyen = huyenId > 0 ? string.Format(" AND MaQuanId : {0}", huyenId) : string.Empty;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtNguoiDung = new DataTable();
            dtNguoiDung.Columns.Add("TenTruyCap");
            dtNguoiDung.Columns.Add("TenDayDu");
            dtNguoiDung.Columns.Add("SLTonDongKyTruoc");
            dtNguoiDung.Columns.Add("SLTiepNhan");
            dtNguoiDung.Columns.Add("SLDaXuLy");
            dtNguoiDung.Columns.Add("SLChuyenXuLy");
            dtNguoiDung.Columns.Add("SLChuyenPhanHoi");
            dtNguoiDung.Columns.Add("SLChuyenNgangHang");
            dtNguoiDung.Columns.Add("SLQuaHanDaXuLy");
            dtNguoiDung.Columns.Add("SLTonDong");
            dtNguoiDung.Columns.Add("SLQuaHanTonDong");
            dtNguoiDung.Columns.Add("SLTaoMoi");
            dtNguoiDung.Columns.Add("SLDaDong");

            DataRow rowNguoiDung = dtNguoiDung.NewRow();
            rowNguoiDung["TenTruyCap"] = "";
            rowNguoiDung["TenDayDu"] = "Chưa có người xử lý";
            rowNguoiDung["SLTonDongKyTruoc"] = 0;
            rowNguoiDung["SLTiepNhan"] = 0;
            rowNguoiDung["SLDaXuLy"] = 0;
            rowNguoiDung["SLChuyenXuLy"] = 0;
            rowNguoiDung["SLChuyenPhanHoi"] = 0;
            rowNguoiDung["SLChuyenNgangHang"] = 0;
            rowNguoiDung["SLQuaHanDaXuLy"] = 0;
            rowNguoiDung["SLTonDong"] = 0;
            rowNguoiDung["SLQuaHanTonDong"] = 0;
            rowNguoiDung["SLTaoMoi"] = 0;
            rowNguoiDung["SLDaDong"] = 0;

            dtNguoiDung.Rows.Add(rowNguoiDung);

            for (int i = 0; i < listNguoiSuDung.Count; i++)
            {
                DataRow row = dtNguoiDung.NewRow();
                row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
                row["TenDayDu"] = listNguoiSuDung[i].TenDayDu;
                row["SLTonDongKyTruoc"] = 0;
                row["SLTiepNhan"] = 0;
                row["SLDaXuLy"] = 0;
                row["SLChuyenXuLy"] = 0;
                row["SLChuyenPhanHoi"] = 0;
                row["SLChuyenNgangHang"] = 0;
                row["SLQuaHanDaXuLy"] = 0;
                row["SLTonDong"] = 0;
                row["SLQuaHanTonDong"] = 0;
                row["SLTaoMoi"] = 0;
                row["SLDaDong"] = 0;
                dtNguoiDung.Rows.Add(row);
            }

            DataRow rowNguoiDung_0 = dtNguoiDung.Rows[0];

            #region "Số lượng tồn đọng kỳ trước"
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();

            //Lấy ra những trường nào
            Dictionary<string, string> extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, NguoiXuLy, PhongBanXuLyId, DoiTacXuLyId, NgayTiepNhan_NguoiXuLy, LDate");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            // DateTime previousFromDate = fromDate.AddDays(-1);
            // Luôn phải tính toán số liệu đến hết ngày trong 1 kỳ lấy số liệu, ví dụ nếu từ ngày đến ngày thì đến ngày là đến Hết ngày đó
            // chuẩn bị sang ngày mới (ví dụ 23:59:59) còn nếu bắt đầu thì sẽ là 00:00:00
            DateTime previousFromDate = new DateTime(fromDate.AddDays(-1).Year, fromDate.AddDays(-1).Month, fromDate.AddDays(-1).Day, 23, 59, 59);
            //string whereClauseTonDongKyTruoc = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(previousFromDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
            //string whereClauseTonDongKyTruoc = string.Format("((NgayTiepNhan:[* TO {0}] AND -HanhDong:1) OR (LDate_ActivityTruoc:[* TO {0}] AND HanhDong:1)) AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));

            // Edited by	: Dao Van Duong
            // Datetime		: 9.8.2016 10:29
            // Note			: Nâng cấp lọc thêm tỉnh, huyện
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]{2}{3}",
                ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999),
                ConvertUtility.ConvertDateTimeToSolr(fromDate),
                dkTinh,
                dkHuyen
                );
            // Tăng cường dk người dùng
            // whereClauseTonDongKyTruoc += dsSolrDanhSachNguoiDung;

            //string whereClauseTonDongKyTruoc = string.Format("((-NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND NgayTiepNhan_NguoiXuLy:[* TO {0}]) OR (NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND  NgayTiepNhan:[* TO {0}])) AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            #endregion

            Dictionary<int, string> listKhieuNaiIdTonDongKyTruoc = new Dictionary<int, string>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    //return obj.DoiTacXuLyId != doiTacId || (obj.PhongBanXuLyId != phongBanId && phongBanId != NO_VALUE) || (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy < DateTime.MaxValue);
                    return obj.DoiTacXuLyId != doiTacId || (obj.PhongBanXuLyId != phongBanId && phongBanId != NO_VALUE);
                });

                rowNguoiDung_0["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.NgayTiepNhan_NguoiXuLy > previousFromDate; }).Count;
                int sl = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.NgayTiepNhan_NguoiXuLy > previousFromDate; }).Count;

                foreach (DataRow row in dtNguoiDung.Rows)
                {
                    string tenTruyCap = row["TenTruyCap"].ToString();
                    if (tenTruyCap != "")
                    {
                        //row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return (obj.PhongBanXuLyId == phongBanId || phongBanId == NO_VALUE) && obj.NguoiXuLy.ToLower() == tenTruyCap.ToLower() && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                        //row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj) { return (obj.PhongBanXuLyId == phongBanId || phongBanId == NO_VALUE) && obj.NguoiXuLy.ToLower() == tenTruyCap.ToLower(); }).Count;

                        row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy <= previousFromDate); }).Count;
                    }
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
                }
            }

            #region "Số lượng tồn đọng quá hạn"
            QueryOptions queryOptionTonDong = new QueryOptions();

            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, PhongBanXuLyId, NguoiXuLy, DoiTacXuLyId, NgayTiepNhan_NguoiXuLy");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]{2}{3}",
                ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999),
                ConvertUtility.ConvertDateTimeToSolr(nextToDate),
                dkTinh,
                dkHuyen
                );
            //string whereClauseTonDong = string.Format("((-NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND NgayTiepNhan_NguoiXuLy:[* TO {0}]) OR (NgayTiepNhan_NguoiXuLy : [9999-12-31T00:00:00.000Z TO 9999-12-31T23:59:59.999Z] AND  NgayTiepNhan:[* TO {0}])) AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            #endregion

            Dictionary<int, string> listKhieuNaiIdTonDong = new Dictionary<int, string>();

            if (listKhieuNaiInfo != null)
            {
                //int numberDelete = listKhieuNaiInfo.RemoveAll(delegate(KhieuNai_ReportInfo obj) { return obj.DoiTacXuLyId != doiTacId || (obj.PhongBanXuLyId != phongBanId && phongBanId != NO_VALUE) || obj.NgayTiepNhan_NguoiXuLy > toDate; });
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.DoiTacXuLyId != doiTacId || (obj.PhongBanXuLyId != phongBanId && phongBanId != NO_VALUE); });

                if (listKhieuNaiInfo != null)
                {
                    rowNguoiDung_0["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate; }).Count;
                    rowNguoiDung_0["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate && toDate >= obj.NgayQuaHan; }).Count;
                    int sl = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate; }).Count;


                    foreach (DataRow row in dtNguoiDung.Rows)
                    {
                        string tenTruyCap = row["TenTruyCap"].ToString();
                        if (tenTruyCap != "")
                        {
                            //row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                            //row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy < fromDate); }).Count;                        
                            row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                            { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                            row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                            {
                                //return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate);
                                //return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy < fromDate);                            
                                return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy <= toDate);
                            }).Count;
                        }
                    }

                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
                    }
                }
            }

            foreach (DataRow row in dtNguoiDung.Rows)
            {
                string tenTruyCap = row["TenTruyCap"].ToString();
                string tenTruyCapSolr = tenTruyCap;
                if (tenTruyCapSolr.Trim().Length == 0)
                {
                    tenTruyCapSolr = "\"\"";
                }

                // Số lượng tiếp nhận
                QueryOptions queryOptionTiepNhan = new QueryOptions();
                // Lấy ra những trường nào
                var extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId, NguoiXuLy, NgayTiepNhan_NguoiXuLy");
                queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
                queryOptionTiepNhan.Start = 0;
                queryOptionTiepNhan.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
                List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
                listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

                GroupingParameters gpTiepNhan = new GroupingParameters();
                gpTiepNhan.Fields = listGroupField;
                gpTiepNhan.Limit = 1;
                gpTiepNhan.Main = true;
                gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
                queryOptionTiepNhan.Grouping = gpTiepNhan;

                string whereClauseTiepNhan = string.Empty;
                if (phongBanId == NO_VALUE)
                {
                    //whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId : {2} AND (NgayTiepNhan_NguoiXuLy:[{3} TO *]){4}{5}",
                                                ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                                                doiTacId, ConvertUtility.ConvertDateTimeToSolr(nextToDate),
                                                dkTinh,
                                                dkHuyen
                                                );
                    }
                    else
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan_NguoiXuLy:[{0} TO {1}] AND DoiTacXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3){4}{5}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr,
                                                dkTinh,
                                                dkHuyen
                                                );
                    }
                }
                else
                {
                    //if(tenTruyCap == "ducvm_ptdv")
                    //{

                    //}
                    //whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2} AND (NgayTiepNhan_NguoiXuLy:[{3} TO *]){4}{5}",
                                                ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                                                phongBanId, ConvertUtility.ConvertDateTimeToSolr(nextToDate),
                                                dkTinh,
                                                dkHuyen
                                                );
                    }
                    else
                    {
                        whereClauseTiepNhan = string.Format("NgayTiepNhan_NguoiXuLy:[{0} TO {1}] AND PhongBanXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(0 1 2 3){4}{5}",
                            ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false),
                            ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                            phongBanId,
                            tenTruyCapSolr,
                            dkTinh,
                            dkHuyen
                            );
                    }
                }

                solrQuery = new SolrQuery(whereClauseTiepNhan);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLTiepNhan"] = listKhieuNaiInfo.Count;
                    }
                }

                // Số lượng đã xử lý
                // Số lượng quá hạn đã xử lý
                QueryOptions queryOptionXuLy = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamXuLy = new Dictionary<string, string>();
                extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayTiepNhan_NguoiXuLyTruoc, NgayQuaHan_PhongBanXuLyTruoc, HanhDong");
                queryOptionXuLy.ExtraParams = extraParamXuLy;
                queryOptionXuLy.Start = 0;
                queryOptionXuLy.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
                listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

                GroupingParameters gpXuLy = new GroupingParameters();
                gpXuLy.Fields = listGroupField;
                gpXuLy.Limit = 1;
                gpXuLy.Main = true;
                gpXuLy.OrderBy = listSortOrderNgayXuLy;
                queryOptionXuLy.Grouping = gpXuLy;

                string whereClauseXuLy = string.Empty;
                if (phongBanId == NO_VALUE)
                {
                    //whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3} AND -HanhDong:4) OR (NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLId :{2} AND NguoiXuLy:{3} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr);
                    if (tenTruyCap.Length == 0)
                    {
                        whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4){4}{5}",
                            ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false),
                            ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                            doiTacId,
                            tenTruyCapSolr,
                            dkTinh,
                            dkHuyen
                            );
                    }
                    else
                    {
                        whereClauseXuLy = string.Format("(LDate_ActivityTruoc:[{0} TO {1}] AND DoiTacXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4)) OR (LDate:[{0} TO {1}] AND  NguoiXuLy:{3} AND HanhDong:4){4}{5}",
                            ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false),
                            ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, tenTruyCapSolr,
                            dkTinh,
                            dkHuyen
                            );
                    }
                }
                else
                {
                    if (tenTruyCap.Length == 0)
                    {
                        whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4){4}{5}",
                            ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false),
                            ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                            phongBanId, tenTruyCapSolr,
                            dkTinh,
                            dkHuyen
                            );
                    }
                    else
                    {
                        whereClauseXuLy = string.Format("(LDate_ActivityTruoc:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -HanhDong:(0 4)) OR (LDate:[{0} TO {1}] AND  NguoiXuLy:{3} AND HanhDong:4){4}{5}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr,
                            dkTinh,
                            dkHuyen
                            );
                    }
                }

                solrQuery = new SolrQuery(whereClauseXuLy);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLDaXuLy"] = listKhieuNaiInfo.Count;
                        row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;
                        //row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.NgayTiepNhan_NguoiXuLyTruoc < obj.NgayQuaHan_PhongBanXuLyTruoc && obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;

                        row["SLChuyenXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban; }).Count;
                        row["SLChuyenPhanHoi"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; }).Count;
                        row["SLChuyenNgangHang"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng; }).Count;
                    }
                }


                // Tính số lượng tạo mới và đã đóng
                if (tenTruyCap.Length > 0)
                {
                    // Số lượng tạo mới                    
                    QueryOptions queryOptionTaoMoi = new QueryOptions();
                    //Lấy ra những trường nào
                    var extraParamTaoMoi = new Dictionary<string, string>();
                    extraParamTaoMoi.Add("fl", @"Id");
                    queryOptionTaoMoi.ExtraParams = extraParamTaoMoi;
                    queryOptionTaoMoi.Start = 0;
                    queryOptionTaoMoi.Rows = int.MaxValue;

                    string whereClauseTaoMoi = string.Empty;
                    if (phongBanId == NO_VALUE)
                    {
                        whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiTiepNhan : {2} AND DoiTacId :  {3}{4}{5}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999),
                            tenTruyCap,
                            doiTacId,
                            dkTinh,
                            dkHuyen
                            );
                    }
                    else
                    {
                        whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiTiepNhan : {2} AND PhongBanTiepNhanId : {3}{4}{5}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap, phongBanId,
                            dkTinh,
                            dkHuyen
                            );
                    }
                    solrQuery = new SolrQuery(whereClauseTaoMoi);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTaoMoi);

                    row["SLTaoMoi"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

                    // Số lượng tạo đã đóng                   
                    QueryOptions queryOptionDaDong = new QueryOptions();
                    //Lấy ra những trường nào
                    Dictionary<string, string> extraParamDaDong = new Dictionary<string, string>();
                    extraParamDaDong.Add("fl", @"Id");
                    queryOptionDaDong.ExtraParams = extraParamDaDong;
                    queryOptionDaDong.Start = 0;
                    queryOptionDaDong.Rows = int.MaxValue;

                    string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2}{3}{4}",
                        ConvertUtility.ConvertDateTimeToSolr(fromDate),
                        ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999),
                        tenTruyCap,
                        dkTinh,
                        dkHuyen
                        );
                    if (phongBanId == NO_VALUE)
                    {
                        whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2} AND DoiTacXuLyId : {3}{4}{5}",
                            ConvertUtility.ConvertDateTimeToSolr(fromDate),
                            ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999),
                            tenTruyCap,
                            doiTacId,
                            dkTinh,
                            dkHuyen);
                    }
                    else
                    {
                        whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2} AND PhongBanXuLyId : {3}{4}{5}",
                            ConvertUtility.ConvertDateTimeToSolr(fromDate),
                            ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999),
                            tenTruyCap,
                            phongBanId,
                            dkTinh,
                            dkHuyen);
                    }
                    solrQuery = new SolrQuery(whereClauseDaDong);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionDaDong);

                    row["SLDaDong"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;
                }
            }

            return dtNguoiDung;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 18/11/2014
        /// Todo : Báo cáo tổng hợp của người dùng
        /// </summary>
        public DataTable BaoCaoTongHopPAKNTheoNguoiDung_Solr(string tenTruyCap, DateTime fromDate, DateTime toDate)
        {
            if (tenTruyCap == null || tenTruyCap.Length == 0)
                return null;
            string tenDayDu = string.Empty;
            List<NguoiSuDungInfo> listNguoiSuDungInfo = new NguoiSuDungImpl().NguoiSuDung_GetInfoNguoiSuDungByTenTruyCap(tenTruyCap);
            if (listNguoiSuDungInfo != null && listNguoiSuDungInfo.Count > 0)
            {
                tenDayDu = listNguoiSuDungInfo[0].TenDayDu;
            }

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtNguoiDung = new DataTable();
            dtNguoiDung.Columns.Add("TenTruyCap");
            dtNguoiDung.Columns.Add("TenDayDu");
            dtNguoiDung.Columns.Add("SLTonDongKyTruoc");
            dtNguoiDung.Columns.Add("SLTiepNhan");
            dtNguoiDung.Columns.Add("SLDaXuLy");
            dtNguoiDung.Columns.Add("SLChuyenXuLy");
            dtNguoiDung.Columns.Add("SLChuyenPhanHoi");
            dtNguoiDung.Columns.Add("SLChuyenNgangHang");
            dtNguoiDung.Columns.Add("SLQuaHanDaXuLy");
            dtNguoiDung.Columns.Add("SLTonDong");
            dtNguoiDung.Columns.Add("SLQuaHanTonDong");
            dtNguoiDung.Columns.Add("SLTaoMoi");
            dtNguoiDung.Columns.Add("SLDaDong");

            DataRow rowNguoiDung = dtNguoiDung.NewRow();
            rowNguoiDung["TenTruyCap"] = tenTruyCap;
            rowNguoiDung["TenDayDu"] = tenDayDu;
            rowNguoiDung["SLTonDongKyTruoc"] = 0;
            rowNguoiDung["SLTiepNhan"] = 0;
            rowNguoiDung["SLDaXuLy"] = 0;
            rowNguoiDung["SLChuyenXuLy"] = 0;
            rowNguoiDung["SLChuyenPhanHoi"] = 0;
            rowNguoiDung["SLChuyenNgangHang"] = 0;
            rowNguoiDung["SLQuaHanDaXuLy"] = 0;
            rowNguoiDung["SLTonDong"] = 0;
            rowNguoiDung["SLQuaHanTonDong"] = 0;
            rowNguoiDung["SLTaoMoi"] = 0;
            rowNguoiDung["SLDaDong"] = 0;

            dtNguoiDung.Rows.Add(rowNguoiDung);

            DataRow row = dtNguoiDung.Rows[0];

            #region "Số lượng tồn đọng kỳ trước"
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            Dictionary<string, string> extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, NguoiXuLy");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            #endregion

            List<int> listKhieuNaiIdTonDongKyTruoc = new List<int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return obj.NguoiXuLy.ToLower() != tenTruyCap.ToLower();
                });

                row["SLTonDongKyTruoc"] = listKhieuNaiInfo.Count;

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, NguoiXuLy");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            List<int> listKhieuNaiIdTonDong = new List<int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.NguoiXuLy != tenTruyCap; });

                if (listKhieuNaiInfo != null)
                {
                    row["SLTonDong"] = listKhieuNaiInfo.Count;
                    row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    {
                        return toDate >= obj.NgayQuaHan;
                    }).Count;

                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId);
                    }
                }
            }

            // Số lượng tiếp nhận
            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId, NguoiXuLy");
            queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
            List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
            listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

            GroupingParameters gpTiepNhan = new GroupingParameters();
            gpTiepNhan.Fields = listGroupField;
            gpTiepNhan.Limit = 1;
            gpTiepNhan.Main = true;
            gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
            queryOptionTiepNhan.Grouping = gpTiepNhan;

            string whereClauseTiepNhan = string.Empty;
            whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiXuLy: {2} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), tenTruyCap);

            solrQuery = new SolrQuery(whereClauseTiepNhan);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                {
                    int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                    { return listKhieuNaiIdTonDongKyTruoc.Contains(obj.KhieuNaiId); });
                }

                if (listKhieuNaiInfo != null)
                {
                    row["SLTiepNhan"] = listKhieuNaiInfo.Count;
                }
            }

            // Số lượng đã xử lý
            // Số lượng quá hạn đã xử lý
            QueryOptions queryOptionXuLy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamXuLy = new Dictionary<string, string>();
            extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan_PhongBanXuLyTruoc, HanhDong");
            queryOptionXuLy.ExtraParams = extraParamXuLy;
            queryOptionXuLy.Start = 0;
            queryOptionXuLy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
            listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

            GroupingParameters gpXuLy = new GroupingParameters();
            gpXuLy.Fields = listGroupField;
            gpXuLy.Limit = 1;
            gpXuLy.Main = true;
            gpXuLy.OrderBy = listSortOrderNgayXuLy;
            queryOptionXuLy.Grouping = gpXuLy;

            string whereClauseXuLy = string.Empty;
            whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND NguoiXuLyTruoc: {2} AND -NguoiXuLy : {2} AND -HanhDong:4) OR (LDate:[{0} TO {1}] AND NguoiXuLy:{2} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), tenTruyCap);

            solrQuery = new SolrQuery(whereClauseXuLy);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
            if (listKhieuNaiInfo != null)
            {
                if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                {
                    int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                    { return listKhieuNaiIdTonDong.Contains(obj.KhieuNaiId); });
                }

                if (listKhieuNaiInfo != null)
                {
                    row["SLDaXuLy"] = listKhieuNaiInfo.Count;
                    row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;

                    row["SLChuyenXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban; }).Count;
                    row["SLChuyenPhanHoi"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; }).Count;
                    row["SLChuyenNgangHang"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng; }).Count;
                }
            }


            // Tính số lượng tạo mới và đã đóng
            // Số lượng tạo mới                    
            QueryOptions queryOptionTaoMoi = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTaoMoi = new Dictionary<string, string>();
            extraParamTaoMoi.Add("fl", @"Id");
            queryOptionTaoMoi.ExtraParams = extraParamTaoMoi;
            queryOptionTaoMoi.Start = 0;
            queryOptionTaoMoi.Rows = int.MaxValue;

            string whereClauseTaoMoi = string.Empty;
            whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiTiepNhan : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap);
            solrQuery = new SolrQuery(whereClauseTaoMoi);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTaoMoi);

            row["SLTaoMoi"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

            // Số lượng tạo đã đóng                   
            QueryOptions queryOptionDaDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamDaDong = new Dictionary<string, string>();
            extraParamDaDong.Add("fl", @"Id");
            queryOptionDaDong.ExtraParams = extraParamDaDong;
            queryOptionDaDong.Start = 0;
            queryOptionDaDong.Rows = int.MaxValue;

            string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap);
            whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap);
            solrQuery = new SolrQuery(whereClauseDaDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionDaDong);

            row["SLDaDong"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

            return dtNguoiDung;
        }

        // Edited by	: Dao Van Duong
        // Datetime		: 8.8.2016 15:24
        // Note			: Phiên bản kế tiếp, tăng cường lọc theo tỉnh thành, quận huyện
        public DataTable BaoCaoTongHopPAKNTheoNguoiDung_Solr_Ver2(string tenTruyCap, DateTime fromDate, DateTime toDate, int tinhId, int huyenId)
        {
            if (tenTruyCap == null || tenTruyCap.Length == 0)
                return null;
            string tenDayDu = string.Empty;
            List<NguoiSuDungInfo> listNguoiSuDungInfo = new NguoiSuDungImpl().NguoiSuDung_GetInfoNguoiSuDungByTenTruyCap(tenTruyCap);
            if (listNguoiSuDungInfo != null && listNguoiSuDungInfo.Count > 0)
            {
                tenDayDu = listNguoiSuDungInfo[0].TenDayDu;
            }

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtNguoiDung = new DataTable();
            dtNguoiDung.Columns.Add("TenTruyCap");
            dtNguoiDung.Columns.Add("TenDayDu");
            dtNguoiDung.Columns.Add("SLTonDongKyTruoc");
            dtNguoiDung.Columns.Add("SLTiepNhan");
            dtNguoiDung.Columns.Add("SLDaXuLy");
            dtNguoiDung.Columns.Add("SLChuyenXuLy");
            dtNguoiDung.Columns.Add("SLChuyenPhanHoi");
            dtNguoiDung.Columns.Add("SLChuyenNgangHang");
            dtNguoiDung.Columns.Add("SLQuaHanDaXuLy");
            dtNguoiDung.Columns.Add("SLTonDong");
            dtNguoiDung.Columns.Add("SLQuaHanTonDong");
            dtNguoiDung.Columns.Add("SLTaoMoi");
            dtNguoiDung.Columns.Add("SLDaDong");

            DataRow rowNguoiDung = dtNguoiDung.NewRow();
            rowNguoiDung["TenTruyCap"] = tenTruyCap;
            rowNguoiDung["TenDayDu"] = tenDayDu;
            rowNguoiDung["SLTonDongKyTruoc"] = 0;
            rowNguoiDung["SLTiepNhan"] = 0;
            rowNguoiDung["SLDaXuLy"] = 0;
            rowNguoiDung["SLChuyenXuLy"] = 0;
            rowNguoiDung["SLChuyenPhanHoi"] = 0;
            rowNguoiDung["SLChuyenNgangHang"] = 0;
            rowNguoiDung["SLQuaHanDaXuLy"] = 0;
            rowNguoiDung["SLTonDong"] = 0;
            rowNguoiDung["SLQuaHanTonDong"] = 0;
            rowNguoiDung["SLTaoMoi"] = 0;
            rowNguoiDung["SLDaDong"] = 0;

            dtNguoiDung.Rows.Add(rowNguoiDung);

            DataRow row = dtNguoiDung.Rows[0];
            string dkTinh = tinhId > 0 ? string.Format(" AND MaTinhId : {0}", tinhId) : string.Empty;
            string dkHuyen = huyenId > 0 ? string.Format(" AND MaQuanId : {0}", huyenId) : string.Empty;

            #region "Số lượng tồn đọng kỳ trước"
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            Dictionary<string, string> extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, NguoiXuLy");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);

            string whereClauseTonDongKyTruoc = string.Empty;
            whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]{2}{3}",
           ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999),
           ConvertUtility.ConvertDateTimeToSolr(fromDate),
           dkTinh,
           dkHuyen);
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            #endregion

            List<int> listKhieuNaiIdTonDongKyTruoc = new List<int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return obj.NguoiXuLy.ToLower() != tenTruyCap.ToLower();
                });

                row["SLTonDongKyTruoc"] = listKhieuNaiInfo.Count;

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId);
                }
            }

            #region "Số lượng tồn đọng quá hạn"
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, NguoiXuLy");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]{2}{3}",
                ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999),
                ConvertUtility.ConvertDateTimeToSolr(nextToDate),
                dkTinh,
                dkHuyen);
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            #endregion

            List<int> listKhieuNaiIdTonDong = new List<int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.NguoiXuLy != tenTruyCap; });

                if (listKhieuNaiInfo != null)
                {
                    row["SLTonDong"] = listKhieuNaiInfo.Count;
                    row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    {
                        return toDate >= obj.NgayQuaHan;
                    }).Count;

                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId);
                    }
                }
            }

            #region "Số lượng tiếp nhận"
            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            Dictionary<string, string> extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId, NguoiXuLy");
            queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
            List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
            listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

            GroupingParameters gpTiepNhan = new GroupingParameters();
            gpTiepNhan.Fields = listGroupField;
            gpTiepNhan.Limit = 1;
            gpTiepNhan.Main = true;
            gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
            queryOptionTiepNhan.Grouping = gpTiepNhan;

            string whereClauseTiepNhan = string.Empty;
            whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiXuLy: {2} AND HanhDong:(0 1 2 3){3}{4}",
                ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false),
                ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                tenTruyCap,
                dkTinh,
                dkHuyen);

            solrQuery = new SolrQuery(whereClauseTiepNhan);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
            #endregion

            if (listKhieuNaiInfo != null)
            {
                if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                {
                    int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                    { return listKhieuNaiIdTonDongKyTruoc.Contains(obj.KhieuNaiId); });
                }

                if (listKhieuNaiInfo != null)
                {
                    row["SLTiepNhan"] = listKhieuNaiInfo.Count;
                }
            }

            #region "Số lượng quá hạn đã xử lý"
            QueryOptions queryOptionXuLy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamXuLy = new Dictionary<string, string>();
            extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan_PhongBanXuLyTruoc, HanhDong");
            queryOptionXuLy.ExtraParams = extraParamXuLy;
            queryOptionXuLy.Start = 0;
            queryOptionXuLy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
            listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

            GroupingParameters gpXuLy = new GroupingParameters();
            gpXuLy.Fields = listGroupField;
            gpXuLy.Limit = 1;
            gpXuLy.Main = true;
            gpXuLy.OrderBy = listSortOrderNgayXuLy;
            queryOptionXuLy.Grouping = gpXuLy;

            string whereClauseXuLy = string.Empty;
            whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND NguoiXuLyTruoc: {2} AND -NguoiXuLy : {2} AND -HanhDong:4) OR (LDate:[{0} TO {1}] AND NguoiXuLy:{2} AND HanhDong:4){3}{4}",
                ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false),
                ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                tenTruyCap,
                dkTinh,
                dkHuyen);

            solrQuery = new SolrQuery(whereClauseXuLy);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
            #endregion

            if (listKhieuNaiInfo != null)
            {
                if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                {
                    int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                    { return listKhieuNaiIdTonDong.Contains(obj.KhieuNaiId); });
                }

                if (listKhieuNaiInfo != null)
                {
                    row["SLDaXuLy"] = listKhieuNaiInfo.Count;
                    row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;

                    row["SLChuyenXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban; }).Count;
                    row["SLChuyenPhanHoi"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; }).Count;
                    row["SLChuyenNgangHang"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng; }).Count;
                }
            }

            #region "Số lượng tạo mới"
            QueryOptions queryOptionTaoMoi = new QueryOptions();

            var extraParamTaoMoi = new Dictionary<string, string>();
            extraParamTaoMoi.Add("fl", @"Id");
            queryOptionTaoMoi.ExtraParams = extraParamTaoMoi;
            queryOptionTaoMoi.Start = 0;
            queryOptionTaoMoi.Rows = int.MaxValue;

            string whereClauseTaoMoi = string.Empty;
            whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiTiepNhan : {2}{3}{4}",
                ConvertUtility.ConvertDateTimeToSolr(fromDate),
                ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999),
                tenTruyCap,
                dkTinh,
                dkHuyen
                );
            solrQuery = new SolrQuery(whereClauseTaoMoi);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTaoMoi);

            row["SLTaoMoi"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;
            #endregion

            #region "Số lượng đã đóng"
            QueryOptions queryOptionDaDong = new QueryOptions();
            var extraParamDaDong = new Dictionary<string, string>();
            extraParamDaDong.Add("fl", @"Id");
            queryOptionDaDong.ExtraParams = extraParamDaDong;
            queryOptionDaDong.Start = 0;
            queryOptionDaDong.Rows = int.MaxValue;

            string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2}{3}{4}",
                ConvertUtility.ConvertDateTimeToSolr(fromDate),
                ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999),
                tenTruyCap,
                dkTinh,
                dkHuyen);
            whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NguoiXuLy : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), tenTruyCap);
            solrQuery = new SolrQuery(whereClauseDaDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionDaDong);

            row["SLDaDong"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;
            #endregion

            return dtNguoiDung;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 08/09/2014
        /// Todo :  Báo cáo tổng hợp của cả đối tác        
        ///     - Số lượng tồn trước kỳ
        ///     - Số lượng tiếp nhận
        ///     - Số lượng xử lý
        ///     - Số lượng xử lý quá hạn
        ///     - Số lượng tồn
        ///     - Số lượng tồn quá hạn
        ///     - Số lượng tạo mới
        ///     - Số lượng đã đóng
        /// </summary>
        /// <param name="trungTamId"></param>        
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoVNPTX_Solr(int doiTacId, DateTime fromDate, DateTime toDate)
        {
            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            DoiTacInfo doiTacInfo = new DoiTacImpl().GetInfo(doiTacId);

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtDoiTac = new DataTable();
            dtDoiTac.Columns.Add("DoiTacId");
            dtDoiTac.Columns.Add("TenDoiTac");
            dtDoiTac.Columns.Add("SLTonDongKyTruoc");
            dtDoiTac.Columns.Add("SLTiepNhan");
            dtDoiTac.Columns.Add("SLTiepNhanTrongKy");
            dtDoiTac.Columns.Add("SLDaXuLyTiepNhan");
            dtDoiTac.Columns.Add("SLDaXuLyLuyKe");
            dtDoiTac.Columns.Add("SLQuaHanDaXuLy");
            dtDoiTac.Columns.Add("SLTonDong");
            dtDoiTac.Columns.Add("SLQuaHanTonDong");
            dtDoiTac.Columns.Add("SLTaoMoi");
            dtDoiTac.Columns.Add("SLDaDong");
            dtDoiTac.Columns.Add("SLChuyenXuLy");
            dtDoiTac.Columns.Add("SLChuyenPhanHoi");
            dtDoiTac.Columns.Add("SLChuyenNgangHang");

            DataRow row = dtDoiTac.NewRow();
            row["DoiTacId"] = doiTacId;
            row["TenDoiTac"] = doiTacInfo != null ? doiTacInfo.TenDoiTac : string.Empty;
            row["SLTonDongKyTruoc"] = 0;
            row["SLTiepNhan"] = 0;
            row["SLTiepNhanTrongKy"] = 0;
            row["SLDaXuLyTiepNhan"] = 0;
            row["SLDaXuLyLuyKe"] = 0;
            row["SLQuaHanDaXuLy"] = 0;
            row["SLTonDong"] = 0;
            row["SLQuaHanTonDong"] = 0;
            row["SLTaoMoi"] = 0;
            row["SLDaDong"] = 0;
            row["SLChuyenXuLy"] = 0;
            row["SLChuyenPhanHoi"] = 0;
            row["SLChuyenNgangHang"] = 0;
            dtDoiTac.Rows.Add(row);

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, KhuVucXuLyId");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND (KhieuNai_NgayDongKN : [{1} TO *])",
                ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999),
                ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            List<int> listKhieuNaiIdTonDongKyTruoc = new List<int>();

            var newobj = listKhieuNaiInfo.Count(v => v.KhuVucXuLyId == doiTacId);

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return obj.KhuVucXuLyId != doiTacId;
                });
                dtDoiTac.Rows[0]["SLTonDongKyTruoc"] = listKhieuNaiInfo.Count;

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            List<int> listKhieuNaiIdTonDong = new List<int>();

            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, KhuVucXuLyId");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            //string whereClauseTonDong = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(nextToDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN:[{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            if (listKhieuNaiInfo != null)
            {
                //List<KhieuNai_ReportInfo> listKhieuNaiTonDong = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN && obj.KhuVucXuLyId == tongCongTyId; });
                //listKhieuNaiInfo = null;

                //int numberDelete = listKhieuNaiInfo.RemoveAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Đóng_KN || obj.KhuVucXuLyId != tongCongTyId; });
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.KhuVucXuLyId != doiTacId; });

                if (listKhieuNaiInfo != null)
                {
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId);
                    }

                    dtDoiTac.Rows[0]["SLTonDong"] = listKhieuNaiInfo.Count;
                    dtDoiTac.Rows[0]["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    {
                        //return (obj.LDate <= toDate && obj.LDate >= obj.NgayQuaHan) || (obj.LDate > toDate && toDate >= obj.NgayQuaHan);
                        return toDate >= obj.NgayQuaHan;
                    }).Count;
                }
            }

            // Số lượng tiếp nhận
            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId");
            queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;


            SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
            List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
            listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

            GroupingParameters gpTiepNhan = new GroupingParameters();
            gpTiepNhan.Fields = listGroupField;
            gpTiepNhan.Limit = 1;
            gpTiepNhan.Main = true;
            gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
            queryOptionTiepNhan.Grouping = gpTiepNhan;

            // listKhieuNaiIdTiepNhan : Biến dùng để lưu các KhieuNaiId tiếp nhận, mục đích dùng để xác định các KhieuNaiId nào đã được xử lý
            List<int> listKhieuNaiIdTiepNhan = new List<int>();

            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND KhuVucXuLyId: {2} AND HanhDong:(0 1 2 3)", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), doiTacId);
            solrQuery = new SolrQuery(whereClauseTiepNhan);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                {
                    int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                    { return listKhieuNaiIdTonDongKyTruoc.Contains(obj.KhieuNaiId); });
                }

                dtDoiTac.Rows[0]["SLTiepNhan"] = listKhieuNaiInfo.Count;
                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTiepNhan.Add(listKhieuNaiInfo[i].KhieuNaiId);
                }

            }

            // Số lượng đã xử lý
            // Số lượng quá hạn đã xử lý
            QueryOptions queryOptionXuLy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamXuLy = new Dictionary<string, string>();
            extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, NgayQuaHan_PhongBanXuLyTruoc, LDate, HanhDong");
            queryOptionXuLy.ExtraParams = extraParamXuLy;
            queryOptionXuLy.Start = 0;
            queryOptionXuLy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
            listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

            GroupingParameters gpXuLy = new GroupingParameters();
            gpXuLy.Fields = listGroupField;
            gpXuLy.Limit = 1;
            gpXuLy.Main = true;
            gpXuLy.OrderBy = listSortOrderNgayXuLy;
            queryOptionXuLy.Grouping = gpXuLy;

            //string whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND ((DoiTacXuLyTruocId: {2} AND -KhuVucXuLyId : {2}) OR (KhuVucXuLyId:{2} AND HanhDong:4))", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), tongCongTyId);
            string whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND  KhuVucXuLyTruocId: {2} AND -KhuVucXuLyId : {2} AND -HanhDong:4) OR (LDate:[{0} TO {1}] AND  KhuVucXuLyId:{2} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId);
            solrQuery = new SolrQuery(whereClauseXuLy);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return listKhieuNaiIdTonDong.Contains(obj.KhieuNaiId); });
                if (listKhieuNaiInfo != null)
                {
                    dtDoiTac.Rows[0]["SLDaXuLyLuyKe"] = listKhieuNaiInfo.Count;
                    dtDoiTac.Rows[0]["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;

                    // Tính số lượng tiếp nhận đã xử lý trong kỳ lấy báo cáo.
                    dtDoiTac.Rows[0]["SLDaXuLyTiepNhan"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return listKhieuNaiIdTiepNhan.Contains(obj.KhieuNaiId); }).Count;

                    //dtDoiTac.Rows[0]["SLChuyenXuLy"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban; }).Count;
                    //dtDoiTac.Rows[0]["SLChuyenPhanHoi"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; }).Count;
                    //dtDoiTac.Rows[0]["SLChuyenNgangHang"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng; }).Count;
                }
            }

            // Số lượng tạo mới                    
            QueryOptions queryOptionTaoMoi = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTaoMoi = new Dictionary<string, string>();
            extraParamTaoMoi.Add("fl", @"Id");
            queryOptionTaoMoi.ExtraParams = extraParamTaoMoi;
            queryOptionTaoMoi.Start = 0;
            queryOptionTaoMoi.Rows = int.MaxValue;

            string whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND KhuVucId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), doiTacId);
            solrQuery = new SolrQuery(whereClauseTaoMoi);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTaoMoi);

            row["SLTaoMoi"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

            // Số lượng tạo đã đóng                   
            QueryOptions queryOptionDaDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamDaDong = new Dictionary<string, string>();
            extraParamDaDong.Add("fl", @"Id");
            queryOptionDaDong.ExtraParams = extraParamDaDong;
            queryOptionDaDong.Start = 0;
            queryOptionDaDong.Rows = int.MaxValue;

            string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND KhuVucXuLyId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), doiTacId);
            solrQuery = new SolrQuery(whereClauseDaDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionDaDong);

            row["SLDaDong"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

            return dtDoiTac;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 04/10/2015
        /// </summary>
        /// <param name="khuVucId"></param>
        /// <param name="listDoiTacId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoDoiTac_V2_NET_Solr(int khuVucId, List<int> listDoiTacId, DateTime fromDate, DateTime toDate)
        {
            if (listDoiTacId == null || listDoiTacId.Count == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtDoiTac = new DataTable();
            dtDoiTac.Columns.Add("DoiTacId");
            dtDoiTac.Columns.Add("TenDoiTac");
            dtDoiTac.Columns.Add("SLTonDongKyTruoc");
            dtDoiTac.Columns.Add("SLTiepNhan");
            dtDoiTac.Columns.Add("SLDaXuLyTiepNhan");
            dtDoiTac.Columns.Add("SLDaXuLyLuyKe");
            dtDoiTac.Columns.Add("SLQuaHanDaXuLy");
            dtDoiTac.Columns.Add("SLTonDong");
            dtDoiTac.Columns.Add("SLQuaHanTonDong");
            dtDoiTac.Columns.Add("SLTaoMoi");
            dtDoiTac.Columns.Add("SLDaDong");
            dtDoiTac.Columns.Add("SLChuyenXuLy");
            dtDoiTac.Columns.Add("SLChuyenPhanHoi");
            dtDoiTac.Columns.Add("SLChuyenNgangHang");

            for (int i = 0; i < listDoiTacId.Count; i++)
            {
                DataRow row = dtDoiTac.NewRow();
                row["DoiTacId"] = listDoiTacId[i];
                row["TenDoiTac"] = string.Empty;
                row["SLTonDongKyTruoc"] = 0;
                row["SLTiepNhan"] = 0;
                row["SLDaXuLyTiepNhan"] = 0;
                row["SLDaXuLyLuyKe"] = 0;
                row["SLQuaHanDaXuLy"] = 0;
                row["SLTonDong"] = 0;
                row["SLQuaHanTonDong"] = 0;
                row["SLTaoMoi"] = 0;
                row["SLDaDong"] = 0;
                row["SLChuyenXuLy"] = 0;
                row["SLChuyenPhanHoi"] = 0;
                row["SLChuyenNgangHang"] = 0;

                for (int j = 0; j < DoiTacImpl.ListDoiTac.Count; j++)
                {
                    if (DoiTacImpl.ListDoiTac[j].Id == listDoiTacId[i])
                    {
                        row["TenDoiTac"] = DoiTacImpl.ListDoiTac[j].TenDoiTac;
                        break;
                    }
                } // end for(int j=0;j<DoiTacImpl.ListDoiTac.Count;j++)

                dtDoiTac.Rows.Add(row);
            }

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, DoiTacXuLyId");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            //string whereClauseTonDongKyTruoc = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(previousFromDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            Dictionary<int, int> listKhieuNaiIdTonDongKyTruoc = new Dictionary<int, int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return !listDoiTacId.Contains(obj.DoiTacXuLyId);
                });

                foreach (DataRow row in dtDoiTac.Rows)
                {
                    int curDoiTacXuLyId = ConvertUtility.ToInt32(row["DoiTacId"]);
                    row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.DoiTacXuLyId == curDoiTacXuLyId; }).Count;
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].DoiTacXuLyId);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, DoiTacXuLyId");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            //string whereClauseTonDong = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(nextToDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            Dictionary<int, int> listKhieuNaiIdTonDong = new Dictionary<int, int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return !listDoiTacId.Contains(obj.DoiTacXuLyId); });

                if (listKhieuNaiInfo != null)
                {
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].DoiTacXuLyId);
                    }

                    foreach (DataRow row in dtDoiTac.Rows)
                    {
                        int curDoiTacXuLyId = ConvertUtility.ToInt32(row["DoiTacId"]);
                        row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.DoiTacXuLyId == curDoiTacXuLyId; }).Count;
                        row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            return toDate >= obj.NgayQuaHan && obj.DoiTacXuLyId == curDoiTacXuLyId;
                        }).Count;

                        //if (curDoiTacXuLyId == 50)
                        //{
                        //    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                        //    {
                        //        if (listKhieuNaiInfo[i].DoiTacXuLyId == curDoiTacXuLyId)
                        //        {
                        //            if (toDate >= listKhieuNaiInfo[i].NgayQuaHan)
                        //            {

                        //            }
                        //        }
                        //    }
                        //}
                    }
                }
            }

            foreach (DataRow row in dtDoiTac.Rows)
            {
                int curDoiTacXuLyId = ConvertUtility.ToInt32(row["DoiTacId"]);

                // Số lượng tiếp nhận
                QueryOptions queryOptionTiepNhan = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId");
                queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
                queryOptionTiepNhan.Start = 0;
                queryOptionTiepNhan.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
                List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
                listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

                GroupingParameters gpTiepNhan = new GroupingParameters();
                gpTiepNhan.Fields = listGroupField;
                gpTiepNhan.Limit = 1;
                gpTiepNhan.Main = true;
                gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
                queryOptionTiepNhan.Grouping = gpTiepNhan;

                // listKhieuNaiIdTiepNhan : Biến dùng để lưu các KhieuNaiId tiếp nhận, mục đích dùng để xác định các KhieuNaiId nào đã được xử lý
                List<int> listKhieuNaiIdTiepNhan = new List<int>();
                string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId: {2} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), curDoiTacXuLyId);
                solrQuery = new SolrQuery(whereClauseTiepNhan);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curDoiTacXuLyId)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLTiepNhan"] = listKhieuNaiInfo.Count;

                        for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                        {
                            listKhieuNaiIdTiepNhan.Add(listKhieuNaiInfo[i].KhieuNaiId);
                        }
                    }
                }

                // Số lượng đã xử lý
                // Số lượng quá hạn đã xử lý
                QueryOptions queryOptionXuLy = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamXuLy = new Dictionary<string, string>();
                extraParamXuLy.Add("fl", @"Id, KhieuNaiId, NgayTiepNhan, NgayQuaHan_PhongBanXuLyTruoc, HanhDong");
                queryOptionXuLy.ExtraParams = extraParamXuLy;
                queryOptionXuLy.Start = 0;
                queryOptionXuLy.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                //SolrNet.SortOrder sortOrderActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
                listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);
                //listSortOrderNgayXuLy.Add(sortOrderActivityId);

                GroupingParameters gpXuLy = new GroupingParameters();
                gpXuLy.Fields = listGroupField;
                gpXuLy.Limit = 1;
                gpXuLy.Main = true;
                gpXuLy.OrderBy = listSortOrderNgayXuLy;
                queryOptionXuLy.Grouping = gpXuLy;

                string whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND  DoiTacXuLyTruocId: {2} AND -DoiTacXuLyId : {2} AND -HanhDong:4) OR (LDate:[{0} TO {1}] AND  DoiTacXuLyId:{2} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), curDoiTacXuLyId);
                solrQuery = new SolrQuery(whereClauseXuLy);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curDoiTacXuLyId)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        //for (int i = 0; i< listKhieuNaiInfo.Count;i++ )
                        //{
                        //    if(listKhieuNaiInfo[i].KhieuNaiId == 328027)
                        //    {

                        //    }
                        //}

                        row["SLDaXuLyLuyKe"] = listKhieuNaiInfo.Count;
                        row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;

                        // Tính số lượng tiếp nhận đã xử lý trong kỳ lấy báo cáo.
                        row["SLDaXuLyTiepNhan"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTiepNhan.Contains(obj.KhieuNaiId); }).Count;

                        //row["SLChuyenXuLy"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban; }).Count;
                        //row["SLChuyenPhanHoi"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; }).Count;
                        //row["SLChuyenNgangHang"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng; }).Count;
                    }
                }

                // Số lượng tạo mới                    
                QueryOptions queryOptionTaoMoi = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamTaoMoi = new Dictionary<string, string>();
                extraParamTaoMoi.Add("fl", @"Id");
                queryOptionTaoMoi.ExtraParams = extraParamTaoMoi;
                queryOptionTaoMoi.Start = 0;
                queryOptionTaoMoi.Rows = int.MaxValue;

                string whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), curDoiTacXuLyId);
                solrQuery = new SolrQuery(whereClauseTaoMoi);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTaoMoi);

                row["SLTaoMoi"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

                // Số lượng tạo đã đóng                   
                QueryOptions queryOptionDaDong = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamDaDong = new Dictionary<string, string>();
                extraParamDaDong.Add("fl", @"Id");
                queryOptionDaDong.ExtraParams = extraParamDaDong;
                queryOptionDaDong.Start = 0;
                queryOptionDaDong.Rows = int.MaxValue;

                string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND DoiTacXuLyId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), curDoiTacXuLyId);
                solrQuery = new SolrQuery(whereClauseDaDong);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionDaDong);

                row["SLDaDong"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;
            }

            return dtDoiTac;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 08/09/2014
        /// Todo : Thống kê số lượng khiếu nại theo các phòng ban của đối tác
        ///     - Số lượng tồn trước kỳ
        ///     - Số lượng tiếp nhận
        ///     - Số lượng xử lý
        ///     - Số lượng xử lý quá hạn
        ///     - Số lượng tồn
        ///     - Số lượng tồn quá hạn
        ///     - Số lượng tạo mới
        ///     - Số lượng đã đóng
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="listPhongBanId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoPhongBanDoiTac_V2_NET_Solr(int doiTacId, List<int> listPhongBanId, DateTime fromDate, DateTime toDate)
        {
            if (listPhongBanId == null || listPhongBanId.Count == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            List<PhongBanInfo> listPhongBan = new PhongBanImpl().GetListPhongBanByDoiTacId(doiTacId);

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtPhongBan = new DataTable();
            dtPhongBan.Columns.Add("PhongBanId");
            dtPhongBan.Columns.Add("TenPhongBan");
            dtPhongBan.Columns.Add("SLTonDongKyTruoc");
            dtPhongBan.Columns.Add("SLTiepNhan");
            dtPhongBan.Columns.Add("SLDaXuLyTiepNhan");
            dtPhongBan.Columns.Add("SLDaXuLyLuyKe");
            dtPhongBan.Columns.Add("SLQuaHanDaXuLy");
            dtPhongBan.Columns.Add("SLTonDong");
            dtPhongBan.Columns.Add("SLQuaHanTonDong");
            dtPhongBan.Columns.Add("SLTaoMoi");
            dtPhongBan.Columns.Add("SLDaDong");
            dtPhongBan.Columns.Add("SLChuyenXuLy");
            dtPhongBan.Columns.Add("SLChuyenPhanHoi");
            dtPhongBan.Columns.Add("SLChuyenNgangHang");

            for (int i = 0; i < listPhongBanId.Count; i++)
            {
                DataRow row = dtPhongBan.NewRow();
                row["PhongBanId"] = listPhongBanId[i];
                row["TenPhongBan"] = "Phòng ban " + listPhongBanId[i].ToString();
                row["SLTonDongKyTruoc"] = 0;
                row["SLTiepNhan"] = 0;
                row["SLDaXuLyTiepNhan"] = 0;
                row["SLDaXuLyLuyKe"] = 0;
                row["SLQuaHanDaXuLy"] = 0;
                row["SLTonDong"] = 0;
                row["SLQuaHanTonDong"] = 0;
                row["SLTaoMoi"] = 0;
                row["SLDaDong"] = 0;
                row["SLChuyenXuLy"] = 0;
                row["SLChuyenPhanHoi"] = 0;
                row["SLChuyenNgangHang"] = 0;

                if (listPhongBan != null)
                {
                    for (int j = 0; j < listPhongBan.Count; j++)
                    {
                        if (listPhongBan[j].Id == listPhongBanId[i])
                        {
                            row["TenPhongBan"] = listPhongBan[j].Name;
                            break;
                        }
                    } // end for(int j=0;j<listPhongBan.Count;j++)
                } // end if(listPhongBan != null)

                dtPhongBan.Rows.Add(row);
            }

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, PhongBanXuLyId");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            //string whereClauseTonDongKyTruoc = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(previousFromDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));

            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            Dictionary<int, int> listKhieuNaiIdTonDongKyTruoc = new Dictionary<int, int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return !listPhongBanId.Contains(obj.PhongBanXuLyId);
                });

                foreach (DataRow row in dtPhongBan.Rows)
                {
                    int curPhongBanXuLyId = ConvertUtility.ToInt32(row["PhongBanId"]);
                    row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.PhongBanXuLyId == curPhongBanXuLyId; }).Count;
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].PhongBanXuLyId);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, DoiTacXuLyId, PhongBanXuLyId");

            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            //string whereClauseTonDong = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(nextToDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));

            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            Dictionary<int, int> listKhieuNaiIdTonDong = new Dictionary<int, int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return !listPhongBanId.Contains(obj.PhongBanXuLyId); });

                if (listKhieuNaiInfo != null)
                {
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].PhongBanXuLyId);
                    }

                    foreach (DataRow row in dtPhongBan.Rows)
                    {
                        int curPhongBanXuLyId = ConvertUtility.ToInt32(row["PhongBanId"]);
                        row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.PhongBanXuLyId == curPhongBanXuLyId; }).Count;
                        row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            return toDate >= obj.NgayQuaHan && obj.PhongBanXuLyId == curPhongBanXuLyId;
                        }).Count;

                        var quahan1 = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            return toDate >= obj.NgayQuaHan && obj.PhongBanXuLyId == curPhongBanXuLyId;
                        }).Count;
                        var quahan2 = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            return toDate >= obj.NgayQuaHan && obj.LastPhongBanXuLyId == curPhongBanXuLyId;
                        }).Count;
                        //if (curPhongBanXuLyId == 50)
                        //{
                        //    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                        //    {
                        //        if (listKhieuNaiInfo[i].PhongBanXuLyId == curPhongBanXuLyId)
                        //        {
                        //            if (toDate >= listKhieuNaiInfo[i].NgayQuaHan)
                        //            {

                        //            }
                        //        }
                        //    }
                        //}
                    }
                }
            }

            foreach (DataRow row in dtPhongBan.Rows)
            {
                int curPhongBanXuLyId = ConvertUtility.ToInt32(row["PhongBanId"]);

                // Số lượng tiếp nhận
                QueryOptions queryOptionTiepNhan = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId");

                queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
                queryOptionTiepNhan.Start = 0;
                queryOptionTiepNhan.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
                List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
                listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

                GroupingParameters gpTiepNhan = new GroupingParameters();
                gpTiepNhan.Fields = listGroupField;
                gpTiepNhan.Limit = 1;
                gpTiepNhan.Main = true;
                gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
                queryOptionTiepNhan.Grouping = gpTiepNhan;

                // listKhieuNaiIdTiepNhan : Biến dùng để lưu các KhieuNaiId tiếp nhận, mục đích dùng để xác định các KhieuNaiId nào đã được xử lý
                List<int> listKhieuNaiIdTiepNhan = new List<int>();

                string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId: {2} AND HanhDong:(0 1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), curPhongBanXuLyId);
                solrQuery = new SolrQuery(whereClauseTiepNhan);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curPhongBanXuLyId)); });
                    }
                    if (listKhieuNaiInfo != null)
                    {
                        row["SLTiepNhan"] = listKhieuNaiInfo.Count;

                        for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                        {
                            listKhieuNaiIdTiepNhan.Add(listKhieuNaiInfo[i].KhieuNaiId);
                        }
                    }
                }

                // Số lượng đã xử lý
                // Số lượng quá hạn đã xử lý
                QueryOptions queryOptionXuLy = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamXuLy = new Dictionary<string, string>();
                extraParamXuLy.Add("fl", @"Id, KhieuNaiId, NgayTiepNhan, NgayQuaHan_PhongBanXuLyTruoc, HanhDong");
                queryOptionXuLy.ExtraParams = extraParamXuLy;
                queryOptionXuLy.Start = 0;
                queryOptionXuLy.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                //SolrNet.SortOrder sortOrderActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
                listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);
                //listSortOrderNgayXuLy.Add(sortOrderActivityId);

                GroupingParameters gpXuLy = new GroupingParameters();
                gpXuLy.Fields = listGroupField;
                gpXuLy.Limit = 1;
                gpXuLy.Main = true;
                gpXuLy.OrderBy = listSortOrderNgayXuLy;
                queryOptionXuLy.Grouping = gpXuLy;

                string whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND  PhongBanXuLyTruocId: {2} AND -PhongBanXuLyId : {2} AND -HanhDong:4) OR (LDate:[{0} TO {1}] AND  PhongBanXuLyId:{2} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), curPhongBanXuLyId);
                solrQuery = new SolrQuery(whereClauseXuLy);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curPhongBanXuLyId)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        //for (int i = 0; i< listKhieuNaiInfo.Count;i++ )
                        //{
                        //    if(listKhieuNaiInfo[i].KhieuNaiId == 328027)
                        //    {

                        //    }
                        //}

                        row["SLDaXuLyLuyKe"] = listKhieuNaiInfo.Count;
                        row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;

                        // Tính số lượng tiếp nhận đã xử lý trong kỳ lấy báo cáo.
                        row["SLDaXuLyTiepNhan"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTiepNhan.Contains(obj.KhieuNaiId); }).Count;

                        //row["SLChuyenXuLy"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban; }).Count;
                        //row["SLChuyenPhanHoi"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; }).Count;
                        //row["SLChuyenNgangHang"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng; }).Count;
                    }
                }

                // Số lượng tạo mới                    
                QueryOptions queryOptionTaoMoi = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamTaoMoi = new Dictionary<string, string>();
                extraParamTaoMoi.Add("fl", @"Id");
                queryOptionTaoMoi.ExtraParams = extraParamTaoMoi;
                queryOptionTaoMoi.Start = 0;
                queryOptionTaoMoi.Rows = int.MaxValue;

                string whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanTiepNhanId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), curPhongBanXuLyId);
                solrQuery = new SolrQuery(whereClauseTaoMoi);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTaoMoi);

                row["SLTaoMoi"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

                // Số lượng tạo đã đóng                   
                QueryOptions queryOptionDaDong = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamDaDong = new Dictionary<string, string>();
                extraParamDaDong.Add("fl", @"Id");
                queryOptionDaDong.ExtraParams = extraParamDaDong;
                queryOptionDaDong.Start = 0;
                queryOptionDaDong.Rows = int.MaxValue;

                string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND PhongBanXuLyId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), curPhongBanXuLyId);
                solrQuery = new SolrQuery(whereClauseDaDong);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionDaDong);

                row["SLDaDong"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;
            }

            return dtPhongBan;
        }

        #endregion

        #region Báo cáo TTTC

        ///// <summary>
        ///// Author : Phi Hoang Hai
        ///// Created date : 26/10/2013
        ///// Todo : Báo cáo tổng hợp của trung tâm tính cước
        ///// </summary>
        ///// <param name="trungTamId"></param>
        ///// <param name="phongBanId">
        /////     = -1 : Thống kê toàn bộ khiếu nại của các phòng ban
        /////     != -1 : Thống kê khiếu nại của phòng ban truyền vào
        ///// </param>
        ///// <param name="fromDate"></param>
        ///// <param name="toDate"></param>
        ///// <returns></returns>
        //public DataTable BaoCaoTongHopTTTC_Solr(int trungTamId, int phongBanId, int fromDate, int toDate)
        //{
        //    DataTable dtPhongBan = this.BaoCaoTongHopPAKNTheoPhongBanTTTC_Solr(trungTamId, phongBanId, fromDate, toDate);

        //    if (dtPhongBan != null && dtPhongBan.Rows.Count > 0)
        //    {
        //        DataRow row = dtPhongBan.NewRow();
        //        int soLuongTiepNhan = 0;
        //        int soLuongDaXuLy = 0;
        //        int soLuongTonDong = 0;
        //        int soLuongQuaHan = 0;

        //        foreach (DataRow curRow in dtPhongBan.Rows)
        //        {
        //            soLuongTiepNhan += ConvertUtility.ToInt32(curRow["SLTiepNhan"], 0);
        //            soLuongDaXuLy += ConvertUtility.ToInt32(curRow["SLDaXuLy"], 0);
        //            soLuongTonDong += ConvertUtility.ToInt32(curRow["SLTonDong"], 0);
        //            soLuongQuaHan += ConvertUtility.ToInt32(curRow["SLQuaHan"], 0);
        //        }

        //        row["SLTiepNhan"] = soLuongTiepNhan;
        //        row["SLDaXuLy"] = soLuongDaXuLy;
        //        row["SLTonDong"] = soLuongTonDong;
        //        row["SLQuaHan"] = soLuongQuaHan;

        //        dtPhongBan.Rows.Clear();
        //        dtPhongBan.Rows.Add(row);
        //    }

        //    return dtPhongBan;
        //}

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 12/08/2014
        /// Todo :  Báo cáo tổng hợp của cả đối tác
        /// </summary>
        /// <param name="trungTamId"></param>        
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoDoiTac_Solr(int doiTacId, DateTime fromDate, DateTime toDate)
        {
            DoiTacInfo doiTacInfo = new DoiTacImpl().GetInfo(doiTacId);
            string tenDoiTac = doiTacInfo != null ? doiTacInfo.TenDoiTac : string.Empty;
            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtDoiTac = new DataTable();
            dtDoiTac.Columns.Add("DoiTacId");
            dtDoiTac.Columns.Add("TenDoiTac");
            dtDoiTac.Columns.Add("SLTonDongKyTruoc");
            dtDoiTac.Columns.Add("SLTiepNhan");
            dtDoiTac.Columns.Add("SLDaXuLy");
            dtDoiTac.Columns.Add("SLQuaHanDaXuLy");
            dtDoiTac.Columns.Add("SLTonDong");
            dtDoiTac.Columns.Add("SLQuaHanTonDong");

            DataRow row = dtDoiTac.NewRow();
            row["DoiTacId"] = doiTacId;
            row["TenDoiTac"] = tenDoiTac;
            row["SLTonDongKyTruoc"] = 0;
            row["SLTiepNhan"] = 0;
            row["SLDaXuLy"] = 0;
            row["SLQuaHanDaXuLy"] = 0;
            row["SLTonDong"] = 0;
            row["SLQuaHanTonDong"] = 0;
            dtDoiTac.Rows.Add(row);

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, DoiTacXuLyId");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND (KhieuNai_NgayDongKN : [{1} TO *])", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            List<int> listKhieuNaiIdTonDongKyTruoc = new List<int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return obj.DoiTacXuLyId != doiTacId;
                });
                dtDoiTac.Rows[0]["SLTonDongKyTruoc"] = listKhieuNaiInfo.Count;

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            List<int> listKhieuNaiIdTonDong = new List<int>();

            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, DoiTacXuLyId");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            //string whereClauseTonDong = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(nextToDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN:[{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            if (listKhieuNaiInfo != null)
            {
                //List<KhieuNai_ReportInfo> listKhieuNaiTonDong = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN && obj.DoiTacXuLyId == doiTacId; });
                //listKhieuNaiInfo = null;

                //int numberDelete = listKhieuNaiInfo.RemoveAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Đóng_KN || obj.DoiTacXuLyId != doiTacId; });
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.DoiTacXuLyId != doiTacId; });

                if (listKhieuNaiInfo != null)
                {
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId);
                    }

                    dtDoiTac.Rows[0]["SLTonDong"] = listKhieuNaiInfo.Count;
                    dtDoiTac.Rows[0]["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    {
                        //return (obj.LDate <= toDate && obj.LDate >= obj.NgayQuaHan) || (obj.LDate > toDate && toDate >= obj.NgayQuaHan);
                        return toDate >= obj.NgayQuaHan;
                    }).Count;
                }
            }

            // Số lượng tiếp nhận
            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId");
            queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;


            SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
            List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
            listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

            GroupingParameters gpTiepNhan = new GroupingParameters();
            gpTiepNhan.Fields = listGroupField;
            gpTiepNhan.Limit = 1;
            gpTiepNhan.Main = true;
            gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
            queryOptionTiepNhan.Grouping = gpTiepNhan;

            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId: {2} AND HanhDong:(2 3)", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), doiTacId);
            solrQuery = new SolrQuery(whereClauseTiepNhan);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                {
                    int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                    { return listKhieuNaiIdTonDongKyTruoc.Contains(obj.KhieuNaiId); });
                }

                dtDoiTac.Rows[0]["SLTiepNhan"] = listKhieuNaiInfo.Count;
            }

            // Số lượng đã xử lý
            // Số lượng quá hạn đã xử lý
            QueryOptions queryOptionXuLy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamXuLy = new Dictionary<string, string>();
            extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, NgayQuaHan_PhongBanXuLyTruoc, LDate");
            queryOptionXuLy.ExtraParams = extraParamXuLy;
            queryOptionXuLy.Start = 0;
            queryOptionXuLy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
            listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

            GroupingParameters gpXuLy = new GroupingParameters();
            gpXuLy.Fields = listGroupField;
            gpXuLy.Limit = 1;
            gpXuLy.Main = true;
            gpXuLy.OrderBy = listSortOrderNgayXuLy;
            queryOptionXuLy.Grouping = gpXuLy;

            string whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyTruocId: {2} AND -DoiTacXuLyId : {2}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId);
            solrQuery = new SolrQuery(whereClauseXuLy);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return listKhieuNaiIdTonDong.Contains(obj.KhieuNaiId); });
                if (listKhieuNaiInfo != null)
                {
                    dtDoiTac.Rows[0]["SLDaXuLy"] = listKhieuNaiInfo.Count;
                    dtDoiTac.Rows[0]["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;
                }
            }

            return dtDoiTac;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 16/04/2015
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="loaiKhieuNai_NhomId"></param>
        /// <param name="loaiKhieuNaiId"></param>
        /// <param name="linhVucChungId"></param>
        /// <param name="linhVucConId"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoDoiTac_Solr(int doiTacId, DateTime fromDate, DateTime toDate, int loaiKhieuNai_NhomId, int loaiKhieuNaiId, int linhVucChungId, int linhVucConId)
        {
            DoiTacInfo doiTacInfo = new DoiTacImpl().GetInfo(doiTacId);
            string tenDoiTac = doiTacInfo != null ? doiTacInfo.TenDoiTac : string.Empty;
            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            string whereClauseLoaiKhieuNai = string.Empty;
            if (loaiKhieuNai_NhomId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format(" AND LoaiKhieuNai_NhomId:{0}", loaiKhieuNai_NhomId);
            }
            if (loaiKhieuNaiId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LoaiKhieuNaiId:{1}", whereClauseLoaiKhieuNai, loaiKhieuNaiId);
            }
            if (linhVucChungId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucChungId:{1}", whereClauseLoaiKhieuNai, linhVucChungId);
            }
            if (linhVucConId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucConId:{1}", whereClauseLoaiKhieuNai, linhVucConId);
            }

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtDoiTac = new DataTable();
            dtDoiTac.Columns.Add("DoiTacId");
            dtDoiTac.Columns.Add("TenDoiTac");
            dtDoiTac.Columns.Add("SLTonDongKyTruoc");
            dtDoiTac.Columns.Add("SLTiepNhan");
            dtDoiTac.Columns.Add("SLDaXuLy");
            dtDoiTac.Columns.Add("SLQuaHanDaXuLy");
            dtDoiTac.Columns.Add("SLTonDong");
            dtDoiTac.Columns.Add("SLQuaHanTonDong");

            DataRow row = dtDoiTac.NewRow();
            row["DoiTacId"] = doiTacId;
            row["TenDoiTac"] = tenDoiTac;
            row["SLTonDongKyTruoc"] = 0;
            row["SLTiepNhan"] = 0;
            row["SLDaXuLy"] = 0;
            row["SLQuaHanDaXuLy"] = 0;
            row["SLTonDong"] = 0;
            row["SLQuaHanTonDong"] = 0;
            dtDoiTac.Rows.Add(row);

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, DoiTacXuLyId");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND (KhieuNai_NgayDongKN : [{1} TO *]) {2}", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate), whereClauseLoaiKhieuNai);
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            List<int> listKhieuNaiIdTonDongKyTruoc = new List<int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return obj.DoiTacXuLyId != doiTacId;
                });
                dtDoiTac.Rows[0]["SLTonDongKyTruoc"] = listKhieuNaiInfo.Count;

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            List<int> listKhieuNaiIdTonDong = new List<int>();

            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, DoiTacXuLyId");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            //string whereClauseTonDong = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(nextToDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN:[{1} TO *] {2}", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate), whereClauseLoaiKhieuNai);
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            if (listKhieuNaiInfo != null)
            {
                //List<KhieuNai_ReportInfo> listKhieuNaiTonDong = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN && obj.DoiTacXuLyId == doiTacId; });
                //listKhieuNaiInfo = null;

                //int numberDelete = listKhieuNaiInfo.RemoveAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Đóng_KN || obj.DoiTacXuLyId != doiTacId; });
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.DoiTacXuLyId != doiTacId; });

                if (listKhieuNaiInfo != null)
                {
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId);
                    }

                    dtDoiTac.Rows[0]["SLTonDong"] = listKhieuNaiInfo.Count;
                    dtDoiTac.Rows[0]["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    {
                        //return (obj.LDate <= toDate && obj.LDate >= obj.NgayQuaHan) || (obj.LDate > toDate && toDate >= obj.NgayQuaHan);
                        return toDate >= obj.NgayQuaHan;
                    }).Count;
                }
            }

            // Số lượng tiếp nhận
            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId");
            queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;


            SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
            List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
            listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

            GroupingParameters gpTiepNhan = new GroupingParameters();
            gpTiepNhan.Fields = listGroupField;
            gpTiepNhan.Limit = 1;
            gpTiepNhan.Main = true;
            gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
            queryOptionTiepNhan.Grouping = gpTiepNhan;

            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId: {2} AND HanhDong:(2 3) {3}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), doiTacId, whereClauseLoaiKhieuNai);
            solrQuery = new SolrQuery(whereClauseTiepNhan);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                {
                    int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                    { return listKhieuNaiIdTonDongKyTruoc.Contains(obj.KhieuNaiId); });
                }

                dtDoiTac.Rows[0]["SLTiepNhan"] = listKhieuNaiInfo.Count;
            }

            // Số lượng đã xử lý
            // Số lượng quá hạn đã xử lý
            QueryOptions queryOptionXuLy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamXuLy = new Dictionary<string, string>();
            extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, NgayQuaHan_PhongBanXuLyTruoc, LDate");
            queryOptionXuLy.ExtraParams = extraParamXuLy;
            queryOptionXuLy.Start = 0;
            queryOptionXuLy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
            listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

            GroupingParameters gpXuLy = new GroupingParameters();
            gpXuLy.Fields = listGroupField;
            gpXuLy.Limit = 1;
            gpXuLy.Main = true;
            gpXuLy.OrderBy = listSortOrderNgayXuLy;
            queryOptionXuLy.Grouping = gpXuLy;

            string whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyTruocId: {2} AND -DoiTacXuLyId : {2} {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId, whereClauseLoaiKhieuNai);
            solrQuery = new SolrQuery(whereClauseXuLy);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return listKhieuNaiIdTonDong.Contains(obj.KhieuNaiId); });
                if (listKhieuNaiInfo != null)
                {
                    dtDoiTac.Rows[0]["SLDaXuLy"] = listKhieuNaiInfo.Count;
                    dtDoiTac.Rows[0]["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;
                }
            }

            return dtDoiTac;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 15/08/2014
        /// Todo : Thống kê số lượng khiếu nại theo các phòng ban của đối tác
        ///     - Số lượng tồn trước kỳ
        ///     - Số lượng tiếp nhận
        ///     - Số lượng xử lý
        ///     - Số lượng xử lý quá hạn
        ///     - Số lượng tồn
        ///     - Số lượng tồn quá hạn
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="listPhongBanId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoPhongBanDoiTac_Solr(int doiTacId, List<int> listPhongBanId, DateTime fromDate, DateTime toDate)
        {
            if (listPhongBanId == null || listPhongBanId.Count == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtPhongBan = new DataTable();
            dtPhongBan.Columns.Add("PhongBanId");
            dtPhongBan.Columns.Add("TenPhongBan");
            dtPhongBan.Columns.Add("SLTonDongKyTruoc");
            dtPhongBan.Columns.Add("SLTiepNhan");
            dtPhongBan.Columns.Add("SLDaXuLy");
            dtPhongBan.Columns.Add("SLQuaHanDaXuLy");
            dtPhongBan.Columns.Add("SLTonDong");
            dtPhongBan.Columns.Add("SLQuaHanTonDong");

            for (int i = 0; i < listPhongBanId.Count; i++)
            {
                DataRow row = dtPhongBan.NewRow();
                row["PhongBanId"] = listPhongBanId[i];
                row["TenPhongBan"] = "";
                row["SLTonDongKyTruoc"] = 0;
                row["SLTiepNhan"] = 0;
                row["SLDaXuLy"] = 0;
                row["SLQuaHanDaXuLy"] = 0;
                row["SLTonDong"] = 0;
                row["SLQuaHanTonDong"] = 0;
                dtPhongBan.Rows.Add(row);
            }

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, PhongBanXuLyId");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            //string whereClauseTonDongKyTruoc = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(previousFromDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            Dictionary<int, int> listKhieuNaiIdTonDongKyTruoc = new Dictionary<int, int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return !listPhongBanId.Contains(obj.PhongBanXuLyId);
                });

                foreach (DataRow row in dtPhongBan.Rows)
                {
                    int curPhongBanXuLyId = ConvertUtility.ToInt32(row["PhongBanId"]);
                    row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.PhongBanXuLyId == curPhongBanXuLyId; }).Count;
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].PhongBanXuLyId);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, DoiTacXuLyId, PhongBanXuLyId");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            //string whereClauseTonDong = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(nextToDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            Dictionary<int, int> listKhieuNaiIdTonDong = new Dictionary<int, int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return !listPhongBanId.Contains(obj.PhongBanXuLyId); });

                if (listKhieuNaiInfo != null)
                {
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].PhongBanXuLyId);
                    }

                    foreach (DataRow row in dtPhongBan.Rows)
                    {
                        int curPhongBanXuLyId = ConvertUtility.ToInt32(row["PhongBanId"]);
                        row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.PhongBanXuLyId == curPhongBanXuLyId; }).Count;
                        row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            return toDate >= obj.NgayQuaHan && obj.PhongBanXuLyId == curPhongBanXuLyId;
                        }).Count;

                        //if (curPhongBanXuLyId == 50)
                        //{
                        //    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                        //    {
                        //        if (listKhieuNaiInfo[i].PhongBanXuLyId == curPhongBanXuLyId)
                        //        {
                        //            if (toDate >= listKhieuNaiInfo[i].NgayQuaHan)
                        //            {

                        //            }
                        //        }
                        //    }
                        //}
                    }
                }
            }

            foreach (DataRow row in dtPhongBan.Rows)
            {
                int curPhongBanXuLyId = ConvertUtility.ToInt32(row["PhongBanId"]);

                // Số lượng tiếp nhận
                QueryOptions queryOptionTiepNhan = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId");
                queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
                queryOptionTiepNhan.Start = 0;
                queryOptionTiepNhan.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
                List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
                listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

                GroupingParameters gpTiepNhan = new GroupingParameters();
                gpTiepNhan.Fields = listGroupField;
                gpTiepNhan.Limit = 1;
                gpTiepNhan.Main = true;
                gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
                queryOptionTiepNhan.Grouping = gpTiepNhan;

                string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId: {2} AND HanhDong:(2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), curPhongBanXuLyId);
                solrQuery = new SolrQuery(whereClauseTiepNhan);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curPhongBanXuLyId)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLTiepNhan"] = listKhieuNaiInfo.Count;
                    }
                }

                // Số lượng đã xử lý
                // Số lượng quá hạn đã xử lý
                QueryOptions queryOptionXuLy = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamXuLy = new Dictionary<string, string>();
                extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan_PhongBanXuLyTruoc");
                queryOptionXuLy.ExtraParams = extraParamXuLy;
                queryOptionXuLy.Start = 0;
                queryOptionXuLy.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
                listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

                GroupingParameters gpXuLy = new GroupingParameters();
                gpXuLy.Fields = listGroupField;
                gpXuLy.Limit = 1;
                gpXuLy.Main = true;
                gpXuLy.OrderBy = listSortOrderNgayXuLy;
                queryOptionXuLy.Grouping = gpXuLy;

                string whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId: {2} AND -PhongBanXuLyId : {2}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), curPhongBanXuLyId);
                solrQuery = new SolrQuery(whereClauseXuLy);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curPhongBanXuLyId)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLDaXuLy"] = listKhieuNaiInfo.Count;
                        row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;
                    }
                }
            }

            return dtPhongBan;
        }

        /// <summary>
        /// Author  : Phi Hoang Hai
        /// Created date : 17/04/2015
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="listPhongBanId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="loaiKhieuNai_NhomId"></param>
        /// <param name="loaiKhieuNaiId"></param>
        /// <param name="linhVucChungId"></param>
        /// <param name="linhVucConId"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoPhongBanDoiTac_Solr(int doiTacId, List<int> listPhongBanId, DateTime fromDate, DateTime toDate, int loaiKhieuNai_NhomId, int loaiKhieuNaiId, int linhVucChungId, int linhVucConId)
        {
            if (listPhongBanId == null || listPhongBanId.Count == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            string whereClauseLoaiKhieuNai = string.Empty;
            if (loaiKhieuNai_NhomId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format(" AND LoaiKhieuNai_NhomId:{0}", loaiKhieuNai_NhomId);
            }
            if (loaiKhieuNaiId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LoaiKhieuNaiId:{1}", whereClauseLoaiKhieuNai, loaiKhieuNaiId);
            }
            if (linhVucChungId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucChungId:{1}", whereClauseLoaiKhieuNai, linhVucChungId);
            }
            if (linhVucConId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucConId:{1}", whereClauseLoaiKhieuNai, linhVucConId);
            }

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtPhongBan = new DataTable();
            dtPhongBan.Columns.Add("PhongBanId");
            dtPhongBan.Columns.Add("TenPhongBan");
            dtPhongBan.Columns.Add("SLTonDongKyTruoc");
            dtPhongBan.Columns.Add("SLTiepNhan");
            dtPhongBan.Columns.Add("SLDaXuLy");
            dtPhongBan.Columns.Add("SLQuaHanDaXuLy");
            dtPhongBan.Columns.Add("SLTonDong");
            dtPhongBan.Columns.Add("SLQuaHanTonDong");

            for (int i = 0; i < listPhongBanId.Count; i++)
            {
                DataRow row = dtPhongBan.NewRow();
                row["PhongBanId"] = listPhongBanId[i];
                row["TenPhongBan"] = "";
                row["SLTonDongKyTruoc"] = 0;
                row["SLTiepNhan"] = 0;
                row["SLDaXuLy"] = 0;
                row["SLQuaHanDaXuLy"] = 0;
                row["SLTonDong"] = 0;
                row["SLQuaHanTonDong"] = 0;
                dtPhongBan.Rows.Add(row);
            }

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, PhongBanXuLyId");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            //string whereClauseTonDongKyTruoc = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(previousFromDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *] {2}", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate), whereClauseLoaiKhieuNai);
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            Dictionary<int, int> listKhieuNaiIdTonDongKyTruoc = new Dictionary<int, int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return !listPhongBanId.Contains(obj.PhongBanXuLyId);
                });

                foreach (DataRow row in dtPhongBan.Rows)
                {
                    int curPhongBanXuLyId = ConvertUtility.ToInt32(row["PhongBanId"]);
                    row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.PhongBanXuLyId == curPhongBanXuLyId; }).Count;
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].PhongBanXuLyId);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, DoiTacXuLyId, PhongBanXuLyId");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            //string whereClauseTonDong = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(nextToDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *] {2}", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate), whereClauseLoaiKhieuNai);
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            Dictionary<int, int> listKhieuNaiIdTonDong = new Dictionary<int, int>();

            if (listKhieuNaiInfo != null)
            {
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return !listPhongBanId.Contains(obj.PhongBanXuLyId); });

                if (listKhieuNaiInfo != null)
                {
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].PhongBanXuLyId);
                    }

                    foreach (DataRow row in dtPhongBan.Rows)
                    {
                        int curPhongBanXuLyId = ConvertUtility.ToInt32(row["PhongBanId"]);
                        row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.PhongBanXuLyId == curPhongBanXuLyId; }).Count;
                        row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            return toDate >= obj.NgayQuaHan && obj.PhongBanXuLyId == curPhongBanXuLyId;
                        }).Count;

                        //if (curPhongBanXuLyId == 50)
                        //{
                        //    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                        //    {
                        //        if (listKhieuNaiInfo[i].PhongBanXuLyId == curPhongBanXuLyId)
                        //        {
                        //            if (toDate >= listKhieuNaiInfo[i].NgayQuaHan)
                        //            {

                        //            }
                        //        }
                        //    }
                        //}
                    }
                }
            }

            foreach (DataRow row in dtPhongBan.Rows)
            {
                int curPhongBanXuLyId = ConvertUtility.ToInt32(row["PhongBanId"]);

                // Số lượng tiếp nhận
                QueryOptions queryOptionTiepNhan = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId");
                queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
                queryOptionTiepNhan.Start = 0;
                queryOptionTiepNhan.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
                List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
                listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

                GroupingParameters gpTiepNhan = new GroupingParameters();
                gpTiepNhan.Fields = listGroupField;
                gpTiepNhan.Limit = 1;
                gpTiepNhan.Main = true;
                gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
                queryOptionTiepNhan.Grouping = gpTiepNhan;

                string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId: {2} AND HanhDong:(2 3) {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), curPhongBanXuLyId, whereClauseLoaiKhieuNai);
                solrQuery = new SolrQuery(whereClauseTiepNhan);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curPhongBanXuLyId)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLTiepNhan"] = listKhieuNaiInfo.Count;
                    }
                }

                // Số lượng đã xử lý
                // Số lượng quá hạn đã xử lý
                QueryOptions queryOptionXuLy = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamXuLy = new Dictionary<string, string>();
                extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan_PhongBanXuLyTruoc");
                queryOptionXuLy.ExtraParams = extraParamXuLy;
                queryOptionXuLy.Start = 0;
                queryOptionXuLy.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
                listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

                GroupingParameters gpXuLy = new GroupingParameters();
                gpXuLy.Fields = listGroupField;
                gpXuLy.Limit = 1;
                gpXuLy.Main = true;
                gpXuLy.OrderBy = listSortOrderNgayXuLy;
                queryOptionXuLy.Grouping = gpXuLy;

                string whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId: {2} AND -PhongBanXuLyId : {2} {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), curPhongBanXuLyId, whereClauseLoaiKhieuNai);
                solrQuery = new SolrQuery(whereClauseXuLy);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curPhongBanXuLyId)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLDaXuLy"] = listKhieuNaiInfo.Count;
                        row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;
                    }
                }
            }

            return dtPhongBan;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 16/08/2014
        /// Todo : Thống kê số lượng khiếu nại theo người dùng
        /// </summary>
        /// <param name="phongBanId"></param>
        /// <param name="listTenTruyCap"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoNguoiDungCuaPhongBan_Solr(int phongBanId, DateTime fromDate, DateTime toDate)
        {
            List<NguoiSuDungInfo> listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanId);
            if (listNguoiSuDung == null || listNguoiSuDung.Count == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtNguoiDung = new DataTable();
            dtNguoiDung.Columns.Add("TenTruyCap");
            dtNguoiDung.Columns.Add("TenDayDu");
            dtNguoiDung.Columns.Add("SLTonDongKyTruoc");
            dtNguoiDung.Columns.Add("SLTiepNhan");
            dtNguoiDung.Columns.Add("SLDaXuLy");
            dtNguoiDung.Columns.Add("SLQuaHanDaXuLy");
            dtNguoiDung.Columns.Add("SLTonDong");
            dtNguoiDung.Columns.Add("SLQuaHanTonDong");

            DataRow rowNguoiDung = dtNguoiDung.NewRow();
            rowNguoiDung["TenTruyCap"] = "";
            rowNguoiDung["TenDayDu"] = "Chưa có người xử lý";
            rowNguoiDung["SLTonDongKyTruoc"] = 0;
            rowNguoiDung["SLTiepNhan"] = 0;
            rowNguoiDung["SLDaXuLy"] = 0;
            rowNguoiDung["SLQuaHanDaXuLy"] = 0;
            rowNguoiDung["SLTonDong"] = 0;
            rowNguoiDung["SLQuaHanTonDong"] = 0;
            dtNguoiDung.Rows.Add(rowNguoiDung);

            for (int i = 0; i < listNguoiSuDung.Count; i++)
            {
                DataRow row = dtNguoiDung.NewRow();
                row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
                row["TenDayDu"] = listNguoiSuDung[i].TenDayDu;
                row["SLTonDongKyTruoc"] = 0;
                row["SLTiepNhan"] = 0;
                row["SLDaXuLy"] = 0;
                row["SLQuaHanDaXuLy"] = 0;
                row["SLTonDong"] = 0;
                row["SLQuaHanTonDong"] = 0;
                dtNguoiDung.Rows.Add(row);
            }

            DataRow rowNguoiDung_0 = dtNguoiDung.Rows[0];

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, NguoiXuLy, PhongBanXuLyId, NgayTiepNhan_NguoiXuLy");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            //string whereClauseTonDongKyTruoc = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(previousFromDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            Dictionary<int, string> listKhieuNaiIdTonDongKyTruoc = new Dictionary<int, string>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return obj.PhongBanXuLyId != phongBanId;
                });

                rowNguoiDung_0["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.NgayTiepNhan_NguoiXuLy > previousFromDate; }).Count;

                foreach (DataRow row in dtNguoiDung.Rows)
                {
                    string tenTruyCap = row["TenTruyCap"].ToString();
                    row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.PhongBanXuLyId == phongBanId && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, PhongBanXuLyId, NguoiXuLy, NgayTiepNhan_NguoiXuLy");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            Dictionary<int, string> listKhieuNaiIdTonDong = new Dictionary<int, string>();

            if (listKhieuNaiInfo != null)
            {
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.PhongBanXuLyId != phongBanId || obj.NgayTiepNhan_NguoiXuLy > toDate; });

                if (listKhieuNaiInfo != null)
                {
                    rowNguoiDung_0["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate; }).Count;
                    rowNguoiDung_0["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate && toDate >= obj.NgayQuaHan; }).Count;

                    foreach (DataRow row in dtNguoiDung.Rows)
                    {
                        string tenTruyCap = row["TenTruyCap"].ToString();
                        row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                        row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate);
                        }).Count;
                    }

                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
                    }
                }
            }

            foreach (DataRow row in dtNguoiDung.Rows)
            {
                string tenTruyCap = row["TenTruyCap"].ToString();
                string tenTruyCapSolr = tenTruyCap;
                if (tenTruyCapSolr.Trim().Length == 0)
                {
                    tenTruyCapSolr = "\"\"";
                }

                // Số lượng tiếp nhận
                QueryOptions queryOptionTiepNhan = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId, NguoiXuLy, NgayTiepNhan_NguoiXuLy");
                queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
                queryOptionTiepNhan.Start = 0;
                queryOptionTiepNhan.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
                List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
                listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

                GroupingParameters gpTiepNhan = new GroupingParameters();
                gpTiepNhan.Fields = listGroupField;
                gpTiepNhan.Limit = 1;
                gpTiepNhan.Main = true;
                gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
                queryOptionTiepNhan.Grouping = gpTiepNhan;

                string whereClauseTiepNhan = string.Empty; //string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                if (tenTruyCap.Length == 0)
                {
                    whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2} AND (NgayTiepNhan_NguoiXuLy:[{3} TO *])",
                                            ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                                            phongBanId, ConvertUtility.ConvertDateTimeToSolr(nextToDate));
                }
                else
                {
                    whereClauseTiepNhan = string.Format("NgayTiepNhan_NguoiXuLy:[{0} TO {1}] AND PhongBanXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                }
                solrQuery = new SolrQuery(whereClauseTiepNhan);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLTiepNhan"] = listKhieuNaiInfo.Count;
                    }
                }

                // Số lượng đã xử lý
                // Số lượng quá hạn đã xử lý
                QueryOptions queryOptionXuLy = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamXuLy = new Dictionary<string, string>();
                extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan_PhongBanXuLyTruoc");
                queryOptionXuLy.ExtraParams = extraParamXuLy;
                queryOptionXuLy.Start = 0;
                queryOptionXuLy.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
                listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

                GroupingParameters gpXuLy = new GroupingParameters();
                gpXuLy.Fields = listGroupField;
                gpXuLy.Limit = 1;
                gpXuLy.Main = true;
                gpXuLy.OrderBy = listSortOrderNgayXuLy;
                queryOptionXuLy.Grouping = gpXuLy;

                string whereClauseXuLy = string.Empty;// string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                if (tenTruyCap.Length == 0)
                {
                    //whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                }
                else
                {
                    //whereClauseXuLy = string.Format("NgayTiepNhan_NguoiXuLyTruoc:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    whereClauseXuLy = string.Format("NgayTiepNhan_NguoiXuLyTruoc:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                }

                solrQuery = new SolrQuery(whereClauseXuLy);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLDaXuLy"] = listKhieuNaiInfo.Count;
                        row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;
                    }
                }
            }

            return dtNguoiDung;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 17/04/2015
        /// </summary>
        /// <param name="phongBanId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="loaiKhieuNai_NhomId"></param>
        /// <param name="loaiKhieuNaiId"></param>
        /// <param name="linhVucChungId"></param>
        /// <param name="linhVucConId"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoNguoiDungCuaPhongBan_Solr(int phongBanId, DateTime fromDate, DateTime toDate, int loaiKhieuNai_NhomId, int loaiKhieuNaiId, int linhVucChungId, int linhVucConId)
        {
            List<NguoiSuDungInfo> listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanId);
            if (listNguoiSuDung == null || listNguoiSuDung.Count == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            string whereClauseLoaiKhieuNai = string.Empty;
            if (loaiKhieuNai_NhomId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format(" AND LoaiKhieuNai_NhomId:{0}", loaiKhieuNai_NhomId);
            }
            if (loaiKhieuNaiId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LoaiKhieuNaiId:{1}", whereClauseLoaiKhieuNai, loaiKhieuNaiId);
            }
            if (linhVucChungId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucChungId:{1}", whereClauseLoaiKhieuNai, linhVucChungId);
            }
            if (linhVucConId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucConId:{1}", whereClauseLoaiKhieuNai, linhVucConId);
            }

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtNguoiDung = new DataTable();
            dtNguoiDung.Columns.Add("TenTruyCap");
            dtNguoiDung.Columns.Add("TenDayDu");
            dtNguoiDung.Columns.Add("SLTonDongKyTruoc");
            dtNguoiDung.Columns.Add("SLTiepNhan");
            dtNguoiDung.Columns.Add("SLDaXuLy");
            dtNguoiDung.Columns.Add("SLQuaHanDaXuLy");
            dtNguoiDung.Columns.Add("SLTonDong");
            dtNguoiDung.Columns.Add("SLQuaHanTonDong");

            DataRow rowNguoiDung = dtNguoiDung.NewRow();
            rowNguoiDung["TenTruyCap"] = "";
            rowNguoiDung["TenDayDu"] = "Chưa có người xử lý";
            rowNguoiDung["SLTonDongKyTruoc"] = 0;
            rowNguoiDung["SLTiepNhan"] = 0;
            rowNguoiDung["SLDaXuLy"] = 0;
            rowNguoiDung["SLQuaHanDaXuLy"] = 0;
            rowNguoiDung["SLTonDong"] = 0;
            rowNguoiDung["SLQuaHanTonDong"] = 0;
            dtNguoiDung.Rows.Add(rowNguoiDung);

            for (int i = 0; i < listNguoiSuDung.Count; i++)
            {
                DataRow row = dtNguoiDung.NewRow();
                row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
                row["TenDayDu"] = listNguoiSuDung[i].TenDayDu;
                row["SLTonDongKyTruoc"] = 0;
                row["SLTiepNhan"] = 0;
                row["SLDaXuLy"] = 0;
                row["SLQuaHanDaXuLy"] = 0;
                row["SLTonDong"] = 0;
                row["SLQuaHanTonDong"] = 0;
                dtNguoiDung.Rows.Add(row);
            }

            DataRow rowNguoiDung_0 = dtNguoiDung.Rows[0];

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, NguoiXuLy, PhongBanXuLyId, NgayTiepNhan_NguoiXuLy");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            //string whereClauseTonDongKyTruoc = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(previousFromDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *] {2}", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate), whereClauseLoaiKhieuNai);
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            //List<KhieuNai_ReportInfo> listKhieuNaiTonKyTruoc = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);
            Dictionary<int, string> listKhieuNaiIdTonDongKyTruoc = new Dictionary<int, string>();

            if (listKhieuNaiInfo != null)
            {
                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return obj.PhongBanXuLyId != phongBanId || (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy < DateTime.MaxValue);
                });

                rowNguoiDung_0["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.NgayTiepNhan_NguoiXuLy > previousFromDate; }).Count;

                foreach (DataRow row in dtNguoiDung.Rows)
                {
                    string tenTruyCap = row["TenTruyCap"].ToString();
                    row["SLTonDongKyTruoc"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.PhongBanXuLyId == phongBanId && obj.NguoiXuLy == tenTruyCap; }).Count;
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, PhongBanXuLyId, NguoiXuLy, NgayTiepNhan_NguoiXuLy");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN : [{1} TO *] {2}", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate), whereClauseLoaiKhieuNai);
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            Dictionary<int, string> listKhieuNaiIdTonDong = new Dictionary<int, string>();

            if (listKhieuNaiInfo != null)
            {
                int numberDelete = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return obj.PhongBanXuLyId != phongBanId || obj.NgayTiepNhan_NguoiXuLy > toDate; });

                if (listKhieuNaiInfo != null)
                {
                    rowNguoiDung_0["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate; }).Count;
                    rowNguoiDung_0["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NgayTiepNhan_NguoiXuLy > toDate && toDate >= obj.NgayQuaHan; }).Count;

                    foreach (DataRow row in dtNguoiDung.Rows)
                    {
                        string tenTruyCap = row["TenTruyCap"].ToString();
                        row["SLTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate); }).Count;
                        row["SLQuaHanTonDong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            return toDate >= obj.NgayQuaHan && obj.NguoiXuLy == tenTruyCap && (obj.NgayTiepNhan_NguoiXuLy >= fromDate && obj.NgayTiepNhan_NguoiXuLy <= toDate);
                        }).Count;
                    }

                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
                    }
                }
            }

            foreach (DataRow row in dtNguoiDung.Rows)
            {
                string tenTruyCap = row["TenTruyCap"].ToString();
                string tenTruyCapSolr = tenTruyCap;
                if (tenTruyCapSolr.Trim().Length == 0)
                {
                    tenTruyCapSolr = "\"\"";
                }

                // Số lượng tiếp nhận
                QueryOptions queryOptionTiepNhan = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId, NguoiXuLy, NgayTiepNhan_NguoiXuLy");
                queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
                queryOptionTiepNhan.Start = 0;
                queryOptionTiepNhan.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
                List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
                listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

                GroupingParameters gpTiepNhan = new GroupingParameters();
                gpTiepNhan.Fields = listGroupField;
                gpTiepNhan.Limit = 1;
                gpTiepNhan.Main = true;
                gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
                queryOptionTiepNhan.Grouping = gpTiepNhan;

                string whereClauseTiepNhan = string.Empty; //string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(1 2 3)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                if (tenTruyCap.Length == 0)
                {
                    whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2} AND (NgayTiepNhan_NguoiXuLy:[{3} TO *]) {4}",
                                            ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true),
                                            phongBanId, ConvertUtility.ConvertDateTimeToSolr(nextToDate), whereClauseLoaiKhieuNai);
                }
                else
                {
                    whereClauseTiepNhan = string.Format("NgayTiepNhan_NguoiXuLy:[{0} TO {1}] AND PhongBanXuLyId : {2} AND NguoiXuLy: {3} AND HanhDong:(1 2 3) {4}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr, whereClauseLoaiKhieuNai);
                }
                solrQuery = new SolrQuery(whereClauseTiepNhan);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLTiepNhan"] = listKhieuNaiInfo.Count;
                    }
                }

                // Số lượng đã xử lý
                // Số lượng quá hạn đã xử lý
                QueryOptions queryOptionXuLy = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamXuLy = new Dictionary<string, string>();
                extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan_PhongBanXuLyTruoc");
                queryOptionXuLy.ExtraParams = extraParamXuLy;
                queryOptionXuLy.Start = 0;
                queryOptionXuLy.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
                listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

                GroupingParameters gpXuLy = new GroupingParameters();
                gpXuLy.Fields = listGroupField;
                gpXuLy.Limit = 1;
                gpXuLy.Main = true;
                gpXuLy.OrderBy = listSortOrderNgayXuLy;
                queryOptionXuLy.Grouping = gpXuLy;

                string whereClauseXuLy = string.Empty;// string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                if (tenTruyCap.Length == 0)
                {
                    //whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} {4}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr, whereClauseLoaiKhieuNai);
                }
                else
                {
                    //whereClauseXuLy = string.Format("NgayTiepNhan_NguoiXuLyTruoc:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
                    whereClauseXuLy = string.Format("NgayTiepNhan_NguoiXuLyTruoc:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} {4}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr, whereClauseLoaiKhieuNai);
                }

                solrQuery = new SolrQuery(whereClauseXuLy);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                    {
                        int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                        { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
                    }

                    if (listKhieuNaiInfo != null)
                    {
                        row["SLDaXuLy"] = listKhieuNaiInfo.Count;
                        row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;
                    }
                }
            }

            return dtNguoiDung;
        }


        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 26/10/2013
        /// Todo : Báo cáo tổng hợp theo phòng ban của trung tâm tính cước
        /// </summary>
        /// <param name="trungTamId"></param>
        /// <param name="phongBanId">
        ///     = -1 : Lấy toàn bộ tất cả các phòng ban thuộc trungTamId
        ///     != -1 : Chỉ lấy số liệu của phongBanId truyền vào
        /// </param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <logic>
        /// 
        /// a. Trường hợp khiếu nại chưa được chuyển về đài khai thác
        ///     i. Người tiếp nhận khiếu nại là người cuối cùng (tại trung tâm) được phân công xử lý khiếu nại
        ///     ii. Người đang tồn đọng khiếu nại là người cuối cùng (tại trung tâm) được phân công xử lý khiếu nại
        /// b. Trường hợp khiếu nại đã được chuyển về đài khai thác
        ///     i. Người tiếp nhận khiếu nại là người đã chuyển khiếu nại về đài khai thác
        ///     ii. Người xử lý khiếu nại là người đã chuyển khiếu nại về đài khai thác</logic>
        /// <returns></returns>
        ////public DataTable BaoCaoTongHopPAKNTheoPhongBanTTTC_Solr(int trungTamId, int phongBanId, int fromDate, int toDate)
        ////{
        ////    SolrQuery solrQuery = null;
        ////    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

        ////    DataTable dtPhongBan = new DataTable();
        ////    dtPhongBan.Columns.Add("PhongBanId");
        ////    dtPhongBan.Columns.Add("TenPhongBan");
        ////    dtPhongBan.Columns.Add("SLTiepNhan");
        ////    dtPhongBan.Columns.Add("SLDaXuLy");
        ////    dtPhongBan.Columns.Add("SLTonDong");
        ////    dtPhongBan.Columns.Add("SLQuaHan");

        ////    List<PhongBanInfo> listPhongBan = null;

        ////    if (phongBanId != -1)
        ////    {
        ////        PhongBanInfo objPhongBan = new PhongBanImpl().GetInfo(phongBanId);
        ////        if (objPhongBan != null)
        ////        {
        ////            listPhongBan = new List<PhongBanInfo>();
        ////            listPhongBan.Add(objPhongBan);
        ////        }
        ////    }
        ////    else
        ////    {
        ////        listPhongBan = new PhongBanImpl().GetListPhongBanByDoiTacId(trungTamId);
        ////    }

        ////    if (listPhongBan != null && listPhongBan.Count > 0)
        ////    {
        ////        for (int i = 0; i < listPhongBan.Count; i++)
        ////        {
        ////            DataRow row = dtPhongBan.NewRow();
        ////            row["PhongBanId"] = listPhongBan[i].Id;
        ////            row["TenPhongBan"] = listPhongBan[i].Name;
        ////            dtPhongBan.Rows.Add(row);
        ////        } // end for (int i = 0; i < listPhongBan.Count; i++)
        ////    } // end if (listPhongBan != null && listPhongBan.Count > 0)
        ////    else
        ////    {
        ////        return null;
        ////    }

        ////    QueryOptions queryOptionTiepNhan = new QueryOptions();
        ////    //Lấy ra những trường nào
        ////    var extraParamLoaiKhieuNai = new Dictionary<string, string>();
        ////    extraParamLoaiKhieuNai.Add("fl", @"");

        ////    queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;

        ////    queryOptionTiepNhan.Start = 0;
        ////    queryOptionTiepNhan.Rows = int.MaxValue;

        ////    SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
        ////    List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
        ////    listSortOrder.Add(sortOrder);

        ////    List<string> listGroupField = new List<string>();
        ////    listGroupField.Add("KhieuNaiId");
        ////    GroupingParameters gp = new GroupingParameters();
        ////    gp.Fields = listGroupField;
        ////    gp.Limit = 2;
        ////    gp.Main = true;
        ////    gp.OrderBy = listSortOrder;
        ////    queryOptionTiepNhan.Grouping = gp;


        ////     //Số lượng tiếp nhận

        ////    string whereClauseTiepNhan = string.Format("LDate:[{0} TO {1}] AND (DoiTacXuLyTruocId:{2} OR DoiTacXuLyId:{2})", ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true), trungTamId);
        ////    solrQuery = new SolrQuery(whereClauseTiepNhan);
        ////    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
        ////    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
        ////    {
        ////        foreach (DataRow row in dtPhongBan.Rows)
        ////        {
        ////            int soLuongTiepNhan = 0;
        ////            int soLuongXuLy = 0;
        ////            int soLuongTonDong = 0;
        ////            int soLuongQuaHan = 0;

        ////            for (int j = 0; j < listKhieuNaiInfo.Count; j++)
        ////            {
        ////                 //Nếu đã chuyển về đài khai thác
        ////                if (listKhieuNaiInfo[j].DoiTacXuLyTruocId == trungTamId && listKhieuNaiInfo[j].DoiTacXuLyTruocId != listKhieuNaiInfo[j].DoiTacXuLyId
        ////                    && listKhieuNaiInfo[j].PhongBanXuLyTruocId.ToString() == row["PhongBanId"].ToString())
        ////                {
        ////                    soLuongTiepNhan++;
        ////                    soLuongXuLy++;

        ////                    for (int k = j + 1; k < listKhieuNaiInfo.Count; k++)
        ////                    {
        ////                        if (listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[k].KhieuNaiId)
        ////                        {
        ////                            if (listKhieuNaiInfo[k].LDate >= listKhieuNaiInfo[k].NgayQuaHan)
        ////                            {
        ////                                soLuongQuaHan++;
        ////                            }

        ////                            listKhieuNaiInfo.RemoveAt(k);
        ////                            break;
        ////                        }
        ////                    }
        ////                }
        ////                // Nếu chưa chuyển về đài khai thác
        ////                else if (listKhieuNaiInfo[j].DoiTacXuLyId == trungTamId && listKhieuNaiInfo[j].PhongBanXuLyId.ToString() == row["PhongBanId"].ToString())
        ////                {
        ////                    soLuongTiepNhan++;
        ////                    soLuongTonDong++;

        ////                    if (listKhieuNaiInfo[j].LDate >= listKhieuNaiInfo[j].NgayQuaHan)
        ////                    {
        ////                        soLuongQuaHan++;
        ////                    }

        ////                    // nếu quá hạn thì tăng số lượng quá hạn
        ////                    for (int k = j + 1; k < listKhieuNaiInfo.Count; k++)
        ////                    {
        ////                        if (listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[k].KhieuNaiId)
        ////                        {
        ////                            if (listKhieuNaiInfo[k].LDate >= listKhieuNaiInfo[k].NgayQuaHan)
        ////                            {
        ////                                soLuongQuaHan++;
        ////                            }

        ////                            listKhieuNaiInfo.RemoveAt(k);
        ////                            break;
        ////                        }
        ////                        else // Trường hợp nếu khác KhieuNaiId thì thoát luôn vì các KhieuNaiId luôn đứng cạnh nhau
        ////                        {
        ////                            break;
        ////                        }
        ////                    }
        ////                }
        ////                else
        ////                {
        ////                    // Trường hợp nếu bản ghi đầu của từng nhóm không phải của người dùng thì chuyển sang nhóm KhieuNaiId khác luôn
        ////                    //  (vì phòng ban này sẽ không phải là phòng ban tiếp nhận và xử lý)
        ////                    if ((j + 1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
        ////                    {
        ////                        j++;
        ////                    }
        ////                }

        ////                listKhieuNaiInfo.RemoveAt(j);
        ////                j--;
        ////            }

        ////            row["SLTiepNhan"] = soLuongTiepNhan;
        ////            row["SLDaXuLy"] = soLuongXuLy;
        ////            row["SLTonDong"] = soLuongTonDong;
        ////            row["SLQuaHan"] = soLuongQuaHan;
        ////        } // end for (int i = 0; i < listPhongBan.Count; i++)

        ////    } // end if (listKhieuNaiInfo != null)              

        ////    // Tính số lượng tồn đọng và quá hạn trong quá khứ (tính từ thời điểm trước ngày bắt đầu)
        ////    // Tồn đọng là chưa chuyển cho trung tâm (đối tác) khác
        ////    int fromDate_1 = fromDate - 1;
        ////    string whereClauseTonDong = string.Format("DoiTacXuLyId:{0} AND -TrangThai:3 AND LDate : [* TO {1}]", trungTamId, ConvertDateToSolr(fromDate_1.ToString(), true, false));
        ////    solrQuery = new SolrQuery(whereClauseTonDong);

        ////    QueryOptions queryOptionTonDong = new QueryOptions();
        ////    //Lấy ra những trường nào
        ////    var extraParamTonDong = new Dictionary<string, string>();
        ////    extraParamTonDong.Add("fl", @"Id,PhongBanXuLyId, NgayQuaHanPhongBanXuLySort");

        ////    queryOptionTonDong.ExtraParams = extraParamTonDong;

        ////    queryOptionTonDong.Start = 0;
        ////    queryOptionTonDong.Rows = int.MaxValue;

        ////    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTonDong);
        ////    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
        ////    {
        ////        foreach (DataRow row in dtPhongBan.Rows)
        ////        {
        ////            for (int i = 0; i < listKhieuNaiInfo.Count; i++)
        ////            {
        ////                if (listKhieuNaiInfo[i].PhongBanXuLyId.ToString() == row["PhongBanId"].ToString())
        ////                {
        ////                    row["SLTonDong"] = ConvertUtility.ToInt32(row["SLTonDong"], 0) + 1;
        ////                    if (toDate >= listKhieuNaiInfo[i].NgayQuaHanPhongBanXuLySort)
        ////                    {
        ////                        row["SLQuaHan"] = ConvertUtility.ToInt32(row["SLQuaHan"], 0) + 1;
        ////                    }

        ////                    listKhieuNaiInfo.RemoveAt(i);
        ////                    i--;
        ////                }
        ////            }
        ////        }
        ////    }

        ////    return dtPhongBan;
        ////}       

        //public DataTable BaoCaoTongHopPAKNTheoNguoiDungTTTC_Solr(int trungTamId, int phongBanId, int nguoiSuDungId, int fromDate, int toDate)
        //{
        //    DataTable dtNguoiDung = new DataTable();
        //    dtNguoiDung.Columns.Add("TenTruyCap");
        //    dtNguoiDung.Columns.Add("TenNguoiDung");
        //    dtNguoiDung.Columns.Add("SLTiepNhan");
        //    dtNguoiDung.Columns.Add("SLDaXuLy");
        //    dtNguoiDung.Columns.Add("SLTonDong");
        //    dtNguoiDung.Columns.Add("SLQuaHan");

        //    List<NguoiSuDungInfo> listNguoiSuDung = null;

        //    if (nguoiSuDungId != -1)
        //    {
        //        NguoiSuDungInfo objNguoiSuDung = new NguoiSuDungImpl().GetInfo(nguoiSuDungId);
        //        if (objNguoiSuDung != null)
        //        {
        //            listNguoiSuDung = new List<NguoiSuDungInfo>();
        //            listNguoiSuDung.Add(objNguoiSuDung);
        //        }
        //    }
        //    else
        //    {
        //        listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanId);
        //    }

        //    if (listNguoiSuDung != null && listNguoiSuDung.Count > 0)
        //    {
        //        for (int i = 0; i < listNguoiSuDung.Count; i++)
        //        {
        //            DataRow row = dtNguoiDung.NewRow();
        //            row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
        //            row["TenNguoiDung"] = listNguoiSuDung[i].TenDayDu;
        //            dtNguoiDung.Rows.Add(row);
        //        } // end for (int i = 0; i < listPhongBan.Count; i++)
        //    } // end if (listPhongBan != null && listPhongBan.Count > 0)
        //    else
        //    {
        //        return null;
        //    }

        //    SolrQuery solrQuery = null;
        //    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

        //    QueryOptions queryOptionTiepNhan = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamTiepNhan = new Dictionary<string, string>();
        //    extraParamTiepNhan.Add("fl", @"");

        //    queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

        //    queryOptionTiepNhan.Start = 0;
        //    queryOptionTiepNhan.Rows = int.MaxValue;

        //    SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
        //    List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
        //    listSortOrder.Add(sortOrder);

        //    List<string> listGroupField = new List<string>();
        //    listGroupField.Add("KhieuNaiId");
        //    GroupingParameters gp = new GroupingParameters();
        //    gp.Fields = listGroupField;
        //    gp.Limit = 2;
        //    gp.Main = true;
        //    gp.OrderBy = listSortOrder;
        //    queryOptionTiepNhan.Grouping = gp;

        //    //Where điều kiện
        //    string whereClause = string.Empty;
        //    string whereClauseTiepNhan = string.Format("LDate:[{0} TO {1}] AND (DoiTacXuLyTruocId:{2} OR DoiTacXuLyId:{2}) AND (PhongBanXuLyTruocId:{3} OR PhongBanXuLyId:{3})", ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true), trungTamId, phongBanId);

        //    solrQuery = new SolrQuery(whereClauseTiepNhan);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);

        //    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
        //    {
        //        foreach (DataRow row in dtNguoiDung.Rows)
        //        {

        //            int soLuongTiepNhan = 0;
        //            int soLuongXuLy = 0;
        //            int soLuongTonDong = 0;
        //            int soLuongQuaHan = 0;

        //            for (int j = 0; j < listKhieuNaiInfo.Count; j++)
        //            {
        //                // Nếu đã chuyển về đài khai thác
        //                if (listKhieuNaiInfo[j].DoiTacXuLyTruocId == trungTamId && listKhieuNaiInfo[j].DoiTacXuLyTruocId != listKhieuNaiInfo[j].DoiTacXuLyId
        //                    && listKhieuNaiInfo[j].NguoiXuLyTruoc == row["TenTruyCap"].ToString())
        //                {
        //                    soLuongTiepNhan++;
        //                    soLuongXuLy++;

        //                    if (listKhieuNaiInfo[j].LDate > listKhieuNaiInfo[j].NgayQuaHan)
        //                    {
        //                        soLuongQuaHan++;
        //                    }

        //                    if ((j + 1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
        //                    {
        //                        listKhieuNaiInfo.RemoveAt(j + 1);
        //                    }
        //                }
        //                // Nếu chưa chuyển về đài khai thác
        //                else if (listKhieuNaiInfo[j].DoiTacXuLyId == trungTamId && listKhieuNaiInfo[j].NguoiXuLy == row["TenTruyCap"].ToString())
        //                {
        //                    soLuongTiepNhan++;
        //                    soLuongTonDong++;

        //                    // nếu quá hạn thì tăng số lượng quá hạn
        //                    if ((j + 1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
        //                    {
        //                        if (listKhieuNaiInfo[j + 1].LDate > listKhieuNaiInfo[j + 1].NgayQuaHan)
        //                        {
        //                            soLuongQuaHan++;
        //                        }

        //                        listKhieuNaiInfo.RemoveAt(j + 1);
        //                    }
        //                }
        //                else
        //                {
        //                    // Trường hợp nếu bản ghi đầu của từng nhóm không phải của người dùng thì chuyển sang nhóm KhieuNaiId khác luôn
        //                    //  (vì người dùng này sẽ không phải là người tiếp nhận và xử lý
        //                    if ((j + 1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
        //                    {
        //                        j++;
        //                    }
        //                }

        //                //listKhieuNaiInfo.RemoveAt(j);
        //                //j--;
        //            }

        //            row["SLTiepNhan"] = soLuongTiepNhan;
        //            row["SLDaXuLy"] = soLuongXuLy;
        //            row["SLTonDong"] = soLuongTonDong;
        //            row["SLQuaHan"] = soLuongQuaHan;
        //        } // end for (int i = 0; i < listNguoiSuDung.Count; i++)                              
        //    } // end if (listKhieuNaiInfo != null)

        //    // Tính số lượng tồn đọng và quá hạn trong quá khứ (tính từ thời điểm trước ngày bắt đầu)
        //    // Tồn đọng là chưa chuyển cho trung tâm (đối tác) khác
        //    string whereClauseTonDong = string.Format("PhongBanXuLyId:{0} AND -TrangThai:3 AND LDate : [* TO {1}]", phongBanId, ConvertDateToSolr(fromDate.ToString(), true, false));
        //    solrQuery = new SolrQuery(whereClauseTonDong);

        //    QueryOptions queryOptionTonDong = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamTonDong = new Dictionary<string, string>();
        //    extraParamTonDong.Add("fl", @"Id,PhongBanXuLyId, NguoiXuLy, NgayQuaHanPhongBanXuLySort");

        //    queryOptionTonDong.ExtraParams = extraParamTonDong;

        //    queryOptionTonDong.Start = 0;
        //    queryOptionTonDong.Rows = int.MaxValue;

        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTonDong);
        //    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
        //    {
        //        foreach (DataRow row in dtNguoiDung.Rows)
        //        {
        //            for (int i = 0; i < listKhieuNaiInfo.Count; i++)
        //            {
        //                if (listKhieuNaiInfo[i].NguoiXuLy == row["TenTruyCap"].ToString())
        //                {
        //                    row["SLTonDong"] = ConvertUtility.ToInt32(row["SLTonDong"], 0) + 1;
        //                    if (toDate > listKhieuNaiInfo[i].NgayQuaHanPhongBanXuLySort)
        //                    {
        //                        row["SLQuaHan"] = ConvertUtility.ToInt32(row["SLQuaHan"], 0) + 1;
        //                    }

        //                    listKhieuNaiInfo.RemoveAt(i);
        //                    i--;
        //                }
        //            }
        //        }
        //    }

        //    return dtNguoiDung;
        //}

        //public DataTable BaoCaoTongHopPAKNTheoNguoiDungTTTC_Solr(int trungTamId, int phongBanId, int fromDate, int toDate)
        //{
        //    DataTable dtNguoiDung = new DataTable();
        //    dtNguoiDung.Columns.Add("TenTruyCap");
        //    dtNguoiDung.Columns.Add("TenNguoiDung");
        //    dtNguoiDung.Columns.Add("SLTiepNhan");
        //    dtNguoiDung.Columns.Add("SLDaXuLy");
        //    dtNguoiDung.Columns.Add("SLTonDong");
        //    dtNguoiDung.Columns.Add("SLQuaHan");

        //    SolrQuery solrQuery = null;
        //    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

        //    QueryOptions queryOptionTiepNhan = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamTiepNhan = new Dictionary<string, string>();
        //    extraParamTiepNhan.Add("fl", @"");

        //    queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

        //    queryOptionTiepNhan.Start = 0;
        //    queryOptionTiepNhan.Rows = int.MaxValue;

        //    SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
        //    List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
        //    listSortOrder.Add(sortOrder);

        //    List<string> listGroupField = new List<string>();
        //    listGroupField.Add("KhieuNaiId");
        //    GroupingParameters gp = new GroupingParameters();
        //    gp.Fields = listGroupField;
        //    gp.Limit = 2;
        //    gp.Main = true;
        //    gp.OrderBy = listSortOrder;
        //    queryOptionTiepNhan.Grouping = gp;

        //    //Where điều kiện
        //    string whereClause = string.Empty;
        //    string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND (DoiTacXuLyTruocId:{2} OR DoiTacXuLyId:{2}) AND (PhongBanXuLyTruocId:{3} OR PhongBanXuLyId:{3})", ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true), trungTamId, phongBanId);

        //    solrQuery = new SolrQuery(whereClauseTiepNhan);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);

        //    #region Code sử dụng để kiểm tra dữ liệu trên DataTable

        //    //DataTable dt = new DataTable();
        //    //dt.Columns.Add("ActivityId");
        //    //dt.Columns.Add("KhieuNaiId");
        //    //dt.Columns.Add("DoiTacDoiTacXuLyTruocId");
        //    //dt.Columns.Add("DoiTacXuLyId");
        //    //dt.Columns.Add("PhongBanXuLyTruocId");
        //    //dt.Columns.Add("NguoiXuLyTruoc");
        //    //dt.Columns.Add("PhongBanXuLyId");
        //    //dt.Columns.Add("NguoiXuLy");
        //    //dt.Columns.Add("LDate");

        //    //for (int i = 0; i < listKhieuNaiInfo.Count; i++)
        //    //{
        //    //    DataRow row = dt.NewRow();
        //    //    row["ActivityId"] = listKhieuNaiInfo[i].ActivityId;
        //    //    row["KhieuNaiId"] = listKhieuNaiInfo[i].KhieuNaiId;
        //    //    row["DoiTacDoiTacXuLyTruocId"] = listKhieuNaiInfo[i].DoiTacXuLyTruocId;
        //    //    row["DoiTacXuLyId"] = listKhieuNaiInfo[i].DoiTacXuLyId;
        //    //    row["PhongBanXuLyTruocId"] = listKhieuNaiInfo[i].PhongBanXuLyTruocId;
        //    //    row["NguoiXuLyTruoc"] = listKhieuNaiInfo[i].NguoiXuLyTruoc;
        //    //    row["PhongBanXuLyId"] = listKhieuNaiInfo[i].PhongBanXuLyId;
        //    //    row["NguoiXuLy"] = listKhieuNaiInfo[i].NguoiXuLy;
        //    //    row["LDate"] = listKhieuNaiInfo[i].LDate;
        //    //    dt.Rows.Add(row);
        //    //}

        //    #endregion             

        //    if (listKhieuNaiInfo != null)
        //    {
        //        //List<PhongBanInfo> listPhongBan = new PhongBanImpl().GetListPhongBanByDoiTacId(trungTamId);
        //        List<NguoiSuDungInfo> listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanId);
        //        if (listNguoiSuDung != null && listNguoiSuDung.Count > 0)
        //        {
        //            for (int i = 0; i < listNguoiSuDung.Count; i++)
        //            {
        //                DataRow row = dtNguoiDung.NewRow();
        //                row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
        //                row["TenNguoiDung"] = listNguoiSuDung[i].TenDayDu;

        //                int soLuongTiepNhan = 0;
        //                int soLuongXuLy = 0;
        //                int soLuongTonDong = 0;
        //                int soLuongQuaHan = 0;

        //                for (int j = 0; j < listKhieuNaiInfo.Count; j++)
        //                {
        //                    // Nếu đã chuyển về đài khai thác
        //                    if (listKhieuNaiInfo[j].DoiTacXuLyTruocId == trungTamId && listKhieuNaiInfo[j].DoiTacXuLyTruocId != listKhieuNaiInfo[j].DoiTacXuLyId
        //                        && listKhieuNaiInfo[j].NguoiXuLyTruoc == listNguoiSuDung[i].TenTruyCap)
        //                    {
        //                        soLuongTiepNhan++;
        //                        soLuongXuLy++;

        //                        if (listKhieuNaiInfo[j].LDate > listKhieuNaiInfo[j].NgayQuaHan)
        //                        {
        //                            soLuongQuaHan++;
        //                        }

        //                        if ((j+1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
        //                        {
        //                            listKhieuNaiInfo.RemoveAt(j + 1);
        //                        }

        //                        //for (int k = j + 1; k < listKhieuNaiInfo.Count; k++)
        //                        //{
        //                        //    if (listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[k].KhieuNaiId)
        //                        //    {
        //                        //        listKhieuNaiInfo.RemoveAt(k);
        //                        //        break;
        //                        //    }
        //                        //}
        //                    }
        //                    // Nếu chưa chuyển về đài khai thác
        //                    else if (listKhieuNaiInfo[j].DoiTacXuLyId == trungTamId && listKhieuNaiInfo[j].NguoiXuLy == listNguoiSuDung[i].TenTruyCap)
        //                    {
        //                        soLuongTiepNhan++;
        //                        soLuongTonDong++;

        //                        // nếu quá hạn thì tăng số lượng quá hạn
        //                        if ((j + 1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
        //                        {
        //                            if (listKhieuNaiInfo[j + 1].LDate > listKhieuNaiInfo[j + 1].NgayQuaHan)
        //                            {
        //                                soLuongQuaHan++;
        //                            }

        //                            listKhieuNaiInfo.RemoveAt(j + 1);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        // Trường hợp nếu bản ghi đầu của từng nhóm không phải của người dùng thì chuyển sang nhóm KhieuNaiId khác luôn
        //                        //  (vì người dùng này sẽ không phải là người tiếp nhận và xử lý
        //                        if ((j+1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
        //                        {
        //                            j++;
        //                        }
        //                    }

        //                    //listKhieuNaiInfo.RemoveAt(j);
        //                    //j--;
        //                }

        //                row["SLTiepNhan"] = soLuongTiepNhan;
        //                row["SLDaXuLy"] = soLuongXuLy;
        //                row["SLTonDong"] = soLuongTonDong;
        //                row["SLQuaHan"] = soLuongQuaHan;

        //                dtNguoiDung.Rows.Add(row);
        //            } // end for (int i = 0; i < listNguoiSuDung.Count; i++)

        //            // Tính số lượng tồn đọng và quá hạn trong quá khứ (tính từ thời điểm trước ngày bắt đầu)
        //            // Tồn đọng là chưa chuyển cho trung tâm (đối tác) khác
        //            whereClause = string.Format("NgayTiepNhan:[* TO {0}] AND DoiTacXuLyId:{1}", ConvertDateToSolr((fromDate - 1).ToString(), true, false), trungTamId);
        //            solrQuery = new SolrQuery(whereClause);

        //            QueryOptions queryOptionTonDong = new QueryOptions();
        //            //Lấy ra những trường nào
        //            var extraParamTonDong = new Dictionary<string, string>();
        //            extraParamTonDong.Add("fl", @"");

        //            queryOptionTonDong.ExtraParams = extraParamTonDong;

        //            queryOptionTonDong.Start = 0;
        //            queryOptionTonDong.Rows = int.MaxValue;

        //            GroupingParameters gpTonDong = new GroupingParameters();
        //            gpTonDong.Fields = listGroupField;
        //            gpTonDong.Limit = 1;
        //            gpTonDong.Main = true;
        //            gpTonDong.OrderBy = listSortOrder;
        //            queryOptionTonDong.Grouping = gpTonDong;

        //            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
        //            if (listKhieuNaiInfo != null)
        //            {
        //                foreach (DataRow row in dtNguoiDung.Rows)
        //                {
        //                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
        //                    {
        //                        if (listKhieuNaiInfo[i].DoiTacXuLyId == trungTamId && listKhieuNaiInfo[i].NguoiXuLy.ToString() == row["TenTruyCap"].ToString())
        //                        {
        //                            row["SLTonDong"] = ConvertUtility.ToInt32(row["SLTonDong"], 0) + 1;
        //                            if (ConvertUtility.ToInt32(listKhieuNaiInfo[i].NgayQuaHan.ToString("yyyyMMdd"), 0) > fromDate)
        //                            {
        //                                row["SLQuaHan"] = ConvertUtility.ToInt32(row["SLQuaHan"], 0) + 1;
        //                            }

        //                            listKhieuNaiInfo.RemoveAt(i);
        //                            i--;
        //                        }
        //                    }
        //                }
        //            }
        //        } // end if (listNguoiSuDung != null && listNguoiSuDung.Count > 0)
        //    } // end if (listKhieuNaiInfo != null)

        //    return dtNguoiDung;
        //}

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 11/11/2013
        /// Todo : Lấy danh sách khiếu nại
        /// </summary>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoChiTietPAKNTheoNguoiDungTTTC_Solr(int trungTamId, int phongBanXuLyId, string sTenTruyCap, DateTime fromDate, DateTime toDate, int pageIndex, int pageSize)
        {
            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);
            //sTenTruyCap = sTenTruyCap.Replace(",", " ");           
            List<string> listTenTruyCap = sTenTruyCap.Split(',').ToList<string>();

            DataTable dtKhieuNai = new DataTable();
            dtKhieuNai.Columns.Add("KhieuNaiId");
            dtKhieuNai.Columns.Add("TrangThai");
            dtKhieuNai.Columns.Add("DoUuTien");
            dtKhieuNai.Columns.Add("SoThueBao");
            dtKhieuNai.Columns.Add("LoaiKhieuNai");
            dtKhieuNai.Columns.Add("LinhVucChung");
            dtKhieuNai.Columns.Add("LinhVucCon");
            dtKhieuNai.Columns.Add("NoiDungPA");
            dtKhieuNai.Columns.Add("PhongBanXuLy");
            dtKhieuNai.Columns.Add("NguoiTiepNhan");
            dtKhieuNai.Columns.Add("NguoiXuLy");
            dtKhieuNai.Columns.Add("NguoiTienXuLy");
            dtKhieuNai.Columns.Add("NgayTiepNhan");
            dtKhieuNai.Columns.Add("NgayQuaHan");

            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"*");

            queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            listSortOrder.Add(sortOrder);

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");
            GroupingParameters gp = new GroupingParameters();
            gp.Fields = listGroupField;
            gp.Limit = 10;
            gp.Main = true;
            gp.OrderBy = listSortOrder;
            queryOptionTiepNhan.Grouping = gp;

            //Where điều kiện            
            string whereClauseTiepNhan = string.Format("LDate:[{0} TO {1}] AND (DoiTacXuLyTruocId : {2} OR DoiTacXuLyId : {2})", sFromDate, sToDate, trungTamId);

            SolrQuery solrQuery = new SolrQuery(whereClauseTiepNhan);
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);

            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {
                // Xóa  hết tất cả các bản ghi mà listTenTruyCap không phải là người cuối cùng xử lý
                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    if (!listTenTruyCap.Contains(listKhieuNaiInfo[i].NguoiXuLyTruoc) && !listTenTruyCap.Contains(listKhieuNaiInfo[i].NguoiXuLy))
                    {
                        int khieuNaiId = listKhieuNaiInfo[i].KhieuNaiId;
                        for (int j = i; j < listKhieuNaiInfo.Count; j++)
                        {
                            if (listKhieuNaiInfo[j].KhieuNaiId == khieuNaiId)
                            {
                                listKhieuNaiInfo.RemoveAt(j);
                                j--;
                            }
                            else
                            {
                                i--;
                                break;
                            }

                        } // end  for(int j=i;j<listKhieuNaiInfo.Count;j++)
                    }
                } // end for (int i = 0; i < listKhieuNaiInfo.Count; i++)

                // Thực hiện sắp xếp lại theo KhieuNaiId
                for (int i = 0; i < listKhieuNaiInfo.Count - 1; i++)
                {
                    for (int j = i + 1; j < listKhieuNaiInfo.Count; j++)
                    {
                        if (listKhieuNaiInfo[i].KhieuNaiId > listKhieuNaiInfo[j].KhieuNaiId)
                        {
                            KhieuNai_ReportInfo objTemp = listKhieuNaiInfo[i];
                            listKhieuNaiInfo[i] = listKhieuNaiInfo[j];
                            listKhieuNaiInfo[j] = objTemp;
                        }
                    }
                } // end for (int i = 0; i < listKhieuNaiInfo.Count;i++ )

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    DataRow row = dtKhieuNai.NewRow();

                    row["TrangThai"] = listKhieuNaiInfo[i].DoiTacXuLyId != trungTamId ? "Đã xử lý" : "Đang xử lý"; //listKhieuNaiInfo[i].TrangThai;
                    row["KhieuNaiId"] = listKhieuNaiInfo[i].KhieuNaiId;
                    row["DoUuTien"] = listKhieuNaiInfo[i].DoUuTien;
                    row["SoThueBao"] = listKhieuNaiInfo[i].SoThueBao;
                    row["LoaiKhieuNai"] = listKhieuNaiInfo[i].LoaiKhieuNai;
                    row["LinhVucChung"] = listKhieuNaiInfo[i].LinhVucChung;
                    row["LinhVucCon"] = listKhieuNaiInfo[i].LinhVucCon;
                    row["NoiDungPA"] = listKhieuNaiInfo[i].NoiDungPA;
                    row["PhongBanXuLy"] = "";
                    //row["NguoiTiepNhan"] = listKhieuNaiInfo[i].DoiTacXuLyId != trungTamId ? listKhieuNaiInfo[i].NguoiXuLyTruoc : listKhieuNaiInfo[i].NguoiXuLy;
                    row["NguoiXuLy"] = listKhieuNaiInfo[i].DoiTacXuLyId != trungTamId ? listKhieuNaiInfo[i].NguoiXuLyTruoc : listKhieuNaiInfo[i].NguoiXuLy;
                    row["NgayTiepNhan"] = listKhieuNaiInfo[i].NgayTiepNhan.ToString("dd/MM/yyyy");
                    row["NgayQuaHan"] = listKhieuNaiInfo[i].NgayQuaHan.ToString("dd/MM/yyyy");

                    string sNguoiXuLy = row["NguoiXuLy"].ToString();
                    if ((i + 1) < listKhieuNaiInfo.Count)
                    {
                        string sNguoiTienXuLy = string.Empty;
                        for (int j = i + 1; j < listKhieuNaiInfo.Count; j++)
                        {
                            if (listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[i].KhieuNaiId)
                            {
                                if (listKhieuNaiInfo[j].DoiTacXuLyId == trungTamId && !sNguoiTienXuLy.Contains(listKhieuNaiInfo[j].NguoiXuLy)
                                    && sNguoiXuLy != listKhieuNaiInfo[j].NguoiXuLy)
                                {
                                    sNguoiTienXuLy = string.Format("{0}{1}, ", sNguoiTienXuLy, listKhieuNaiInfo[j].NguoiXuLy);
                                }

                                if (listKhieuNaiInfo[j].DoiTacXuLyTruocId == trungTamId && !sNguoiTienXuLy.Contains(listKhieuNaiInfo[j].NguoiXuLyTruoc)
                                    && sNguoiXuLy != listKhieuNaiInfo[j].NguoiXuLyTruoc)
                                {
                                    sNguoiTienXuLy = string.Format("{0}{1}, ", sNguoiTienXuLy, listKhieuNaiInfo[j].NguoiXuLyTruoc);
                                }

                                listKhieuNaiInfo.RemoveAt(j);
                                j--;
                            }
                            else
                            {
                                break;
                            }
                        }

                        row["NguoiTienXuLy"] = sNguoiTienXuLy.Length > 0 ? sNguoiTienXuLy.Trim().Trim(',') : string.Empty;
                    }

                    dtKhieuNai.Rows.Add(row);
                    listKhieuNaiInfo.RemoveAt(i);
                    i--;
                }
            }

            //string sKhieuNaiId = string.Empty;
            //if (dtKhieuNai != null && dtKhieuNai.Rows.Count > 0)
            //{
            //    sKhieuNaiId = string.Format("{0} {1}", sKhieuNaiId, dtKhieuNai.Rows[0]["KhieuNaiId"].ToString());
            //    for (int i = 1; i < dtKhieuNai.Rows.Count; i++)
            //    {
            //        sKhieuNaiId = string.Format("{0} {1}", sKhieuNaiId, dtKhieuNai.Rows[i]["KhieuNaiId"].ToString());
            //    }

            //    whereClauseTiepNhan = string.Format("Id : ({0})", sKhieuNaiId);
            //    solrQuery = new SolrQuery(whereClauseTiepNhan);

            //    extraParamTiepNhan = new Dictionary<string, string>();
            //    extraParamTiepNhan.Add("fl", "Id, NoiDungPA");

            //    queryOptionTiepNhan = new QueryOptions();
            //    queryOptionTiepNhan.Start = 0;
            //    queryOptionTiepNhan.Rows = dtKhieuNai.Rows.Count;
            //    queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

            //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTiepNhan);
            //    if (listKhieuNaiInfo != null)
            //    {
            //        foreach (DataRow row in dtKhieuNai.Rows)
            //        {
            //            for (int i = 0; i < listKhieuNaiInfo.Count; i++)
            //            {
            //                if (row["KhieuNaiId"].ToString() == listKhieuNaiInfo[i].Id.ToString())
            //                {
            //                    row["NoiDungPA"] = listKhieuNaiInfo[i].NoiDungPA;
            //                    listKhieuNaiInfo.RemoveAt(i);
            //                    break;
            //                }
            //            }

            //        }
            //    }
            //}


            return dtKhieuNai;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 20/01/2014
        /// Todo : Báo cáo phối hợp giải quyết khiếu nại
        /// </summary>
        /// <param name="trungTamId"></param>
        /// <param name="phongBanId"></param>
        /// <param name="nguoiSuDungId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        //public DataTable BaoCaoPhoiHopGQKNTTTC_Solr(int trungTamId, int phongBanId, DateTime fromDate, DateTime toDate)
        //{
        //    List<NguoiSuDungInfo> listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanId);
        //    if (listNguoiSuDung == null || listNguoiSuDung.Count == 0) return null;

        //    SolrQuery solrQuery = null;
        //    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

        //    List<string> listGroupField = new List<string>();
        //    listGroupField.Add("KhieuNaiId");

        //    DataTable dtNguoiDung = new DataTable();
        //    dtNguoiDung.Columns.Add("TenTruyCap");
        //    dtNguoiDung.Columns.Add("TenDayDu");           
        //    dtNguoiDung.Columns.Add("SLDaXuLy");
        //    dtNguoiDung.Columns.Add("SLQuaHanDaXuLy");

        //    DataRow rowNguoiDung = dtNguoiDung.NewRow();
        //    rowNguoiDung["TenTruyCap"] = "";
        //    rowNguoiDung["TenDayDu"] = "Chưa có người xử lý";           
        //    rowNguoiDung["SLDaXuLy"] = 0;
        //    rowNguoiDung["SLQuaHanDaXuLy"] = 0;        
        //    dtNguoiDung.Rows.Add(rowNguoiDung);

        //    for (int i = 0; i < listNguoiSuDung.Count; i++)
        //    {
        //        DataRow row = dtNguoiDung.NewRow();
        //        row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
        //        row["TenDayDu"] = listNguoiSuDung[i].TenDayDu;               
        //        row["SLDaXuLy"] = 0;
        //        row["SLQuaHanDaXuLy"] = 0;

        //        dtNguoiDung.Rows.Add(row);
        //    }           

        //    // Số lượng tồn đọng
        //    // Số lượng tồn đọng quá hạn            
        //    QueryOptions queryOptionTonDong = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamTonDong = new Dictionary<string, string>();
        //    extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, PhongBanXuLyId, NguoiXuLy");
        //    queryOptionTonDong.ExtraParams = extraParamTonDong;
        //    queryOptionTonDong.Start = 0;
        //    queryOptionTonDong.Rows = int.MaxValue;

        //    SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
        //    SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
        //    List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
        //    listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
        //    listSortOrderTonDong.Add(sortOrderTonDongActivityId);

        //    GroupingParameters gpTonDong = new GroupingParameters();
        //    gpTonDong.Fields = listGroupField;
        //    gpTonDong.Limit = 1;
        //    gpTonDong.Main = true;
        //    gpTonDong.OrderBy = listSortOrderTonDong;
        //    queryOptionTonDong.Grouping = gpTonDong;

        //    //string whereClauseTonDong = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(nextToDate.ToString("yyyyMMdd"), true, false));
        //    string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}]", ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true));
        //    solrQuery = new SolrQuery(whereClauseTonDong);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
        //    Dictionary<int, string> listKhieuNaiIdTonDong = new Dictionary<int, string>();

        //    if (listKhieuNaiInfo != null)
        //    {
        //        int numberDelete = listKhieuNaiInfo.RemoveAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Đóng_KN || obj.PhongBanXuLyId != phongBanId; });

        //        if (listKhieuNaiInfo != null)
        //        {                   
        //            for (int i = 0; i < listKhieuNaiInfo.Count; i++)
        //            {
        //                listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].NguoiXuLy);
        //            }
        //        }
        //    }

        //    foreach (DataRow row in dtNguoiDung.Rows)
        //    {
        //        string tenTruyCap = row["TenTruyCap"].ToString();
        //        string tenTruyCapSolr = tenTruyCap;
        //        if (tenTruyCapSolr.Trim().Length == 0)
        //        {
        //            tenTruyCapSolr = "\"\"";
        //        }

        //        // Số lượng đã xử lý
        //        // Số lượng quá hạn đã xử lý
        //        QueryOptions queryOptionXuLy = new QueryOptions();
        //        //Lấy ra những trường nào
        //        var extraParamXuLy = new Dictionary<string, string>();
        //        extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHanPhongBanXuLyTruoc");
        //        queryOptionXuLy.ExtraParams = extraParamXuLy;
        //        queryOptionXuLy.Start = 0;
        //        queryOptionXuLy.Rows = int.MaxValue;

        //        SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
        //        List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
        //        listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

        //        GroupingParameters gpXuLy = new GroupingParameters();
        //        gpXuLy.Fields = listGroupField;
        //        gpXuLy.Limit = 1;
        //        gpXuLy.Main = true;
        //        gpXuLy.OrderBy = listSortOrderNgayXuLy;
        //        queryOptionXuLy.Grouping = gpXuLy;

        //        string whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId :{2} AND NguoiXuLyTruoc: {3} AND -NguoiXuLy : {3}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId, tenTruyCapSolr);
        //        solrQuery = new SolrQuery(whereClauseXuLy);
        //        listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
        //        if (listKhieuNaiInfo != null)
        //        {
        //            if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
        //            {
        //                int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate(KhieuNai_ReportInfo obj) { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, string>(obj.KhieuNaiId, tenTruyCap)); });
        //            }

        //            if (listKhieuNaiInfo != null)
        //            {
        //                row["SLDaXuLy"] = listKhieuNaiInfo.Count;
        //                row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.NgayTiepNhan >= obj.NgayQuaHanPhongBanXuLyTruoc; }).Count;
        //            }
        //        }
        //    }

        //    return dtNguoiDung;
        //}

        //public DataTable BaoCaoPhoiHopGQKNTTTC_Solr(int trungTamId, int phongBanId, int nguoiSuDungId, DateTime fromDate, DateTime toDate)
        //{
        //    DataTable dtNguoiDung = new DataTable();
        //    dtNguoiDung.Columns.Add("TenTruyCap");
        //    dtNguoiDung.Columns.Add("TenNguoiDung");
        //    dtNguoiDung.Columns.Add("SLXuLy");

        //    List<NguoiSuDungInfo> listNguoiSuDung = null;
        //    string sNguoiDung = string.Empty;

        //    if (nguoiSuDungId != -1)
        //    {
        //        NguoiSuDungInfo objNguoiSuDung = new NguoiSuDungImpl().GetInfo(nguoiSuDungId);
        //        if (objNguoiSuDung != null)
        //        {
        //            listNguoiSuDung = new List<NguoiSuDungInfo>();
        //            listNguoiSuDung.Add(objNguoiSuDung);
        //        }
        //    }
        //    else
        //    {
        //        listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanId);
        //    }

        //    if (listNguoiSuDung != null && listNguoiSuDung.Count > 0)
        //    {
        //        for (int i = 0; i < listNguoiSuDung.Count; i++)
        //        {
        //            DataRow row = dtNguoiDung.NewRow();
        //            row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
        //            row["TenNguoiDung"] = listNguoiSuDung[i].TenDayDu;
        //            dtNguoiDung.Rows.Add(row);

        //            sNguoiDung = string.Format("{0}{1} ", sNguoiDung, listNguoiSuDung[i].TenTruyCap);
        //        } // end for (int i = 0; i < listPhongBan.Count; i++)

        //        sNguoiDung = sNguoiDung.Trim();
        //        sNguoiDung = string.Format(" AND NguoiXuLy : ({0})", sNguoiDung);
        //    } // end if (listPhongBan != null && listPhongBan.Count > 0)
        //    else
        //    {
        //        return null;
        //    }

        //    SolrQuery solrQuery = null;
        //    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

        //    QueryOptions queryOption = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamTiepNhan = new Dictionary<string, string>();
        //    extraParamTiepNhan.Add("fl", @"");

        //    queryOption.ExtraParams = extraParamTiepNhan;

        //    queryOption.Start = 0;
        //    queryOption.Rows = 0;

        //    string whereClause = string.Format("LDate : [{0} TO {1}] {2}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), sNguoiDung);

        //    solrQuery = new SolrQuery(whereClause);

        //    FacetParameters facetParam = new FacetParameters();
        //    SolrFacetFieldQuery solrFacetFieldQuery = new SolrFacetFieldQuery("NguoiXuLy");
        //    facetParam.Queries.Add(solrFacetFieldQuery);
        //    queryOption.Facet = facetParam;

        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOption);
        //    GetCountOfFacet(dtNguoiDung, "TenTruyCap", "SLXuLy", listKhieuNaiInfo);

        //    return dtNguoiDung;
        //}

        ///// <summary>
        ///// Author : Phi Hoang Hai
        ///// Created date : 11/11/2013
        ///// Todo : Lấy danh sách khiếu nại
        ///// </summary>
        ///// <param name="phongBanXuLyId"></param>
        ///// <param name="fromDate"></param>
        ///// <param name="toDate"></param>
        ///// <returns></returns>
        //public DataTable BaoCaoChiTietPAKNTheoNguoiDungTTTC_Solr(int trungTamId, int phongBanXuLyId, string listTenTruyCap, DateTime fromDate, DateTime toDate, int pageIndex, int pageSize)
        //{
        //    string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
        //    string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);
        //    listTenTruyCap = listTenTruyCap.Replace(",", " ");


        //    DataTable dtKhieuNai = new DataTable();
        //    dtKhieuNai.Columns.Add("KhieuNaiId");
        //    dtKhieuNai.Columns.Add("TrangThai");
        //    dtKhieuNai.Columns.Add("DoUuTien");
        //    dtKhieuNai.Columns.Add("SoThueBao");
        //    dtKhieuNai.Columns.Add("LoaiKhieuNai");
        //    dtKhieuNai.Columns.Add("LinhVucChung");
        //    dtKhieuNai.Columns.Add("LinhVucCon");
        //    dtKhieuNai.Columns.Add("NoiDungPA");
        //    dtKhieuNai.Columns.Add("PhongBanXuLy");
        //    dtKhieuNai.Columns.Add("NguoiTiepNhan");
        //    dtKhieuNai.Columns.Add("NguoiXuLy");
        //    dtKhieuNai.Columns.Add("NguoiTienXuLy");
        //    dtKhieuNai.Columns.Add("NgayTiepNhan");
        //    dtKhieuNai.Columns.Add("NgayQuaHan");

        //    QueryOptions queryOptionTiepNhan = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamTiepNhan = new Dictionary<string, string>();
        //    extraParamTiepNhan.Add("fl", @"*");

        //    queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

        //    queryOptionTiepNhan.Start = 0;
        //    queryOptionTiepNhan.Rows = int.MaxValue;

        //    SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
        //    List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
        //    listSortOrder.Add(sortOrder);

        //    List<string> listGroupField = new List<string>();
        //    listGroupField.Add("KhieuNaiId");
        //    GroupingParameters gp = new GroupingParameters();
        //    gp.Fields = listGroupField;
        //    gp.Limit = 10;
        //    gp.Main = true;
        //    gp.OrderBy = listSortOrder;
        //    queryOptionTiepNhan.Grouping = gp;

        //    //Where điều kiện            
        //    string whereClauseTiepNhan = string.Format("LDate:[{0} TO {1}] AND (NguoiXuLyTruoc:({2}) OR NguoiXuLy:({2}))", sFromDate, sToDate, listTenTruyCap);

        //    SolrQuery solrQuery = new SolrQuery(whereClauseTiepNhan);
        //    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);

        //    if (listKhieuNaiInfo != null)
        //    {
        //        for (int i = 0; i < listKhieuNaiInfo.Count; i++)
        //        {
        //            DataRow row = dtKhieuNai.NewRow();

        //            row["TrangThai"] = listKhieuNaiInfo[i].TrangThai;
        //            row["KhieuNaiId"] = listKhieuNaiInfo[i].KhieuNaiId;
        //            row["DoUuTien"] = listKhieuNaiInfo[i].DoUuTien;
        //            row["SoThueBao"] = listKhieuNaiInfo[i].SoThueBao;
        //            row["LoaiKhieuNai"] = listKhieuNaiInfo[i].LoaiKhieuNai;
        //            row["LinhVucChung"] = listKhieuNaiInfo[i].LinhVucChung;
        //            row["LinhVucCon"] = listKhieuNaiInfo[i].LinhVucCon;
        //            row["NoiDungPA"] = listKhieuNaiInfo[i].NoiDungPA;
        //            row["PhongBanXuLy"] = "";
        //            //row["NguoiTiepNhan"] = listKhieuNaiInfo[i].DoiTacXuLyId != trungTamId ? listKhieuNaiInfo[i].NguoiXuLyTruoc : listKhieuNaiInfo[i].NguoiXuLy;
        //            row["NguoiXuLy"] = listKhieuNaiInfo[i].DoiTacXuLyId != trungTamId ? listKhieuNaiInfo[i].NguoiXuLyTruoc : listKhieuNaiInfo[i].NguoiXuLy;
        //            row["NgayTiepNhan"] = listKhieuNaiInfo[i].NgayTiepNhan.ToString("dd/MM/yyyy");
        //            row["NgayQuaHan"] = listKhieuNaiInfo[i].NgayQuaHan.ToString("dd/MM/yyyy");

        //            if ((i + 1) < listKhieuNaiInfo.Count)
        //            {
        //                string sNguoiTienXuLy = string.Empty;
        //                for (int j = i + 1; j < listKhieuNaiInfo.Count; j++)
        //                {
        //                    if (listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[i].KhieuNaiId)
        //                    {
        //                        if (listKhieuNaiInfo[j].DoiTacXuLyId == trungTamId && !sNguoiTienXuLy.Contains(listKhieuNaiInfo[j].NguoiXuLy))
        //                        {
        //                            sNguoiTienXuLy = string.Format("{0}{1},", sNguoiTienXuLy, listKhieuNaiInfo[j].NguoiXuLy);
        //                        }

        //                        if (listKhieuNaiInfo[j].DoiTacXuLyTruocId == trungTamId && !sNguoiTienXuLy.Contains(listKhieuNaiInfo[j].NguoiXuLyTruoc))
        //                        {
        //                            sNguoiTienXuLy = string.Format("{0}{1},", sNguoiTienXuLy, listKhieuNaiInfo[j].NguoiXuLyTruoc);
        //                        }

        //                        listKhieuNaiInfo.RemoveAt(j);
        //                        j--;
        //                    }
        //                    else
        //                    {
        //                        break;
        //                    }
        //                }

        //                row["NguoiTienXuLy"] = sNguoiTienXuLy.Length > 0 ? sNguoiTienXuLy.Trim(',') : string.Empty;
        //            }

        //            dtKhieuNai.Rows.Add(row);
        //            listKhieuNaiInfo.RemoveAt(i);
        //            i--;
        //        }
        //    }

        //    string sKhieuNaiId = string.Empty;
        //    if (dtKhieuNai != null && dtKhieuNai.Rows.Count > 0)
        //    {
        //        sKhieuNaiId = string.Format("{0} {1}", sKhieuNaiId, dtKhieuNai.Rows[0]["KhieuNaiId"].ToString());
        //        for (int i = 1; i < dtKhieuNai.Rows.Count; i++)
        //        {
        //            sKhieuNaiId = string.Format("{0} {1}", sKhieuNaiId, dtKhieuNai.Rows[i]["KhieuNaiId"].ToString());
        //        }

        //        whereClauseTiepNhan = string.Format("Id : ({0})", sKhieuNaiId);
        //        solrQuery = new SolrQuery(whereClauseTiepNhan);

        //        extraParamTiepNhan = new Dictionary<string, string>();
        //        extraParamTiepNhan.Add("fl", "Id, NoiDungPA");

        //        queryOptionTiepNhan = new QueryOptions();
        //        queryOptionTiepNhan.Start = 0;
        //        queryOptionTiepNhan.Rows = dtKhieuNai.Rows.Count;
        //        queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

        //        listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTiepNhan);
        //        if (listKhieuNaiInfo != null)
        //        {
        //            foreach (DataRow row in dtKhieuNai.Rows)
        //            {
        //                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
        //                {
        //                    if (row["KhieuNaiId"].ToString() == listKhieuNaiInfo[i].Id.ToString())
        //                    {
        //                        row["NoiDungPA"] = listKhieuNaiInfo[i].NoiDungPA;
        //                        listKhieuNaiInfo.RemoveAt(i);
        //                        break;
        //                    }
        //                }

        //            }
        //        }
        //    }


        //    return dtKhieuNai;
        //}

        ///// <summary>
        ///// Author : Phi Hoang Hai
        ///// Created date : 26/10/2013
        ///// Todo : Báo cáo tổng hợp theo phòng ban của trung tâm tính cước
        ///// </summary>
        ///// <param name="trungTamId"></param>
        ///// <param name="fromDate"></param>
        ///// <param name="toDate"></param>
        ///// <returns></returns>
        //public DataTable BaoCaoTongHopPAKNTheoPhongBanTTTC_Solr(int trungTamId, int fromDate, int toDate)
        //{            
        //    SolrQuery solrQuery = null;
        //    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

        //    QueryOptions queryOptionTiepNhan = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamLoaiKhieuNai = new Dictionary<string, string>();
        //    extraParamLoaiKhieuNai.Add("fl", @"");

        //    queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;

        //    queryOptionTiepNhan.Start = 0;
        //    queryOptionTiepNhan.Rows = 0;

        //    FacetParameters fpTiepNhan = new FacetParameters();
        //    SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("KhieuNaiId");
        //    facetField.MinCount = 1;
        //    fpTiepNhan.Queries.Add(facetField);
        //    queryOptionTiepNhan.Facet = fpTiepNhan;            

        //    //Where điều kiện
        //    string whereClause = string.Empty;
        //    string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}]", ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true));           

        //    DataTable dtPhongBan = new DataTable();
        //    dtPhongBan.Columns.Add("PhongBanId");
        //    dtPhongBan.Columns.Add("TenPhongBan");
        //    dtPhongBan.Columns.Add("SLTiepNhan");
        //    dtPhongBan.Columns.Add("SLDaXuLy");
        //    dtPhongBan.Columns.Add("SLTonDong");
        //    dtPhongBan.Columns.Add("SLQuaHan");

        //    List<PhongBanInfo> listPhongBan = new PhongBanImpl().GetListPhongBanByDoiTacId(trungTamId);
        //    if (listPhongBan != null && listPhongBan.Count > 0)
        //    {
        //        for (int i = 0; i < listPhongBan.Count; i++)
        //        {
        //            DataRow row = dtPhongBan.NewRow();
        //            row["PhongBanId"] = listPhongBan[i].Id;
        //            row["TenPhongBan"] = listPhongBan[i].Name;
        //            dtPhongBan.Rows.Add(row);

        //            whereClause = string.Format("{0} AND PhongBanXuLyId:{1}", whereClauseTiepNhan, listPhongBan[i].Id);
        //            solrQuery = new SolrQuery(whereClause);
        //            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
        //            IDictionary<string, ICollection<KeyValuePair<string, int>>> listFacetFields = listKhieuNaiInfo.FacetFields;
        //            row["SLTiepNhan"] = listFacetFields["KhieuNaiId"].Count;                       
        //        }
        //    }

        //    // Lấy dữ liệu tồn động
        //    string whereClauseTonDong = string.Format("NgayChuyenPhongBan:[{0} TO {1}] AND -TrangThai:3", ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true));            
        //    QueryOptions queryTonDong = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamTonDong = new Dictionary<string, string>();
        //    extraParamTonDong.Add("fl", @"");
        //    queryTonDong.ExtraParams = extraParamTonDong;
        //    queryTonDong.Start = 0;
        //    queryTonDong.Rows = 0;

        //    FacetParameters fpTonDong = new FacetParameters();
        //    SolrFacetFieldQuery facetFieldTonDong = new SolrFacetFieldQuery("PhongBanXuLyId");
        //    fpTonDong.Queries.Add(facetFieldTonDong);
        //    queryTonDong.Facet = fpTonDong;         
        //    solrQuery = new SolrQuery(whereClauseTonDong);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryTonDong);
        //    GetCountOfFacet(dtPhongBan, "PhongBanId", "SLTonDong", listKhieuNaiInfo);

        //    // Lấy dữ liệu quá hạn
        //    string whereClauseQuaHan = string.Format("NgayQuaHanPhongBanXuLySort:[{0} TO {1}] AND -TrangThai:3", fromDate, toDate);
        //    QueryOptions queryQuaHan = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamQuaHan = new Dictionary<string, string>();
        //    extraParamQuaHan.Add("fl", @"");
        //    queryQuaHan.ExtraParams = extraParamQuaHan;
        //    queryQuaHan.Start = 0;
        //    queryQuaHan.Rows = 0;

        //    FacetParameters fpQuaHan = new FacetParameters();
        //    SolrFacetFieldQuery facetFieldQuaHan = new SolrFacetFieldQuery("PhongBanXuLyId");
        //    fpQuaHan.Queries.Add(facetFieldQuaHan);
        //    queryQuaHan.Facet = fpQuaHan;
        //    solrQuery = new SolrQuery(whereClauseQuaHan);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryQuaHan);
        //    GetCountOfFacet(dtPhongBan, "PhongBanId", "SLQuaHan", listKhieuNaiInfo);

        //    // Dữ liệu đã xử lý
        //    if (dtPhongBan != null && dtPhongBan.Rows.Count > 0)
        //    {
        //        foreach (DataRow row in dtPhongBan.Rows)
        //        {
        //            row["SLDaXuLy"] = ConvertUtility.ToInt32(row["SLTiepNhan"], 0) - ConvertUtility.ToInt32(row["SLTonDong"], 0);
        //        }
        //    }

        //    return dtPhongBan;
        //}

        ///// <summary>
        ///// Author : Phi Hoang Hai
        ///// Created date : 26/10/2013
        ///// Todo : Báo cáo tổng hợp theo người dùng của trung tâm tính cước
        ///// </summary>
        ///// <param name="nguoiDungId"></param>
        ///// <param name="fromDate"></param>
        ///// <param name="toDate"></param>
        ///// <returns></returns>
        //public DataTable BaoCaoTongHopPAKNTheoNguoiDungTTTC_Solr(int phongBanId, int fromDate, int toDate)
        //{
        //    SolrQuery solrQuery = null;
        //    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

        //    QueryOptions queryOptionTiepNhan = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamTiepNhan = new Dictionary<string, string>();
        //    extraParamTiepNhan.Add("fl", @"");

        //    queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

        //    queryOptionTiepNhan.Start = 0;
        //    queryOptionTiepNhan.Rows = 0;

        //    FacetParameters fpTiepNhan = new FacetParameters();
        //    SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("KhieuNaiId");
        //    facetField.MinCount = 1;
        //    fpTiepNhan.Queries.Add(facetField);
        //    queryOptionTiepNhan.Facet = fpTiepNhan;

        //    //Where điều kiện
        //    string whereClause = string.Empty;
        //    string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}]", ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true));

        //    DataTable dtPhongBan = new DataTable();
        //    dtPhongBan.Columns.Add("TenTruyCap");
        //    dtPhongBan.Columns.Add("TenNguoiDung");
        //    dtPhongBan.Columns.Add("SLTiepNhan");
        //    dtPhongBan.Columns.Add("SLDaXuLy");
        //    dtPhongBan.Columns.Add("SLTonDong");
        //    dtPhongBan.Columns.Add("SLQuaHan");

        //    List<NguoiSuDungInfo> listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanId);
        //    if (listNguoiSuDung != null && listNguoiSuDung.Count > 0)
        //    {
        //        for (int i = 0; i < listNguoiSuDung.Count; i++)
        //        {
        //            DataRow row = dtPhongBan.NewRow();
        //            row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
        //            row["TenNguoiDung"] = listNguoiSuDung[i].TenDayDu;
        //            dtPhongBan.Rows.Add(row);

        //            whereClause = string.Format("{0} AND NguoiXuLy:{1}", whereClauseTiepNhan, listNguoiSuDung[i].TenTruyCap);
        //            solrQuery = new SolrQuery(whereClause);
        //            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
        //            IDictionary<string, ICollection<KeyValuePair<string, int>>> listFacetFields = listKhieuNaiInfo.FacetFields;
        //            row["SLTiepNhan"] = listFacetFields["KhieuNaiId"].Count;      
        //        }
        //    }

        //    // Lấy dữ liệu tồn động
        //    string whereClauseTonDong = string.Format("NgayChuyenPhongBan:[{0} TO {1}] AND -TrangThai:3", ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true));
        //    QueryOptions queryTonDong = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamTonDong = new Dictionary<string, string>();
        //    extraParamTonDong.Add("fl", @"");
        //    queryTonDong.ExtraParams = extraParamTonDong;
        //    queryTonDong.Start = 0;
        //    queryTonDong.Rows = 0;

        //    FacetParameters fpTonDong = new FacetParameters();
        //    SolrFacetFieldQuery facetFieldTonDong = new SolrFacetFieldQuery("NguoiXuLy");
        //    fpTonDong.Queries.Add(facetFieldTonDong);
        //    queryTonDong.Facet = fpTonDong;
        //    solrQuery = new SolrQuery(whereClauseTonDong);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryTonDong);
        //    GetCountOfFacet(dtPhongBan, "TenTruyCap", "SLTonDong", listKhieuNaiInfo);

        //    // Lấy dữ liệu quá hạn
        //    string whereClauseQuaHan = string.Format("NgayQuaHanPhongBanXuLySort:[{0} TO {1}] AND -TrangThai:3", fromDate, toDate);
        //    QueryOptions queryQuaHan = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamQuaHan = new Dictionary<string, string>();
        //    extraParamQuaHan.Add("fl", @"");
        //    queryQuaHan.ExtraParams = extraParamQuaHan;
        //    queryQuaHan.Start = 0;
        //    queryQuaHan.Rows = 0;

        //    FacetParameters fpQuaHan = new FacetParameters();
        //    SolrFacetFieldQuery facetFieldQuaHan = new SolrFacetFieldQuery("NguoiXuLy");
        //    fpQuaHan.Queries.Add(facetFieldQuaHan);
        //    queryQuaHan.Facet = fpQuaHan;
        //    solrQuery = new SolrQuery(whereClauseQuaHan);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryQuaHan);
        //    GetCountOfFacet(dtPhongBan, "TenTruyCap", "SLQuaHan", listKhieuNaiInfo);

        //    // Dữ liệu đã xử lý
        //    if (dtPhongBan != null && dtPhongBan.Rows.Count > 0)
        //    {
        //        foreach (DataRow row in dtPhongBan.Rows)
        //        {
        //            row["SLDaXuLy"] = ConvertUtility.ToInt32(row["SLTiepNhan"], 0) - ConvertUtility.ToInt32(row["SLTonDong"], 0);
        //        }
        //    }

        //    return dtPhongBan;
        //}

        ///// <summary>
        ///// Author : Phi Hoang Hai
        ///// Created date : 28/10/2013
        ///// Todo : Báo cáo chi tiết theo người dùng của trung tâm tính cước
        ///// </summary>
        ///// <param name="nguoiDungId"></param>
        ///// <param name="fromDate"></param>
        ///// <param name="toDate"></param>
        ///// <returns></returns>
        //public List<KhieuNai_ReportInfo> BaoCaoChiTietPAKNTheoNguoiDungTTTC_Solr(string listTenTruyCap, int fromDate, int toDate)
        //{
        //    if (listTenTruyCap == null || listTenTruyCap.Length == 0) return null;

        //    listTenTruyCap = listTenTruyCap.Replace(",","\" \"");
        //    listTenTruyCap = string.Format("\"{0}\"", listTenTruyCap);            

        //    SolrQuery solrQuery = null;
        //    List<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

        //    QueryOptions queryOption = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamTiepNhan = new Dictionary<string, string>();
        //    extraParamTiepNhan.Add("fl", @"Id,NguoiTiepNhan,NguoiXuLy,SoThueBao,LoaiKhieuNai,LinhVucChung,LinhVucCon,TrangThai,NoiDungPA,TrangThai,NgayTiepNhan,NgayQuaHan");

        //    queryOption.ExtraParams = extraParamTiepNhan;

        //    queryOption.Start = 0;
        //    queryOption.Rows = int.MaxValue;      

        //    List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
        //    listSortOrder.Add(new SolrNet.SortOrder("NguoiTiepNhan", Order.ASC));
        //    queryOption.OrderBy = listSortOrder;

        //    //Where điều kiện            
        //    string whereClause = string.Format("(NgayTiepNhanSort:[{0} TO {1}] OR NgayQuaHanSort:[{0} TO {1}]) AND (NguoiTiepNhan:({2}) OR NguoiXuLy:({2}))", fromDate, toDate, listTenTruyCap);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOption);

        //    return listKhieuNaiInfo;
        //}

        #endregion


        #region Báo cáo TTPTDV
        /// <summary>
        /// Báo cáo sô lương pa đã xử lý bởi người dùng
        /// </summary>
        /// <param name="infoUser"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable GetSoLuongPAKNDaXuLyUser_Solr(AdminInfo infoUser, DateTime fromDate, DateTime toDate)
        {
            DataTable dtNguoiDung = new DataTable();
            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);

            // Kiểm tra phòng ban có được phép đóng KN hay không?
            bool isAllowDongKN = false;
            string whereClause = string.Format("PhongBanId = {0} AND IsAllow = 1 AND PermissionSchemeId = " + PERMISSIONSCHEMES_DONGKN.ToString(), infoUser.PhongBanId);
            List<PhongBan_PermissionInfo> listPhongBanPermission = new PhongBan_PermissionImpl().GetListDynamic("*", whereClause, "");
            isAllowDongKN = listPhongBanPermission != null && listPhongBanPermission.Count > 0;

            dtNguoiDung.Columns.Add("TenTruyCap");
            dtNguoiDung.Columns.Add("TenNguoiXuLy");
            dtNguoiDung.Columns.Add("SLTiepNhan");
            dtNguoiDung.Columns.Add("SLDaXuLy");
            dtNguoiDung.Columns.Add("SLKNXuLyDaDong");
            dtNguoiDung.Columns.Add("SLTonDong");


            DataRow rowItem = dtNguoiDung.NewRow();
            rowItem["TenTruyCap"] = infoUser.Username;
            rowItem["TenNguoiXuLy"] = infoUser.FullName;


            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            SolrQuery solrQuery = null;

            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, TrangThai, NgayTiepNhan");

            queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            listSortOrder.Add(sortOrder);

            queryOptionTiepNhan.OrderBy = listSortOrder;

            //Where điều kiện               
            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId:{2} AND NguoiXuLy:{3}", sFromDate, sToDate, infoUser.PhongBanId, infoUser.Username);

            solrQuery = new SolrQuery(whereClauseTiepNhan);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);

            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {


                //DataRow row = dtNguoiDung.Rows[i];

                int soLuongTiepNhan = 0;


                List<int> listKhieuNaiIdTiepNhan = new List<int>();

                for (int j = 0; j < listKhieuNaiInfo.Count; j++)
                {
                    if (infoUser.Username.ToString() == listKhieuNaiInfo[j].NguoiXuLy)
                    {
                        if (!listKhieuNaiIdTiepNhan.Contains(listKhieuNaiInfo[j].KhieuNaiId))
                        {
                            soLuongTiepNhan++;
                            listKhieuNaiIdTiepNhan.Add(listKhieuNaiInfo[j].KhieuNaiId);
                        }
                    }


                }

                rowItem["SLTiepNhan"] = soLuongTiepNhan;





            }

            // Số lượng đã tham gia xử lý và số lượng KN tham gia xử lý đã được đóng            
            string whereClauseDaXuLy = string.Format("LDate:[{0} TO {1}] AND PhongBanXuLyId:{2} AND NguoiXuLy:{3}", sFromDate, sToDate, infoUser.PhongBanId, infoUser.Username);
            solrQuery = new SolrQuery(whereClauseDaXuLy);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);

            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {

                //DataRow row = dtNguoiDung.Rows[i];
                int soLuongDaXuLy = 0;
                int soLuongKNDaDongCuaKNDaXuLy = 0;
                var listKhieuNaiIdXuLy = new List<int>();

                for (int j = 0; j < listKhieuNaiInfo.Count; j++)
                {
                    if (infoUser.Username == listKhieuNaiInfo[j].NguoiXuLy &&
                        !listKhieuNaiIdXuLy.Contains(listKhieuNaiInfo[j].KhieuNaiId))
                    {
                        soLuongDaXuLy++;

                        if (listKhieuNaiInfo[j].TrangThai == (int)KhieuNai_TrangThai_Type.Đóng)
                        {
                            soLuongKNDaDongCuaKNDaXuLy++;
                        }

                        listKhieuNaiIdXuLy.Add(listKhieuNaiInfo[j].KhieuNaiId);
                    }
                }

                rowItem["SLDaXuLy"] = soLuongDaXuLy;
                rowItem["SLKNXuLyDaDong"] = soLuongKNDaDongCuaKNDaXuLy;



            } // end if(listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)

            // Tính số lượng tồn đọng (tính đến thời điểm hiện tại)            
            string whereClauseTonDong = string.Format("PhongBanXuLyId:{0} AND -TrangThai:3 AND NguoiXuLy:{1}", infoUser.PhongBanId, infoUser.Username);
            solrQuery = new SolrQuery(whereClauseTonDong);

            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"Id,PhongBanXuLyId, NgayQuaHanPhongBanXuLySort, NguoiXuLy");

            queryOptionTonDong.ExtraParams = extraParamTonDong;

            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTonDong);
            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {

                int soLuongTonDong = 0;
                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    if (listKhieuNaiInfo[i].NguoiXuLy.ToString() == infoUser.Username.ToString())
                    {
                        soLuongTonDong++;

                        listKhieuNaiInfo.RemoveAt(i);
                        i--;
                    }
                }

                rowItem["SLTonDong"] = soLuongTonDong;

            }
            dtNguoiDung.Rows.Add(rowItem);
            return dtNguoiDung;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 11/11/2013
        /// Edit : Thêm cột số lượng KN đã đóng mà người dùng đã tham gia xử lý.
        ///     Sửa lại logic tính số lượng đã xử lý và số lượng tồn
        ///         - Nếu phòng ban có quyền đóng khiếu nại thì 
        ///             + KN đã xử lý được tính khi KN đã được đóng
        ///             + KN tồn là khiếu nại chưa được đóng
        ///         - Nếu phòng ban không có quyền đóng khiếu nại thì
        ///             + KN đã xử lý là khiếu nại đã được chuyển cho phòng ban khác
        ///             + KN tồn là khiếu nại chưa được chuyển cho  phòng ban khác
        /// Todo : Lấy số lượng khiếu nại của người dùng
        /// </summary>
        /// <param name="listNguoiTiepNhan">Danh sách người dùng</param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable GetSoLuongPAKNDaXuLyTTPTDV_Solr(int trungTamId, int phongBanXuLyId, string listNguoiTiepNhan, DateTime fromDate, DateTime toDate)
        {
            DataTable dtNguoiDung = new DataTable();
            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);

            // Kiểm tra phòng ban có được phép đóng KN hay không?
            bool isAllowDongKN = false;
            string whereClause = string.Format("PhongBanId = {0} AND IsAllow = 1 AND PermissionSchemeId = " + PERMISSIONSCHEMES_DONGKN.ToString(), phongBanXuLyId);
            List<PhongBan_PermissionInfo> listPhongBanPermission = new PhongBan_PermissionImpl().GetListDynamic("*", whereClause, "");
            isAllowDongKN = listPhongBanPermission != null && listPhongBanPermission.Count > 0;

            dtNguoiDung.Columns.Add("TenTruyCap");
            dtNguoiDung.Columns.Add("TenNguoiXuLy");
            dtNguoiDung.Columns.Add("SLTiepNhan");
            dtNguoiDung.Columns.Add("SLDaXuLy");
            dtNguoiDung.Columns.Add("SLKNXuLyDaDong");
            dtNguoiDung.Columns.Add("SLTonDong");

            //List<PhongBanInfo> listPhongBan = new PhongBanImpl().GetListPhongBanByDoiTacId(trungTamId);
            //List<NguoiSuDungInfo> listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanXuLyId);
            List<NguoiSuDungInfo> listNguoiSuDung = new NguoiSuDungImpl().GetListDynamicJoin("a.*", "INNER JOIN PhongBan_User b ON a.Id = b.NguoiSuDungId", "b.PhongBanId =" + phongBanXuLyId, "TenDayDu ASC");
            if (listNguoiSuDung != null && listNguoiSuDung.Count > 0)
            {
                DataRow row = dtNguoiDung.NewRow();
                row["TenTruyCap"] = string.Empty;
                row["TenNguoiXuLy"] = string.Empty;

                dtNguoiDung.Rows.Add(row);

                for (int i = 0; i < listNguoiSuDung.Count; i++)
                {
                    row = dtNguoiDung.NewRow();
                    row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
                    row["TenNguoiXuLy"] = listNguoiSuDung[i].TenDayDu;

                    dtNguoiDung.Rows.Add(row);
                }
            }
            else
            {
                return null;
            }

            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            SolrQuery solrQuery = null;

            // Người tiếp nhận là người được người khác chuyển cho (NguoiXuLyId = X AND HanhDong:(0 1 2))
            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId:{2} AND HanhDong : (0 1 2)", sFromDate, sToDate, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClauseTiepNhan);
            QueryOptions queryOptionTiepNhan = new QueryOptions();
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, TrangThai, NgayTiepNhan");
            queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;
            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = 0;

            FacetParameters fpNguoiTiepNhan = new FacetParameters();
            SolrFacetFieldQuery sffqNguoiTiepNhan = new SolrFacetFieldQuery("NguoiXuLy");
            fpNguoiTiepNhan.Queries.Add(sffqNguoiTiepNhan);
            fpNguoiTiepNhan.Limit = -1;
            queryOptionTiepNhan.Facet = fpNguoiTiepNhan;
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
            GetCountOfFacet(dtNguoiDung, "TenTruyCap", "SLTiepNhan", listKhieuNaiInfo);

            // Người đã tham gia xử lý là người chuyển ngang hàng, chuyển xử lý, chuyển phản hồi, đóng khiếu nại
            //string whereClauseXuLy = string.Format("LDate:[{0} TO {1}] AND PhongBanXuLyTruocId:{2} AND HanhDong : (1 2 3)", sFromDate, sToDate, phongBanXuLyId);
            // Lấy ngày tiếp nhận bởi NgayTiepNhan của đơn vị được nhận chính là ngày LDate của NguoiXuLyTruoc
            string whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyTruocId:{2} AND HanhDong : (1 2 3)", sFromDate, sToDate, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClauseXuLy);
            QueryOptions queryOptionXuLy = new QueryOptions();
            var extraParamXuLy = new Dictionary<string, string>();
            extraParamXuLy.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, TrangThai, NgayTiepNhan");
            queryOptionXuLy.ExtraParams = extraParamXuLy;
            queryOptionXuLy.Start = 0;
            queryOptionXuLy.Rows = 0;

            FacetParameters fpNguoiXuLy = new FacetParameters();
            SolrFacetFieldQuery sffqNguoiXuLy = new SolrFacetFieldQuery("NguoiXuLyTruoc");
            fpNguoiXuLy.Queries.Add(sffqNguoiXuLy);
            fpNguoiXuLy.Limit = -1;
            queryOptionXuLy.Facet = fpNguoiXuLy;
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
            GetCountOfFacet(dtNguoiDung, "TenTruyCap", "SLDaXuLy", listKhieuNaiInfo);


            // Tính số lượng tồn đọng (tính đến thời điểm hiện tại)            
            string whereClauseTonDong = string.Format("PhongBanXuLyId:{0} AND -TrangThai:3", phongBanXuLyId);
            solrQuery = new SolrQuery(whereClauseTonDong);

            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"Id,PhongBanXuLyId, NgayQuaHanPhongBanXuLySort, NguoiXuLy");

            queryOptionTonDong.ExtraParams = extraParamTonDong;

            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = 0;
            FacetParameters fpTonDong = new FacetParameters();
            SolrFacetFieldQuery sfqTonDong = new SolrFacetFieldQuery("NguoiXuLy");
            fpTonDong.Queries.Add(sfqTonDong);
            queryOptionTonDong.Facet = fpTonDong;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTonDong);
            if (listKhieuNaiInfo != null)
            {
                GetCountOfFacet(dtNguoiDung, "TenTruyCap", "SLTonDong", listKhieuNaiInfo);
            }

            return dtNguoiDung;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 11/11/2013
        /// Todo : Lấy số lượng khiếu nại tồn đọng
        /// </summary>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable GetSoLuongPAKNDangTonDongTTPTDV_Solr(int trungTamId, int phongBanXuLyId, DateTime fromDate, DateTime toDate)
        {
            DataTable dtResult = this.GetSoLuongPAKNDaTiepNhanTTPTDV_Solr(trungTamId, phongBanXuLyId, fromDate, toDate);
            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 19/02/2014
        /// Todo : Lấy ra số liệu PAKN đang tồn đọng (lấy ở view vGQKN)
        /// </summary>
        /// <param name="trungTamId"></param>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable GetSoLuongPAKNDangTonDongTTPTDV_Solr(int trungTamId, int phongBanXuLyId)
        {
            DataTable dtResult = new DataTable();

            dtResult.Columns.Add("LoaiKhieuNaiId");
            dtResult.Columns.Add("LoaiKhieuNai");
            dtResult.Columns.Add("LinhVucChungId");
            dtResult.Columns.Add("LinhVucChung");
            dtResult.Columns.Add("LinhVucConId");
            dtResult.Columns.Add("LinhVucCon");
            dtResult.Columns.Add("SLTonDong");

            // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
            string whereClause = string.Format("DoiTacXuLyId:{0} AND PhongBanXuLyId:{1} AND -TrangThai:3", trungTamId, phongBanXuLyId);
            SolrQuery solrQuery = new SolrQuery(whereClause);
            QueryOptions qoTiepNhan = new QueryOptions();
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"");
            qoTiepNhan.ExtraParams = extraParamTiepNhan;
            qoTiepNhan.Start = 0;
            qoTiepNhan.Rows = 0;

            List<string> listFieldPivot = new List<string>();
            listFieldPivot.Add("LoaiKhieuNaiId,LinhVucChungId,LinhVucConId");

            //List<PivotFields> listPivotField = new List<PivotFields>();
            //listPivotField.Add(new PivotFields("LoaiKhieuNaiId","LinhVucChungId","LinhVucConId"));          


            FacetParameters fpTiepNhan = new FacetParameters();
            fpTiepNhan.Sort = true;
            SolrFacetPivotQuery fpqTiepNhan = new SolrFacetPivotQuery();
            fpqTiepNhan.Fields = listFieldPivot;
            //fpqTiepNhan.Fields = listPivotField;
            fpTiepNhan.Queries.Add(fpqTiepNhan);
            qoTiepNhan.Facet = fpTiepNhan;

            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                foreach (var pivot in listKhieuNaiInfo.FacetPivots)
                {
                    foreach (var itemLoaiKhieuNai in pivot.Value)
                    {
                        if (itemLoaiKhieuNai.HasChildPivots)
                        {
                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                            {
                                if (itemLinhVucChung.HasChildPivots)
                                {
                                    foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                                    {
                                        DataRow row = dtResult.NewRow();
                                        row["LoaiKhieuNaiId"] = itemLoaiKhieuNai.Value;
                                        row["LinhVucChungId"] = itemLinhVucChung.Value;
                                        row["LinhVucConId"] = itemLinhVucCon.Value;
                                        row["SLTonDong"] = itemLinhVucCon.Count;
                                        dtResult.Rows.Add(row);
                                    } // end foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                                } // end if (itemLinhVucChung.HasChildPivots)
                            } // end foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                        } // end if (itemLoaiKhieuNai.HasChildPivots)
                    } // end foreach (var itemLoaiKhieuNai in pivot.Value)
                } // end foreach (var pivot in listKhieuNaiInfo.FacetPivots)
            } // end if (listKhieuNaiInfo != null)

            if (dtResult != null && dtResult.Rows.Count > 0)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    for (int indexLoaiKhieuNai = 0; indexLoaiKhieuNai < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLoaiKhieuNai++)
                    {
                        if (row["LoaiKhieuNaiId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLoaiKhieuNai].Id.ToString())
                        {
                            row["LoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLoaiKhieuNai].Name;

                            for (int indexLinhVucChung = 0; indexLinhVucChung < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLinhVucChung++)
                            {
                                if (row["LinhVucChungId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucChung].Id.ToString())
                                {
                                    row["LinhVucChung"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucChung].Name;

                                    for (int indexLinhVucCon = 0; indexLinhVucCon < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLinhVucCon++)
                                    {
                                        if (row["LinhVucConId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucCon].Id.ToString())
                                        {
                                            row["LinhVucCon"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucCon].Name;
                                        }
                                    }
                                }
                            }
                        }
                    } // end for (int indexLoaiKhieuNai = 0; indexLoaiKhieuNai < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLoaiKhieuNai++)
                } // end foreach (DataRow row in dtResult.Rows)
            }

            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 11/11/2013
        /// Todo : Lấy số lượng khiếu nại tiếp nhận và đã xử lý
        /// </summary>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable GetSoLuongPAKNDaTiepNhanTTPTDV_Solr(int trungTamId, int phongBanXuLyId, DateTime fromDate, DateTime toDate)
        {
            DataTable dtResult = new DataTable();

            dtResult.Columns.Add("LoaiKhieuNaiId");
            dtResult.Columns.Add("LoaiKhieuNai");
            dtResult.Columns.Add("LinhVucChungId");
            dtResult.Columns.Add("LinhVucChung");
            dtResult.Columns.Add("LinhVucConId");
            dtResult.Columns.Add("LinhVucCon");
            dtResult.Columns.Add("SLTiepNhan");
            dtResult.Columns.Add("SLDaXuLy");
            //dtResult.Columns.Add("SLTonDong");

            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);

            // listKhieuNaiIdTiepNhan : Danh sách KhieuNaiId được tiếp nhận
            List<int> listKhieuNaiIdTiepNhan = new List<int>();

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
            string whereClause = string.Format("NgayTiepNhan:[{0} TO {1}] AND (DoiTacXuLyTruocId:{2} OR DoiTacXuLyId:{2}) AND (PhongBanXuLyTruocId:{3} OR PhongBanXuLyId:{3})", sFromDate, sToDate, trungTamId, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            QueryOptions qoTiepNhan = new QueryOptions();
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"");
            qoTiepNhan.ExtraParams = extraParamTiepNhan;
            qoTiepNhan.Start = 0;
            qoTiepNhan.Rows = 0;

            List<string> listFieldPivot = new List<string>();
            listFieldPivot.Add("LoaiKhieuNaiId,LinhVucChungId,LinhVucConId");

            //List<PivotFields> listPivotField = new List<PivotFields>();
            //listPivotField.Add(new PivotFields("LoaiKhieuNaiId","LinhVucChungId","LinhVucConId"));

            FacetParameters fpTiepNhan = new FacetParameters();
            fpTiepNhan.Sort = true;
            SolrFacetPivotQuery fpqTiepNhan = new SolrFacetPivotQuery();
            fpqTiepNhan.Fields = listFieldPivot;
            //fpqTiepNhan.Fields = listPivotField;
            fpTiepNhan.Queries.Add(fpqTiepNhan);
            qoTiepNhan.Facet = fpTiepNhan;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                foreach (var pivot in listKhieuNaiInfo.FacetPivots)
                {
                    foreach (var itemLoaiKhieuNai in pivot.Value)
                    {
                        if (itemLoaiKhieuNai.HasChildPivots)
                        {
                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                            {
                                if (itemLinhVucChung.HasChildPivots)
                                {
                                    foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                                    {
                                        DataRow row = dtResult.NewRow();
                                        row["LoaiKhieuNaiId"] = itemLoaiKhieuNai.Value;
                                        row["LinhVucChungId"] = itemLinhVucChung.Value;
                                        row["LinhVucConId"] = itemLinhVucCon.Value;
                                        dtResult.Rows.Add(row);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"*");

            queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            listSortOrder.Add(sortOrder);
            queryOptionTiepNhan.OrderBy = listSortOrder;

            //Where điều kiện danh sách khiếu nại       
            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND -PhongBanXuLyTruocId:{2} AND PhongBanXuLyId:{2}", sFromDate, sToDate, phongBanXuLyId);

            solrQuery = new SolrQuery(whereClauseTiepNhan);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);

            if (listKhieuNaiInfo != null)
            {
                // Xóa các bản ghi trùng KhieuNaiId_PhongBanXuLyId (chỉ lấy ra bản ghi đầu tiên)                
                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    int iCheck = listKhieuNaiInfo[i].KhieuNaiId;
                    if (listKhieuNaiIdTiepNhan.Contains(iCheck))
                    {
                        listKhieuNaiInfo.RemoveAt(i);
                        i--;
                    }
                    else
                    {
                        listKhieuNaiIdTiepNhan.Add(iCheck);
                    }
                }

                if (dtResult != null && dtResult.Rows.Count > 0)
                {
                    for (int i = 0; i < dtResult.Rows.Count; i++)
                    {
                        DataRow row = dtResult.Rows[i];

                        int soLuongTiepNhan = 0;

                        for (int j = 0; j < listKhieuNaiInfo.Count; j++)
                        {
                            if (row["LoaiKhieuNaiId"].ToString() != listKhieuNaiInfo[j].LoaiKhieuNaiId.ToString()
                                || row["LinhVucChungId"].ToString() != listKhieuNaiInfo[j].LinhVucChungId.ToString()
                                || row["LinhVucConId"].ToString() != listKhieuNaiInfo[j].LinhVucConId.ToString())
                            {
                                continue;
                            }

                            soLuongTiepNhan++;
                        }

                        row["SLTiepNhan"] = soLuongTiepNhan;
                    } // end for (int i = 0; i < dtResult.Rows.Count; i++)          
                } // end if (dtResult != null && dtResult.Rows.Count > 0)
            } // end if (listKhieuNaiInfo != null)   

            // Tính số lượng đã xử lý từ danh sách KhieuNai đã tiếp nhận ở trên
            string whereClauseDaXuLy = string.Format("LDate : [{0} TO {1}] AND PhongBanXuLyTruocId:{2} AND -PhongBanXuLyId:{2}", sFromDate, sToDate, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClauseDaXuLy);

            QueryOptions queryOptionDaXuLy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamDaXuLy = new Dictionary<string, string>();
            extraParamDaXuLy.Add("fl", @"Id, KhieuNaiId, PhongBanXuLyId, NgayQuaHanPhongBanXuLySort, LoaiKhieuNaiId, LinhVucChungId, LinhVucConId");

            queryOptionDaXuLy.ExtraParams = extraParamDaXuLy;

            queryOptionDaXuLy.Start = 0;
            queryOptionDaXuLy.Rows = int.MaxValue;

            //SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
            //List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            //listSortOrder.Add(sortOrder);
            queryOptionDaXuLy.OrderBy = listSortOrder;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionDaXuLy);
            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {
                // Lấy ra các KhieuNaiId đã xử lý duy nhất
                List<int> listKhieuNaiIdDaXuLy = new List<int>();
                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    if (listKhieuNaiIdDaXuLy.Contains(listKhieuNaiInfo[i].KhieuNaiId))
                    {
                        listKhieuNaiInfo.RemoveAt(i);
                        i--;
                    }
                    else
                    {
                        listKhieuNaiIdDaXuLy.Add(listKhieuNaiInfo[i].KhieuNaiId);
                    }
                } // end for (int i = 0; i < listKhieuNaiInfo.Count;i++ )

                foreach (DataRow row in dtResult.Rows)
                {
                    int soLuongDaXuLy = 0;
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        if (row["LoaiKhieuNaiId"].ToString() != listKhieuNaiInfo[i].LoaiKhieuNaiId.ToString()
                                || row["LinhVucChungId"].ToString() != listKhieuNaiInfo[i].LinhVucChungId.ToString()
                                || row["LinhVucConId"].ToString() != listKhieuNaiInfo[i].LinhVucConId.ToString())
                        {
                            continue;
                        }

                        if (listKhieuNaiIdTiepNhan.Contains(listKhieuNaiInfo[i].KhieuNaiId))
                        {
                            soLuongDaXuLy++;
                        }
                    }

                    row["SLDaXuLy"] = soLuongDaXuLy;
                } // end foreach (DataRow row in dtResult.Rows)
            }

            // Xóa các dòng mà 2 cột số lượng đều = 0
            for (int i = 0; i < dtResult.Rows.Count; i++)
            {
                if (dtResult.Rows[i]["SLTiepNhan"].ToString() == "0" && dtResult.Rows[i]["SLDaXuLy"].ToString() == "0")
                {
                    dtResult.Rows.RemoveAt(i);
                    i--;
                }
            } // end for (int i = 0; i < dtResult.Rows.Count;i++ )

            foreach (DataRow row in dtResult.Rows)
            {
                for (int indexLoaiKhieuNai = 0; indexLoaiKhieuNai < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLoaiKhieuNai++)
                {
                    if (row["LoaiKhieuNaiId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLoaiKhieuNai].Id.ToString())
                    {
                        row["LoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLoaiKhieuNai].Name;

                        for (int indexLinhVucChung = 0; indexLinhVucChung < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLinhVucChung++)
                        {
                            if (row["LinhVucChungId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucChung].Id.ToString())
                            {
                                row["LinhVucChung"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucChung].Name;

                                for (int indexLinhVucCon = 0; indexLinhVucCon < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLinhVucCon++)
                                {
                                    if (row["LinhVucConId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucCon].Id.ToString())
                                    {
                                        row["LinhVucCon"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucCon].Name;
                                    }
                                }
                            }
                        }
                    }
                }
            } // end foreach (DataRow row in dtResult.Rows)    

            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 11/11/2013
        /// Todo : Lấy danh sách khiếu nại
        /// </summary>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable GetChiTietPAKNDaTiepNhanTTPTDV_Solr(int trungTamId, int phongBanXuLyId, DateTime fromDate, DateTime toDate, int pageIndex, int pageSize)
        {
            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);

            List<NguoiSuDungInfo> listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanXuLyId);
            List<string> listTenTruyCap = new List<string>();
            if (listNguoiSuDung != null)
            {
                for (int i = 0; i < listNguoiSuDung.Count; i++)
                {
                    listTenTruyCap.Add(listNguoiSuDung[i].TenTruyCap);
                }

            }
            else
            {
                return null;
            }

            DataTable dtKhieuNai = new DataTable();
            dtKhieuNai.Columns.Add("KhieuNaiId");
            dtKhieuNai.Columns.Add("TrangThai");
            dtKhieuNai.Columns.Add("DoUuTien");
            dtKhieuNai.Columns.Add("SoThueBao");
            dtKhieuNai.Columns.Add("LoaiKhieuNai");
            dtKhieuNai.Columns.Add("LinhVucChung");
            dtKhieuNai.Columns.Add("LinhVucCon");
            dtKhieuNai.Columns.Add("NoiDungPA");
            dtKhieuNai.Columns.Add("PhongBanXuLy");
            dtKhieuNai.Columns.Add("NguoiTiepNhan");
            dtKhieuNai.Columns.Add("NguoiXuLy");
            dtKhieuNai.Columns.Add("NguoiTienXuLy");
            dtKhieuNai.Columns.Add("NgayTiepNhan");
            dtKhieuNai.Columns.Add("NgayQuaHan");

            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"*");

            queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            listSortOrder.Add(sortOrder);

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");
            GroupingParameters gp = new GroupingParameters();
            gp.Fields = listGroupField;
            gp.Limit = 10;
            gp.Main = true;
            gp.OrderBy = listSortOrder;
            queryOptionTiepNhan.Grouping = gp;

            //Where điều kiện            
            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND -PhongBanXuLyTruocId:{2} AND PhongBanXuLyId:{2}", sFromDate, sToDate, phongBanXuLyId);

            SolrQuery solrQuery = new SolrQuery(whereClauseTiepNhan);
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);

            if (listKhieuNaiInfo != null)
            {
                // Xóa các bản ghi trùng KhieuNaiId_PhongBanXuLyId (chỉ lấy ra bản ghi đầu tiên)
                List<int> listKhieuNaiIdTiepNhan = new List<int>();
                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    if (listKhieuNaiIdTiepNhan.Contains(listKhieuNaiInfo[i].KhieuNaiId))
                    {
                        listKhieuNaiInfo.RemoveAt(i);
                        i--;
                    }
                    else
                    {
                        listKhieuNaiIdTiepNhan.Add(listKhieuNaiInfo[i].KhieuNaiId);
                    }
                }

                // Sort KhieuNaiId theo số thứ tự tăng dần
                for (int i = 0; i < listKhieuNaiInfo.Count - 1; i++)
                {
                    for (int j = i + 1; j < listKhieuNaiInfo.Count; j++)
                    {
                        if (listKhieuNaiInfo[i].KhieuNaiId > listKhieuNaiInfo[j].KhieuNaiId)
                        {
                            KhieuNai_ReportInfo objTemp = listKhieuNaiInfo[i];
                            listKhieuNaiInfo[i] = listKhieuNaiInfo[j];
                            listKhieuNaiInfo[j] = objTemp;
                        }
                    }
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    DataRow row = dtKhieuNai.NewRow();

                    row["TrangThai"] = listKhieuNaiInfo[i].DoiTacXuLyId != trungTamId ? "Đã xử lý" : "Đang xử lý"; //listKhieuNaiInfo[i].TrangThai; 
                    row["KhieuNaiId"] = listKhieuNaiInfo[i].KhieuNaiId;
                    row["DoUuTien"] = listKhieuNaiInfo[i].DoUuTien;
                    row["SoThueBao"] = listKhieuNaiInfo[i].SoThueBao;
                    row["LoaiKhieuNai"] = listKhieuNaiInfo[i].LoaiKhieuNai;
                    row["LinhVucChung"] = listKhieuNaiInfo[i].LinhVucChung;
                    row["LinhVucCon"] = listKhieuNaiInfo[i].LinhVucCon;
                    row["NoiDungPA"] = listKhieuNaiInfo[i].NoiDungPA;
                    row["PhongBanXuLy"] = "";
                    row["NguoiTiepNhan"] = listKhieuNaiInfo[i].DoiTacXuLyId != trungTamId ? listKhieuNaiInfo[i].NguoiXuLyTruoc : listKhieuNaiInfo[i].NguoiXuLy;
                    row["NguoiXuLy"] = listKhieuNaiInfo[i].DoiTacXuLyId != trungTamId ? listKhieuNaiInfo[i].NguoiXuLyTruoc : listKhieuNaiInfo[i].NguoiXuLy;
                    row["NgayTiepNhan"] = listKhieuNaiInfo[i].NgayTiepNhan.ToString("dd/MM/yyyy");
                    row["NgayQuaHan"] = listKhieuNaiInfo[i].NgayQuaHan.ToString("dd/MM/yyyy");

                    row["NguoiTienXuLy"] = listKhieuNaiInfo[i].NguoiXuLyTruoc;

                    dtKhieuNai.Rows.Add(row);
                    listKhieuNaiInfo.RemoveAt(i);
                    i--;
                }
            }

            //    string sKhieuNaiId = string.Empty;
            //    if (dtKhieuNai != null && dtKhieuNai.Rows.Count > 0)
            //    {
            //        sKhieuNaiId = string.Format("{0} {1}", sKhieuNaiId, dtKhieuNai.Rows[0]["KhieuNaiId"].ToString());
            //        for (int i = 1; i < dtKhieuNai.Rows.Count; i++)
            //        {
            //            sKhieuNaiId = string.Format("{0} {1}", sKhieuNaiId, dtKhieuNai.Rows[i]["KhieuNaiId"].ToString());
            //        }

            //        whereClauseTiepNhan = string.Format("Id : ({0})", sKhieuNaiId);
            //        solrQuery = new SolrQuery(whereClauseTiepNhan);

            //        extraParamTiepNhan = new Dictionary<string, string>();
            //        extraParamTiepNhan.Add("fl", "Id, NoiDungPA");

            //        queryOptionTiepNhan = new QueryOptions();
            //        queryOptionTiepNhan.Start = 0;
            //        queryOptionTiepNhan.Rows = dtKhieuNai.Rows.Count;
            //        queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

            //        try
            //        {
            //            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTiepNhan);
            //            if (listKhieuNaiInfo != null)
            //            {
            //                foreach (DataRow row in dtKhieuNai.Rows)
            //                {
            //                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
            //                    {
            //                        if (row["KhieuNaiId"].ToString() == listKhieuNaiInfo[i].Id.ToString())
            //                        {
            //                            row["NoiDungPA"] = listKhieuNaiInfo[i].NoiDungPA;
            //                            listKhieuNaiInfo.RemoveAt(i);
            //                            break;
            //                        }
            //                    }

            //                }
            //            }
            //        }
            //        catch(Exception ex)
            //        {

            //        }


            //    }


            return dtKhieuNai;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 18/09/2014
        /// Todo : Thống kê số lượng khiếu nại dịch vụ
        /// </summary>
        /// <param name="trungTamId"></param>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable GetSoLuongKhieuNaiDichVuToanMang_Solr(int khuVucId, List<int> listLoaiKhieuNaiId, DateTime fromDate, DateTime toDate)
        {
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("LoaiKhieuNaiId");
            dtResult.Columns.Add("LoaiKhieuNai");
            dtResult.Columns.Add("LinhVucChungId");
            dtResult.Columns.Add("LinhVucChung");
            dtResult.Columns.Add("LinhVucConId");
            dtResult.Columns.Add("LinhVucCon");
            dtResult.Columns.Add("SLTiepNhan");
            dtResult.Columns.Add("SLDaDong");

            List<DoiTacInfo> listDoiTac = null;
            string whereClauseDoiTacTiepNhan = string.Empty;
            string whereClauseDoiTacXuLy = string.Empty;

            if (khuVucId != DoiTacInfo.DoiTacIdValue.VNP)
            {
                listDoiTac = new DoiTacImpl().GetListByDonViTrucThuoc(khuVucId);
                if (listDoiTac != null && listDoiTac.Count > 0)
                {
                    whereClauseDoiTacTiepNhan = listDoiTac[0].Id.ToString();
                    for (int i = 1; i < listDoiTac.Count; i++)
                    {
                        whereClauseDoiTacTiepNhan = string.Format("{0} {1}", whereClauseDoiTacTiepNhan, listDoiTac[i].Id);
                    }

                    whereClauseDoiTacXuLy = whereClauseDoiTacTiepNhan;

                    whereClauseDoiTacTiepNhan = string.Format(" AND DoiTacId : ({0})", whereClauseDoiTacTiepNhan);
                    whereClauseDoiTacXuLy = string.Format(" AND DoiTacXuLyId : ({0})", whereClauseDoiTacXuLy);
                }
            }

            string sFromDate = ConvertUtility.ConvertDateTimeToSolr(fromDate);
            string sToDate = ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999);

            string whereClauseLoaiKhieuNai = string.Empty;
            string whereClauseLoaiKhieuNaiSql = string.Empty;
            if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
            {
                whereClauseLoaiKhieuNai = listLoaiKhieuNaiId[0].ToString();
                for (int i = 1; i < listLoaiKhieuNaiId.Count; i++)
                {
                    whereClauseLoaiKhieuNai = string.Format("{0} {1}", whereClauseLoaiKhieuNai, listLoaiKhieuNaiId[i]);
                }

                whereClauseLoaiKhieuNaiSql = string.Format("Id IN ({0}) OR ParentId IN ({0}) OR ParentLoaiKhieuNaiId IN ({0})", whereClauseLoaiKhieuNai.Replace(" ", ","));

                whereClauseLoaiKhieuNai = string.Format(" AND LoaiKhieuNaiId : ({0})", whereClauseLoaiKhieuNai);

            }

            //List<LoaiKhieuNaiInfo> listLoaiKhieuNaiInfo = new LoaiKhieuNaiImpl().GetListSortHierarchyByLoaiKhieuNaiId(listLoaiKhieuNaiId[0]);
            //if (listLoaiKhieuNaiInfo != null)
            //{
            //    List<int> listLoaiKhieuNaiVasId = ListLoaiKhieuNaiVAS();
            //    if (listLoaiKhieuNaiVasId != null && listLoaiKhieuNaiVasId.Count > 0)
            //    {
            //        for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
            //        {
            //            if (!listLoaiKhieuNaiVasId.Contains(listLoaiKhieuNaiInfo[i].Id))
            //            {
            //                listLoaiKhieuNaiInfo.RemoveAt(i);
            //                i--;
            //            }
            //        } // end for(int i=0;i<listLoaiKhieuNaiInfo.Count;i++)
            //    } // end if(listLoaiKhieuNaiVasId != null && listLoaiKhieuNaiVasId.Count > 0)
            //List<LoaiKhieuNaiInfo> listLoaiKhieuNaiInfo = new LoaiKhieuNaiImpl().ListLoaiKhieuNaiThuocDonVi(DoiTacInfo.DoiTacIdValue.PTDV);
            List<LoaiKhieuNaiInfo> listLoaiKhieuNaiThuocPTDV = new LoaiKhieuNaiImpl().GetListDynamic("*", "ParentId=0 AND ThuocDonVi=" + DoiTacInfo.DoiTacIdValue.PTDV, "");
            if (listLoaiKhieuNaiThuocPTDV != null)
            {
                for (int i = 0; i < listLoaiKhieuNaiThuocPTDV.Count; i++)
                {
                    listLoaiKhieuNaiId.Add(listLoaiKhieuNaiThuocPTDV[i].Id);
                }
            }
            List<LoaiKhieuNaiInfo> listLoaiKhieuNaiInfo = new LoaiKhieuNaiImpl().GetListSortHierarchyByLoaiKhieuNaiId(listLoaiKhieuNaiId);
            if (listLoaiKhieuNaiInfo != null)
            {
                for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
                {
                    DataRow row = dtResult.NewRow();
                    if (listLoaiKhieuNaiInfo[i].Cap == 1)
                    {
                        row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
                        row["LinhVucChungId"] = 0;
                        row["LinhVucConId"] = 0;
                    }
                    else if (listLoaiKhieuNaiInfo[i].Cap == 2)
                    {
                        row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].ParentId;
                        row["LinhVucChungId"] = listLoaiKhieuNaiInfo[i].Id;
                        row["LinhVucConId"] = 0;
                    }
                    else if (listLoaiKhieuNaiInfo[i].Cap == 3)
                    {
                        row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].ParentLoaiKhieuNaiId;
                        row["LinhVucChungId"] = listLoaiKhieuNaiInfo[i].ParentId;
                        row["LinhVucConId"] = listLoaiKhieuNaiInfo[i].Id;
                    }

                    dtResult.Rows.Add(row);
                }
            }

            // listKhieuNaiIdTiepNhan : Danh sách KhieuNaiId được tiếp nhận
            List<int> listKhieuNaiIdTiepNhan = new List<int>();

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] {2} {3}", sFromDate, sToDate, whereClauseLoaiKhieuNai, whereClauseDoiTacTiepNhan);
            solrQuery = new SolrQuery(whereClauseTiepNhan);
            QueryOptions qoTiepNhan = new QueryOptions();
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"Id, LoaiKhieuNaiId, LinhVucChungId, LinhVucConId");
            qoTiepNhan.ExtraParams = extraParamTiepNhan;
            qoTiepNhan.Start = 0;
            qoTiepNhan.Rows = int.MaxValue;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    int soLuongTiepNhan = 0;
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        if (row["LoaiKhieuNaiId"].ToString() != listKhieuNaiInfo[i].LoaiKhieuNaiId.ToString()
                                || row["LinhVucChungId"].ToString() != listKhieuNaiInfo[i].LinhVucChungId.ToString()
                                || row["LinhVucConId"].ToString() != listKhieuNaiInfo[i].LinhVucConId.ToString())
                        {
                            continue;
                        }

                        soLuongTiepNhan++;
                    }

                    row["SLTiepNhan"] = soLuongTiepNhan;
                } // end foreach (DataRow row in dtResult.Rows)
            }

            // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
            string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] {2} {3}", sFromDate, sToDate, whereClauseLoaiKhieuNai, whereClauseDoiTacXuLy);
            solrQuery = new SolrQuery(whereClauseDaDong);
            QueryOptions qoDongKN = new QueryOptions();
            var extraParamDongKN = new Dictionary<string, string>();
            extraParamDongKN.Add("fl", @"Id, LoaiKhieuNaiId, LinhVucChungId, LinhVucConId");
            qoDongKN.ExtraParams = extraParamDongKN;
            qoDongKN.Start = 0;
            qoDongKN.Rows = int.MaxValue;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    int soLuongDaDong = 0;
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        if (row["LoaiKhieuNaiId"].ToString() != listKhieuNaiInfo[i].LoaiKhieuNaiId.ToString()
                                || row["LinhVucChungId"].ToString() != listKhieuNaiInfo[i].LinhVucChungId.ToString()
                                || row["LinhVucConId"].ToString() != listKhieuNaiInfo[i].LinhVucConId.ToString())
                        {
                            continue;
                        }

                        soLuongDaDong++;
                    }

                    row["SLDaDong"] = soLuongDaDong;
                } // end foreach (DataRow row in dtResult.Rows)
            }

            //// Xóa các dòng mà 2 cột số lượng đều = 0
            //for (int i = 0; i < dtResult.Rows.Count; i++)
            //{
            //    if (dtResult.Rows[i]["SLTiepNhan"].ToString() == "0" && dtResult.Rows[i]["SLDaDong"].ToString() == "0")
            //    {
            //        dtResult.Rows.RemoveAt(i);
            //        i--;
            //    }
            //} // end for (int i = 0; i < dtResult.Rows.Count;i++ )

            foreach (DataRow row in dtResult.Rows)
            {
                for (int indexLoaiKhieuNai = 0; indexLoaiKhieuNai < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLoaiKhieuNai++)
                {
                    if (row["LoaiKhieuNaiId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLoaiKhieuNai].Id.ToString())
                    {
                        row["LoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLoaiKhieuNai].Name;

                        for (int indexLinhVucChung = 0; indexLinhVucChung < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLinhVucChung++)
                        {
                            if (row["LinhVucChungId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucChung].Id.ToString())
                            {
                                row["LinhVucChung"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucChung].Name;

                                for (int indexLinhVucCon = 0; indexLinhVucCon < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLinhVucCon++)
                                {
                                    if (row["LinhVucConId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucCon].Id.ToString())
                                    {
                                        row["LinhVucCon"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucCon].Name;
                                    }
                                }
                            }
                        }
                    }
                }
            } // end foreach (DataRow row in dtResult.Rows)    

            return dtResult;
        }

        ///// <summary>
        ///// Author : Phi Hoang Hai
        ///// Created date : 21/10/2014
        ///// Todo : Báo cáo tình hình khiếu nại dịch vụ  của TT PTDV
        ///// </summary>
        ///// <param name="doiTacId"></param>
        ///// <param name="fromDate"></param>
        ///// <param name="toDate"></param>
        ///// <returns>
        /////     DataSet có 3 DataTable
        /////         - DataTable1 : Số lượng khiếu nại tiếp nhận trong khoảng thời gian fromDate & toDate
        /////         - DataTable2 : Số lượng khiếu nại của từng của lĩnh vực
        /////         - DataTable3 : Báo cáo tổng hợp  phòng ban
        ///// </returns>
        //public DataSet BaoCaoTinhHinhKhieuNaiDichVuTTPTDV_Solr(int doiTacId, DateTime fromDate, DateTime toDate)
        //{
        //    int LOAI_KHIEU_NAI_DICH_VU_ID = 26;

        //    DataSet dsResult = new DataSet();

        //    string sFromDate = ConvertUtility.ConvertDateTimeToSolr(fromDate);
        //    string sToDate = ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999);

        //    SolrQuery solrQuery = null;
        //    string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND LoaiKhieuNaiId:{2}", sFromDate, sToDate, LOAI_KHIEU_NAI_DICH_VU_ID);
        //    solrQuery = new SolrQuery(whereClauseTiepNhan);
        //    QueryOptions qoTiepNhan = new QueryOptions();
        //    var extraParamTiepNhan = new Dictionary<string, string>();
        //    extraParamTiepNhan.Add("fl", @"Id, LoaiKhieuNaiId, LinhVucChungId, LinhVucConId");
        //    qoTiepNhan.ExtraParams = extraParamTiepNhan;
        //    qoTiepNhan.Start = 0;
        //    qoTiepNhan.Rows = 0;

        //    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);
        //    DataTable dtSoLuongKN = new DataTable();
        //    dtSoLuongKN.Columns.Add("SoLuongTiepNhan");

        //    DataRow row = dtSoLuongKN.NewRow();
        //    row[0] = listKhieuNaiInfo.NumFound;
        //    dtSoLuongKN.Rows.Add(row);
        //    dsResult.Tables.Add(dtSoLuongKN);

        //    DataTable dtSoLuongLoaiKN = new DataTable();
        //    dtSoLuongLoaiKN.Columns.Add("LoaiKhieuNaiId");
        //    dtSoLuongLoaiKN.Columns.Add("LinhVucChungId");
        //    dtSoLuongLoaiKN.Columns.Add("LinhVucConId");
        //    dtSoLuongLoaiKN.Columns.Add("TenLoaiKN");
        //    dtSoLuongLoaiKN.Columns.Add("SoLuong");

        //    List<LoaiKhieuNaiInfo> listLoaiKhieuNaiInfo = new LoaiKhieuNaiImpl().GetListSortHierarchyByLoaiKhieuNaiId(LOAI_KHIEU_NAI_DICH_VU_ID);
        //    if (listLoaiKhieuNaiInfo != null)
        //    {
        //        for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
        //        {
        //            DataRow rowLoaiKhieuNai = dtSoLuongLoaiKN.NewRow();
        //            rowLoaiKhieuNai["LoaiKhieuNaiId"] = LOAI_KHIEU_NAI_DICH_VU_ID;
        //            if (listLoaiKhieuNaiInfo[i].Cap == 2)
        //            {
        //                rowLoaiKhieuNai["LinhVucChungId"] = listLoaiKhieuNaiInfo[i].Id;
        //                rowLoaiKhieuNai["LinhVucConId"] = 0;
        //            }
        //            else if (listLoaiKhieuNaiInfo[i].Cap == 3)
        //            {
        //                rowLoaiKhieuNai["LinhVucChungId"] = listLoaiKhieuNaiInfo[i].ParentId;
        //                rowLoaiKhieuNai["LinhVucConId"] = listLoaiKhieuNaiInfo[i].Id;
        //            }

        //            rowLoaiKhieuNai["TenLoaiKN"] = listLoaiKhieuNaiInfo[i].Name;
        //            rowLoaiKhieuNai["SoLuong"] = "0";

        //            dtSoLuongLoaiKN.Rows.Add(rowLoaiKhieuNai);
        //        }
        //    } // end if (listLoaiKhieuNaiInfo != null)


        //    string whereClauseLinhVucCon = string.Format("NgayTiepNhan:[{0} TO {1}] AND LoaiKhieuNaiId:26", sFromDate, sToDate);
        //    solrQuery = new SolrQuery(whereClauseLinhVucCon);
        //    QueryOptions qoLinhVucCon = new QueryOptions();
        //    var extraParamLinhVucCon = new Dictionary<string, string>();
        //    extraParamLinhVucCon.Add("fl", @"Id");
        //    qoLinhVucCon.ExtraParams = extraParamLinhVucCon;
        //    qoLinhVucCon.Start = 0;
        //    qoLinhVucCon.Rows = 0;

        //    FacetParameters fpLinhVucCon = new FacetParameters();
        //    SolrFacetFieldQuery sffqLinhVucCon = new SolrFacetFieldQuery("LinhVucConId");
        //    fpLinhVucCon.Queries.Add(sffqLinhVucCon);
        //    fpLinhVucCon.Limit = -1;

        //    qoLinhVucCon.Facet = fpLinhVucCon;

        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoLinhVucCon);
        //    if (listKhieuNaiInfo != null)
        //    {
        //        GetCountOfFacet(dtSoLuongLoaiKN, "LinhVucConId", "SoLuong", listKhieuNaiInfo);
        //    }

        //    string whereClauseLinhVucChung = string.Format("NgayTiepNhan:[{0} TO {1}] AND LoaiKhieuNaiId:26 AND LinhVucConId:0", sFromDate, sToDate);
        //    solrQuery = new SolrQuery(whereClauseLinhVucChung);
        //    QueryOptions qoLinhVucChung = new QueryOptions();
        //    var extraParamLinhVucChung = new Dictionary<string, string>();
        //    extraParamLinhVucChung.Add("fl", @"Id");
        //    qoLinhVucChung.ExtraParams = extraParamLinhVucChung;
        //    qoLinhVucChung.Start = 0;
        //    qoLinhVucChung.Rows = 0;

        //    FacetParameters fpLinhVucChung = new FacetParameters();
        //    SolrFacetFieldQuery sffqLinhVucChung = new SolrFacetFieldQuery("LinhVucChungId");
        //    fpLinhVucChung.Queries.Add(sffqLinhVucChung);
        //    fpLinhVucChung.Limit = -1;

        //    qoLinhVucChung.Facet = fpLinhVucChung;

        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoLinhVucChung);
        //    if (listKhieuNaiInfo != null)
        //    {
        //        GetCountOfFacet(dtSoLuongLoaiKN, "LinhVucChungId", "SoLuong", listKhieuNaiInfo);
        //    }

        //    List<int> listPhongBanId = new List<int>();
        //    List<PhongBanInfo> listPhongBan = new PhongBanImpl().GetListPhongBanByDoiTacId(doiTacId);
        //    if (listPhongBan != null)
        //    {
        //        for (int i = 0; i < listPhongBan.Count; i++)
        //        {
        //            listPhongBanId.Add(listPhongBan[i].Id);
        //        }
        //    }
        //    DataTable dtTongHopPAKN = BaoCaoTongHopPAKNTheoPhongBanDoiTac_V2_Solr(doiTacId, listPhongBanId, fromDate, toDate);
        //    dsResult.Tables.Add(dtTongHopPAKN);


        //    return dsResult;
        //}

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 
        /// </summary>
        /// <returns></returns>
        private List<int> ListLoaiKhieuNaiVAS()
        {
            List<int> listLoaiKhieuNaiVAS = new List<int>();
            listLoaiKhieuNaiVAS.Add(27);
            listLoaiKhieuNaiVAS.Add(213);
            listLoaiKhieuNaiVAS.Add(215);
            listLoaiKhieuNaiVAS.Add(216);
            listLoaiKhieuNaiVAS.Add(217);
            listLoaiKhieuNaiVAS.Add(219);
            listLoaiKhieuNaiVAS.Add(1015);

            listLoaiKhieuNaiVAS.Add(41);
            listLoaiKhieuNaiVAS.Add(354);
            listLoaiKhieuNaiVAS.Add(355);
            listLoaiKhieuNaiVAS.Add(356);
            listLoaiKhieuNaiVAS.Add(360);
            listLoaiKhieuNaiVAS.Add(362);
            listLoaiKhieuNaiVAS.Add(439);
            listLoaiKhieuNaiVAS.Add(629);
            listLoaiKhieuNaiVAS.Add(630);
            listLoaiKhieuNaiVAS.Add(633);
            listLoaiKhieuNaiVAS.Add(634);
            listLoaiKhieuNaiVAS.Add(635);
            listLoaiKhieuNaiVAS.Add(636);
            listLoaiKhieuNaiVAS.Add(637);
            listLoaiKhieuNaiVAS.Add(638);
            listLoaiKhieuNaiVAS.Add(639);
            listLoaiKhieuNaiVAS.Add(640);
            listLoaiKhieuNaiVAS.Add(641);
            listLoaiKhieuNaiVAS.Add(901);
            //listLoaiKhieuNaiVAS.Add(1173);
            listLoaiKhieuNaiVAS.Add(1174);
            listLoaiKhieuNaiVAS.Add(1175);

            listLoaiKhieuNaiVAS.Add(43);
            listLoaiKhieuNaiVAS.Add(330);
            listLoaiKhieuNaiVAS.Add(333);
            listLoaiKhieuNaiVAS.Add(334);
            listLoaiKhieuNaiVAS.Add(336);
            listLoaiKhieuNaiVAS.Add(337);
            listLoaiKhieuNaiVAS.Add(642);
            listLoaiKhieuNaiVAS.Add(643);
            listLoaiKhieuNaiVAS.Add(902);
            listLoaiKhieuNaiVAS.Add(903);
            listLoaiKhieuNaiVAS.Add(904);

            listLoaiKhieuNaiVAS.Add(44);
            listLoaiKhieuNaiVAS.Add(251);
            listLoaiKhieuNaiVAS.Add(252);
            listLoaiKhieuNaiVAS.Add(253);
            listLoaiKhieuNaiVAS.Add(255);
            listLoaiKhieuNaiVAS.Add(257);
            listLoaiKhieuNaiVAS.Add(258);
            listLoaiKhieuNaiVAS.Add(259);
            listLoaiKhieuNaiVAS.Add(260);
            listLoaiKhieuNaiVAS.Add(261);
            listLoaiKhieuNaiVAS.Add(262);
            listLoaiKhieuNaiVAS.Add(263);
            listLoaiKhieuNaiVAS.Add(264);
            listLoaiKhieuNaiVAS.Add(265);
            listLoaiKhieuNaiVAS.Add(266);
            listLoaiKhieuNaiVAS.Add(267);
            //listLoaiKhieuNaiVAS.Add(268);
            //listLoaiKhieuNaiVAS.Add(270);
            listLoaiKhieuNaiVAS.Add(271);
            listLoaiKhieuNaiVAS.Add(272);
            listLoaiKhieuNaiVAS.Add(273);
            listLoaiKhieuNaiVAS.Add(274);
            listLoaiKhieuNaiVAS.Add(275);
            listLoaiKhieuNaiVAS.Add(276);
            listLoaiKhieuNaiVAS.Add(277);
            //listLoaiKhieuNaiVAS.Add(278);
            listLoaiKhieuNaiVAS.Add(279);
            listLoaiKhieuNaiVAS.Add(281);
            listLoaiKhieuNaiVAS.Add(283);
            listLoaiKhieuNaiVAS.Add(284);
            listLoaiKhieuNaiVAS.Add(285);
            listLoaiKhieuNaiVAS.Add(286);
            listLoaiKhieuNaiVAS.Add(287);
            listLoaiKhieuNaiVAS.Add(288);
            listLoaiKhieuNaiVAS.Add(289);
            listLoaiKhieuNaiVAS.Add(290);
            listLoaiKhieuNaiVAS.Add(1016);

            listLoaiKhieuNaiVAS.Add(1017);
            listLoaiKhieuNaiVAS.Add(1018);
            listLoaiKhieuNaiVAS.Add(1019);
            listLoaiKhieuNaiVAS.Add(1020);
            listLoaiKhieuNaiVAS.Add(1021);
            listLoaiKhieuNaiVAS.Add(1022);
            listLoaiKhieuNaiVAS.Add(1023);
            listLoaiKhieuNaiVAS.Add(1024);
            listLoaiKhieuNaiVAS.Add(1025);
            listLoaiKhieuNaiVAS.Add(1026);
            listLoaiKhieuNaiVAS.Add(1027);
            listLoaiKhieuNaiVAS.Add(1028);
            listLoaiKhieuNaiVAS.Add(1029);
            listLoaiKhieuNaiVAS.Add(1030);
            listLoaiKhieuNaiVAS.Add(1031);
            listLoaiKhieuNaiVAS.Add(1032);
            listLoaiKhieuNaiVAS.Add(1033);
            listLoaiKhieuNaiVAS.Add(1034);
            listLoaiKhieuNaiVAS.Add(1035);
            listLoaiKhieuNaiVAS.Add(1036);
            listLoaiKhieuNaiVAS.Add(1037);
            listLoaiKhieuNaiVAS.Add(1038);
            listLoaiKhieuNaiVAS.Add(1039);
            listLoaiKhieuNaiVAS.Add(1040);
            listLoaiKhieuNaiVAS.Add(1041);
            listLoaiKhieuNaiVAS.Add(1042);
            listLoaiKhieuNaiVAS.Add(1043);
            listLoaiKhieuNaiVAS.Add(1044);
            listLoaiKhieuNaiVAS.Add(1045);
            listLoaiKhieuNaiVAS.Add(1046);
            listLoaiKhieuNaiVAS.Add(1047);
            listLoaiKhieuNaiVAS.Add(1048);
            listLoaiKhieuNaiVAS.Add(1049);
            listLoaiKhieuNaiVAS.Add(1050);
            listLoaiKhieuNaiVAS.Add(1141);

            listLoaiKhieuNaiVAS.Add(661);
            listLoaiKhieuNaiVAS.Add(663);
            listLoaiKhieuNaiVAS.Add(664);
            listLoaiKhieuNaiVAS.Add(665);
            listLoaiKhieuNaiVAS.Add(927);

            listLoaiKhieuNaiVAS.Add(47);
            listLoaiKhieuNaiVAS.Add(235);
            listLoaiKhieuNaiVAS.Add(672);

            listLoaiKhieuNaiVAS.Add(673);
            listLoaiKhieuNaiVAS.Add(674);
            listLoaiKhieuNaiVAS.Add(675);

            return listLoaiKhieuNaiVAS;
        }

        #endregion

        #region Báo cáo tổ trưởng tổ KTV

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 05/12/2013
        /// Todo : Lấy số lượng khiếu nại phản hồi về khai thác viên
        /// </summary>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>        
        public DataTable GetSoLuongKNPhanHoiVeKTVCuaTTToKTV_Solr(int phongBanXuLyId, DateTime fromDate, DateTime toDate)
        {
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("TenTruyCap");
            dtResult.Columns.Add("TenNguoiSuDung");
            dtResult.Columns.Add("SLKNPhanHoi");

            List<NguoiSuDungInfo> listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanXuLyId);
            string sNguoiDung = string.Empty;
            if (listNguoiSuDung != null && listNguoiSuDung.Count > 0)
            {
                for (int i = 0; i < listNguoiSuDung.Count; i++)
                {
                    DataRow row = dtResult.NewRow();
                    row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
                    row["TenNguoiSuDung"] = listNguoiSuDung[i].TenDayDu;
                    row["SLKNPhanHoi"] = 0;

                    dtResult.Rows.Add(row);

                    sNguoiDung = string.Format("{0}{1} ", sNguoiDung, listNguoiSuDung[i].TenTruyCap);
                }

                sNguoiDung = sNguoiDung.TrimEnd(' ');
            }

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"KhieuNaiId,NguoiXuLyTruoc,NguoiXuLy");

            queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;

            //SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
            //List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            //listSortOrder.Add(sortOrder);

            //List<string> listGroupField = new List<string>();
            //listGroupField.Add("KhieuNaiId");
            //GroupingParameters gp = new GroupingParameters();
            //gp.Fields = listGroupField;
            //gp.Limit = 1;
            //gp.Main = true;
            //gp.OrderBy = listSortOrder;
            //queryOptionTiepNhan.Grouping = gp;

            //Where điều kiện           
            string whereClause = string.Format("NgayTiepNhan:[{0} TO {1}] AND -NguoiXuLyTruoc:({2}) AND NguoiXuLy:({2}) AND IsCurrent:true", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), sNguoiDung);

            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);

            if (listKhieuNaiInfo != null)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    int soLuong = 0;
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        if (row["TenTruyCap"].ToString() == listKhieuNaiInfo[i].NguoiXuLy)
                        {
                            soLuong++;
                            listKhieuNaiInfo.RemoveAt(i);
                            i--;
                        }
                    }

                    if (soLuong > 0)
                    {
                        row["SLKNPhanHoi"] = soLuong;
                    }
                    else
                    {
                        row["SLKNPhanHoi"] = "";
                    }
                }
            } // end if (listKhieuNaiInfo != null)

            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 05/12/2013
        /// Todo : Lấy số lượng khiếu nại quá hạn hoặc tồn đọng của khai thác viên
        /// </summary>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable GetSoLuongKNQuaHanVaTonDongCuaKTV_Solr(int phongBanXuLyId, DateTime fromDate, DateTime toDate)
        {
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("TenTruyCap");
            dtResult.Columns.Add("TenNguoiSuDung");
            dtResult.Columns.Add("SLKNTonDong");
            dtResult.Columns.Add("SLKNQuaHan");

            List<NguoiSuDungInfo> listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanXuLyId);
            string sNguoiDung = string.Empty;

            if (listNguoiSuDung != null)
            {
                for (int i = 0; i < listNguoiSuDung.Count; i++)
                {
                    DataRow row = dtResult.NewRow();
                    row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
                    row["TenNguoiSuDung"] = listNguoiSuDung[i].TenDayDu;
                    row["SLKNTonDong"] = 0;
                    row["SLKNQuaHan"] = 0;

                    dtResult.Rows.Add(row);

                    sNguoiDung = string.Format("{0}{1} ", sNguoiDung, listNguoiSuDung[i].TenTruyCap);
                }

                sNguoiDung = sNguoiDung.Trim();
            }

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            // Số lượng tồn đọng
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"KhieuNaiId,NguoiXuLyTruoc,NguoiXuLy,NgayTiepNhan,NgayQuaHan");

            queryOptionTonDong.ExtraParams = extraParamTiepNhan;

            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            //Where điều kiện           
            string whereClause = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiXuLy:({2}) AND IsCurrent:true", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), sNguoiDung);

            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);

            if (listKhieuNaiInfo != null)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    int soLuongTonDong = 0;
                    int soLuongQuaHan = 0;
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        if (row["TenTruyCap"].ToString() == listKhieuNaiInfo[i].NguoiXuLy)
                        {
                            soLuongTonDong++;

                            if (toDate > listKhieuNaiInfo[i].NgayQuaHan)
                            {
                                soLuongQuaHan++;
                            }

                            listKhieuNaiInfo.RemoveAt(i);
                            i--;
                        }
                    }

                    if (soLuongTonDong > 0)
                    {
                        row["SLKNTonDong"] = soLuongTonDong;
                    }
                    else
                    {
                        row["SLKNTonDong"] = "";
                    }

                    if (soLuongQuaHan > 0)
                    {
                        row["SLKNQuaHan"] = soLuongQuaHan;
                    }
                    else
                    {
                        row["SLKNQuaHan"] = "";
                    }
                }
            } // end if (listKhieuNaiInfo != null)

            // Số lượng quá hạn

            return dtResult;
        }

        #endregion

        #region Báo cáo VNPT TT

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 11/12/2013
        /// Todo : Lấy ra số lượng khiếu nại tiếp nhận, xử lý, đã đóng, quá hạn của GDV trong khoảng thời gian được chọn để lấy báo cáo
        /// </summary>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable GetSoLuongKhieuNaiTiepNhanXuLyCuaVNPTTT_Solr(int phongBanXuLyId, DateTime fromDate, DateTime toDate)
        {
            string colFacetQueryNameNguoiTiepNhan = "FacetQueryName_NguoiTiepNhan";
            string colFacetQueryNameNguoiDong = "FacetQueryName_NguoiDong";
            string colFacetQueryNameNguoiChuyenXuLy = "FacetQueryName_NguoiChuyenXuLy";
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add(colFacetQueryNameNguoiTiepNhan);
            dtResult.Columns.Add(colFacetQueryNameNguoiDong);
            dtResult.Columns.Add(colFacetQueryNameNguoiChuyenXuLy);
            dtResult.Columns.Add("TenTruyCap");
            dtResult.Columns.Add("TenNguoiSuDung");
            dtResult.Columns.Add("SLTiepNhan");
            dtResult.Columns.Add("SLDaXuLy");
            dtResult.Columns.Add("SLTonDong");
            dtResult.Columns.Add("SLQuaHan");

            List<NguoiSuDungInfo> listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanXuLyId);
            string sNguoiSuDung = string.Empty;

            if (listNguoiSuDung != null)
            {
                for (int i = 0; i < listNguoiSuDung.Count; i++)
                {
                    DataRow row = dtResult.NewRow();
                    row["FacetQueryName_NguoiTiepNhan"] = string.Empty;
                    row["FacetQueryName_NguoiDong"] = string.Empty;
                    row["FacetQueryName_NguoiChuyenXuLy"] = string.Empty;
                    row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
                    row["TenNguoiSuDung"] = listNguoiSuDung[i].TenDayDu;
                    row["SLTiepNhan"] = 0;
                    row["SLDaXuLy"] = 0;
                    row["SLTonDong"] = 0;
                    row["SLQuaHan"] = 0;

                    dtResult.Rows.Add(row);

                    sNguoiSuDung = string.Format("{0}{1} ", sNguoiSuDung, listNguoiSuDung[i].TenTruyCap);
                }

                sNguoiSuDung = sNguoiSuDung.Trim();
            }

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            // Số lượng tồn đọng
            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"*");

            queryOptionTonDong.ExtraParams = extraParamTiepNhan;

            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = 0;

            FacetParameters fpTiepNhan = new FacetParameters();
            // Tính số lượng khiếu nại đã đóng
            FacetParameters fpDongKhieuNai = new FacetParameters();
            // Tính số lượng khiếu nại chuyển xử lý
            FacetParameters fpChuyenXuLy = new FacetParameters();
            // Tính số lượng quá hạn
            //FacetParameters fpQuaHan = new FacetParameters();

            for (int i = 0; i < listNguoiSuDung.Count; i++)
            {
                string facetQueryName_NguoiTiepNhan = string.Format("NguoiTiepNhan:{0}", listNguoiSuDung[i].TenTruyCap);
                SolrQuery solrQueryFacet = new SolrQuery(facetQueryName_NguoiTiepNhan);
                SolrFacetQuery sfq = new SolrFacetQuery(solrQueryFacet);
                fpTiepNhan.Queries.Add(sfq);

                string facetQueryName_NguoiDong = string.Format("NguoiXuLy:{0}", listNguoiSuDung[i].TenTruyCap);
                solrQueryFacet = new SolrQuery(facetQueryName_NguoiDong);
                sfq = new SolrFacetQuery(solrQueryFacet);
                fpDongKhieuNai.Queries.Add(sfq);

                string facetQueryName_NguoiChuyenXuLy = string.Format("NguoiTiepNhan:{0} AND -NguoiXuLy:{0}", listNguoiSuDung[i].TenTruyCap);
                solrQueryFacet = new SolrQuery(facetQueryName_NguoiChuyenXuLy);
                sfq = new SolrFacetQuery(solrQueryFacet);
                fpChuyenXuLy.Queries.Add(sfq);

                //solrQueryFacet = new SolrQuery(string.Format("NguoiXuLy:{0}", listNguoiSuDung[i].TenTruyCap));
                //sfq = new SolrFacetQuery(solrQueryFacet);
                //fpQuaHan.Queries.Add(sfq);

                foreach (DataRow row in dtResult.Rows)
                {
                    if (row["TenTruyCap"].ToString() == listNguoiSuDung[i].TenTruyCap)
                    {
                        row[colFacetQueryNameNguoiTiepNhan] = facetQueryName_NguoiTiepNhan;
                        row[colFacetQueryNameNguoiDong] = facetQueryName_NguoiDong;
                        row[colFacetQueryNameNguoiChuyenXuLy] = facetQueryName_NguoiChuyenXuLy;

                        break;
                    }

                }
            }

            // Tính số lượng tiếp nhận
            queryOptionTonDong.Facet = fpTiepNhan;
            string whereClause = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND PhongBanTiepNhanId:{2}", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTonDong);
            GetCountOfFacetQueries(dtResult, colFacetQueryNameNguoiTiepNhan, "SLTiepNhan", listKhieuNaiInfo);

            // Tính số lượng khiếu nại đã đóng
            queryOptionTonDong.Facet = fpDongKhieuNai;
            whereClause = string.Format("NgayDongKNSort:[{0} TO {1}] AND PhongBanXuLyId:{2} AND TrangThai:3", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTonDong);
            GetCountOfFacetQueries(dtResult, colFacetQueryNameNguoiDong, "SLDaXuLy", listKhieuNaiInfo);

            //Số lượng khiếu nại đã chuyển xử lý
            queryOptionTonDong.Facet = fpChuyenXuLy;
            whereClause = string.Format("NgayChuyenPhongBanSort:[{0} TO {1}] AND -TrangThai:3", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTonDong);
            GetCountOfFacetQueries(dtResult, colFacetQueryNameNguoiChuyenXuLy, "SLDaXuLy", listKhieuNaiInfo, true);

            // Tính số lượng khiếu nại quá hạn
            QueryOptions queryOptionQuaHan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamQuaHan = new Dictionary<string, string>();
            extraParamQuaHan.Add("fl", @"Id, ActivityId, KhieuNaiId, NguoiXuLy, IsCurrent, HanhDong, NgayTiepNhan, NgayQuaHan, LDate");

            queryOptionQuaHan.ExtraParams = extraParamQuaHan;

            queryOptionQuaHan.Start = 0;
            queryOptionQuaHan.Rows = int.MaxValue;
            whereClause = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId:{2}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionQuaHan);
            if (listKhieuNaiInfo != null)
            {
                for (int i = 0; i < listNguoiSuDung.Count; i++)
                {
                    List<KhieuNai_ReportInfo> listKhieuNaiOfNguoiDung = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NguoiXuLy == listNguoiSuDung[i].TenTruyCap; });
                    if (listKhieuNaiOfNguoiDung != null)
                    {
                        int soLuongQuaHan = 0;
                        for (int j = 0; j < listKhieuNaiOfNguoiDung.Count; j++)
                        {
                            if (listKhieuNaiOfNguoiDung[j].IsCurrent)
                            {
                                // Nếu khiếu nại đã đóng thì kiểm tra ngày đóng có quá hạn không ?
                                // hoặc chưa đóng thì kiểm tra ngày lấy báo cáo đã lớn hơn ngày quá hạn chưa
                                if ((listKhieuNaiOfNguoiDung[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Đóng_KN && listKhieuNaiOfNguoiDung[j].LDate > listKhieuNaiOfNguoiDung[j].NgayQuaHan)
                                    || (toDate > listKhieuNaiOfNguoiDung[j].NgayQuaHan)
                                    )
                                {
                                    soLuongQuaHan++;
                                }

                            }
                            else if (!listKhieuNaiOfNguoiDung[j].IsCurrent && listKhieuNaiOfNguoiDung[j].LDate > listKhieuNaiOfNguoiDung[j].NgayQuaHan)
                            {
                                soLuongQuaHan++;
                            }

                        }

                        foreach (DataRow row in dtResult.Rows)
                        {
                            if (row["TenTruyCap"].ToString() == listNguoiSuDung[i].TenTruyCap)
                            {
                                row["SLQuaHan"] = soLuongQuaHan;
                                break;
                            }

                        }
                    } // end if(listKhieuNaiOfNguoiDung != null)

                }

            }

            // Tính số lượng tồn đọng
            if (dtResult != null && dtResult.Rows.Count > 0)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    row["SLTonDong"] = ConvertUtility.ToInt32(row["SLTiepNhan"], 0) - ConvertUtility.ToInt32(row["SLDaXuLy"], 0);
                }
            }

            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 27/12/2013
        /// Todo : Lấy dữ liệu cho báo cáo giảm trừ do khiếu nại dịch vụ của VNPTT TT
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="layDuLieuTheo1HoacNhieuPhongBan">
        ///     = 1 : Lấy theo PhongBanId
        ///     = 2 : Lấy theo PhongBanId và các phòng ban trực thuộc PhongBanId
        /// </param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="isDongKN">
        ///     = true : Chỉ lấy ra danh sách khiếu nại đã đóng
        ///     = false : Lấy ra danh sách khiếu nại đã đóng trong khoảng thời gian fromDate, toDate và cả những khiếu nại chưa đóng
        /// </param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoGiamTruDoKhieuNaiDichVuVNPTTT_Solr(int doiTacId, int phongBanXuLyId, int layDuLieuTheo1HoacNhieuPhongBan, DateTime fromDate, DateTime toDate, bool isDongKN)
        {
            List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

            var queryOption = new QueryOptions();

            //Lấy ra những trường nào
            var extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", @"Id, SoThueBao, NoiDungPA, LinhVucCon, NgayDongKN, KQXuLy_SHCV, NoiDungXuLy, SoTienKhauTru_TKC
                                                , SoTienKhauTru_KN, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Khac
                                                , SoTienKhauTru_TS_GPRS, SoTienKhauTru_TS_CP, SoTienKhauTru_TS_Thoai
                                                , SoTienKhauTru_TS_SMS, SoTienKhauTru_TS_IR, SoTienKhauTru_TS_Khac, TrangThai");

            //extraParam.Add("fl", @"Id");

            queryOption.ExtraParams = extraParam;

            queryOption.Start = 0;
            queryOption.Rows = int.MaxValue;

            // Danh sách nội dung công việc
            //Where điều kiện
            string whereClause = string.Empty;
            //whereClause = " IsKNGiamTru : true AND IsTraSau : true";

            if (doiTacId > 0)
            {
                whereClause = string.Format("{0} AND DoiTacXuLyId : {1}", whereClause, doiTacId);
            }

            if (phongBanXuLyId > 0)
            {
                if (layDuLieuTheo1HoacNhieuPhongBan == 1)
                {
                    whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, phongBanXuLyId);
                }
                else if (layDuLieuTheo1HoacNhieuPhongBan == 2)
                {
                    List<PhongBanInfo> listPhongBan = new PhongBanImpl().GetAllPhongBanOfAllOfParentId(phongBanXuLyId);
                    if (listPhongBan != null && listPhongBan.Count > 0)
                    {
                        string sPhongBan = listPhongBan[0].Id.ToString();
                        for (int i = 1; i < listPhongBan.Count; i++)
                        {
                            sPhongBan = string.Format("{0} {1}", sPhongBan, listPhongBan[i].Id);
                        }

                        whereClause = string.Format("{0} AND PhongBanXuLyId : ({1})", whereClause, sPhongBan);
                    }
                }
            }

            if (isDongKN)
            {
                whereClause = string.Format("NgayDongKN:[{1} TO {2}] {0}", whereClause, ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true));
            }
            else
            {
                whereClause = string.Format("LDate:[{1} TO {2}] {0}", whereClause, ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true));
            }

            var solrQuery = new SolrQuery(whereClause);

            //listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOption);
            listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOption);

            return listKhieuNai;
        }


        /// <summary>
        /// Author : Phi Hoang Hai
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="phongBanId"></param>
        /// <param name="layDuLieuTheo1HoacNhieuPhongBan">
        ///     = 1 : Lấy theo PhongBanId
        ///     = 2 : Lấy theo PhongBanId và các phòng ban trực thuộc PhongBanId
        /// </param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="isDongKN">
        ///     = true : Chỉ lấy ra danh sách khiếu nại đã đóng
        ///     = false : Lấy ra danh sách khiếu nại đã đóng trong khoảng thời gian fromDate, toDate và cả những khiếu nại chưa đóng
        /// </param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoKhieuNaiDichVuVNPTTT_Solr(int doiTacId, int phongBanXuLyId, int layDuLieuTheo1HoacNhieuPhongBan, DateTime fromDate, DateTime toDate, bool isDongKN)
        {
            List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

            var queryOption = new QueryOptions();

            //Lấy ra những trường nào
            var extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", @"Id, SoThueBao, HoTenLienHe, NgayTiepNhan, NgayDongKN, NoiDungXuLy, LDate, KQXuLy_SHCV, KQXuLy_CCT
                                    , SoTienKhauTru_TKC, SoTienKhauTru_KM, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Khac
                                    , SoTienKhauTru_TS_GPRS, SoTienKhauTru_TS_CP, SoTienKhauTru_TS_Thoai, SoTienKhauTru_TS_SMS
                                    , SoTienKhauTru_TS_IR, SoTienKhauTru_TS_Khac
                                    , TrangThai");

            //extraParam.Add("fl", @"Id");

            queryOption.ExtraParams = extraParam;

            queryOption.Start = 0;
            queryOption.Rows = int.MaxValue;

            // Danh sách nội dung công việc
            //Where điều kiện
            string whereClause = string.Empty;
            //whereClause = "IsTraSau : true";

            if (doiTacId > 0)
            {
                whereClause = string.Format("{0} AND DoiTacXuLyId : {1}", whereClause, doiTacId);
            }

            if (phongBanXuLyId > 0)
            {
                if (layDuLieuTheo1HoacNhieuPhongBan == 1)
                {
                    whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, phongBanXuLyId);
                }
                else if (layDuLieuTheo1HoacNhieuPhongBan == 2)
                {
                    List<PhongBanInfo> listPhongBan = new PhongBanImpl().GetAllPhongBanOfAllOfParentId(phongBanXuLyId);
                    if (listPhongBan != null && listPhongBan.Count > 0)
                    {
                        string sPhongBan = listPhongBan[0].Id.ToString();
                        for (int i = 1; i < listPhongBan.Count; i++)
                        {
                            sPhongBan = string.Format("{0} {1}", sPhongBan, listPhongBan[i].Id);
                        }

                        whereClause = string.Format("{0} AND PhongBanXuLyId : ({1})", whereClause, sPhongBan);
                    }
                }
            }

            if (isDongKN)
            {
                whereClause = string.Format("NgayDongKN:[{1} TO {2}] {0}", whereClause, ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true));
            }
            else
            {
                whereClause = string.Format("LDate:[{1} TO {2}] {0}", whereClause, ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true));
            }


            var solrQuery = new SolrQuery(whereClause);

            listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOption);

            return listKhieuNai;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataSet BaoCaoTongHopGQKNVNPTTT_Solr(int doiTacId, int phongBanId, DateTime fromDate, DateTime toDate, List<string> listLoaiKhieuNaiId, List<string> listLinhVucChungId, List<string> listLinhVucConId)
        {
            DataSet dsResult = new DataSet();

            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);

            DateTime ngayDauNam = new DateTime(fromDate.Year, 1, 1);
            DateTime ngayLienKeDauTuan = fromDate == ngayDauNam ? fromDate : fromDate.Subtract(new TimeSpan(1, 0, 0, 0));

            string whereClauseDoiTacTiepNhan = string.Empty;
            string whereClauseDoiTacXuLy = string.Empty;
            string whereClausePhongBanTiepNhan = string.Empty;
            string whereClausePhongBanXuLy = string.Empty;

            if (doiTacId > 0)
            {
                whereClauseDoiTacTiepNhan = string.Format(" AND DoiTacId : {1}", whereClauseDoiTacTiepNhan, doiTacId);
                whereClauseDoiTacXuLy = string.Format(" AND DoiTacXuLyId : {1}", whereClauseDoiTacXuLy, doiTacId);
            }

            if (phongBanId > 0)
            {
                whereClausePhongBanTiepNhan = string.Format(" AND PhongBanTiepNhanId : {1}", whereClausePhongBanTiepNhan, phongBanId);
                whereClausePhongBanXuLy = string.Format(" AND PhongBanXuLyId : {1}", whereClausePhongBanXuLy, phongBanId);

                //if (layDuLieuTheo1HoacNhieuPhongBan == 1)
                //{
                //    whereClausePhongBanTiepNhan = string.Format(" AND PhongBanTiepNhanId : {1}", whereClausePhongBanTiepNhan, phongBanId);
                //    whereClausePhongBanXuLy = string.Format(" AND PhongBanXuLyId : {1}", whereClausePhongBanXuLy, phongBanId);
                //}
                //else if (layDuLieuTheo1HoacNhieuPhongBan == 2)
                //{
                //    List<PhongBanInfo> listPhongBan = new PhongBanImpl().GetAllPhongBanOfAllOfParentId(phongBanId);
                //    if (listPhongBan != null && listPhongBan.Count > 0)
                //    {
                //        string sPhongBan = listPhongBan[0].Id.ToString();
                //        for (int i = 1; i < listPhongBan.Count; i++)
                //        {
                //            sPhongBan = string.Format("{0} {1}", sPhongBan, listPhongBan[i].Id);
                //        }

                //        whereClausePhongBanTiepNhan = string.Format(" AND PhongBanTiepNhanId : ({1})", whereClausePhongBanTiepNhan, sPhongBan);
                //        whereClausePhongBanXuLy = string.Format(" AND PhongBanXuLyId : ({1})", whereClausePhongBanXuLy, sPhongBan);
                //    }
                //}
            }

            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            string colNameLoaiKhieuNaiId = "LoaiKhieuNaiId";
            string colNameLinhVucChungId = "LinhVucChungId";
            string colNameLinhVucConId = "LinhVucConId";

            string loaiKhieuNaiId = string.Empty;
            string linhVucChungId = string.Empty;
            string linhVucConId = string.Empty;

            string sqlLoaiKhieuNai = string.Empty;
            string sqlLinhVucChung = string.Empty;
            string sqlLinhVucCon = string.Empty;

            QueryOptions queryOptionLoaiKhieuNai = new QueryOptions();
            QueryOptions queryOptionLinhVucChung = new QueryOptions();
            QueryOptions queryOptionLinhVucCon = new QueryOptions();

            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"LoaiKhieuNaiId,LoaiKhieuNai");

            queryOptionLoaiKhieuNai.ExtraParams = extraParamLoaiKhieuNai;

            queryOptionLoaiKhieuNai.Start = 0;
            queryOptionLoaiKhieuNai.Rows = listLoaiKhieuNaiId.Count;

            //Lấy ra những trường nào
            var extraParamLinhVucChung = new Dictionary<string, string>();
            extraParamLinhVucChung.Add("fl", @"LinhVucChungId, LinhVucChung");

            queryOptionLinhVucChung.ExtraParams = extraParamLinhVucChung;

            queryOptionLinhVucChung.Start = 0;
            queryOptionLinhVucChung.Rows = listLinhVucChungId.Count;

            //Lấy ra những trường nào
            var extraParamLinhVucCon = new Dictionary<string, string>();
            extraParamLinhVucCon.Add("fl", @"LinhVucConId, LinhVucCon");

            queryOptionLinhVucCon.ExtraParams = extraParamLinhVucCon;

            queryOptionLinhVucCon.Start = 0;
            queryOptionLinhVucCon.Rows = listLinhVucConId.Count;

            FacetParameters fpLoaiKhieuNai = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("LoaiKhieuNaiId");
            fpLoaiKhieuNai.Queries.Add(facetField);
            queryOptionLoaiKhieuNai.Facet = fpLoaiKhieuNai;

            FacetParameters fpLinhVucChung = new FacetParameters();
            facetField = new SolrFacetFieldQuery("LinhVucChungId");
            fpLinhVucChung.Queries.Add(facetField);
            queryOptionLinhVucChung.Facet = fpLinhVucChung;

            FacetParameters fpLinhVucCon = new FacetParameters();
            facetField = new SolrFacetFieldQuery("LinhVucConId");
            fpLinhVucCon.Queries.Add(facetField);
            queryOptionLinhVucCon.Facet = fpLinhVucCon;

            //Where điều kiện
            string whereClauseLoaiKhieuNai = "*:* ";
            string whereClauseLinhVucChung = "*:* ";
            string whereClauseLinhVucCon = "*:* ";

            string whereClause = string.Empty;
            SolrQuery solrQuery = null;

            DataTable dtLoaiKhieuNai = new DataTable();
            DataTable dtLinhVucChung = new DataTable();
            DataTable dtLinhVucCon = new DataTable();

            dtLoaiKhieuNai.Columns.Add("LoaiKhieuNaiId");
            dtLoaiKhieuNai.Columns.Add("LoaiKhieuNai");
            dtLoaiKhieuNai.Columns.Add("ParentId");

            if (listLoaiKhieuNaiId != null)
            {
                for (int i = 0; i < listLoaiKhieuNaiId.Count; i++)
                {
                    DataRow row = dtLoaiKhieuNai.NewRow();
                    row["LoaiKhieuNaiId"] = listLoaiKhieuNaiId[i];
                    row["ParentId"] = "0";

                    for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                    {
                        if (row["LoaiKhieuNaiId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                        {
                            row["LoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                            break;
                        }
                    }

                    dtLoaiKhieuNai.Rows.Add(row);
                }
            }


            dtLinhVucChung.Columns.Add("LinhVucChungId");
            dtLinhVucChung.Columns.Add("LinhVucChung");
            dtLinhVucChung.Columns.Add("ParentId");

            if (listLinhVucChungId != null)
            {
                for (int i = 0; i < listLinhVucChungId.Count; i++)
                {
                    DataRow row = dtLinhVucChung.NewRow();
                    row["LinhVucChungId"] = listLinhVucChungId[i];

                    for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                    {
                        if (row["LinhVucChungId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                        {
                            row["LinhVucChung"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                            row["ParentId"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].ParentId;
                            break;
                        }
                    }

                    dtLinhVucChung.Rows.Add(row);
                }
            }


            dtLinhVucCon.Columns.Add("LinhVucConId");
            dtLinhVucCon.Columns.Add("LinhVucCon");
            dtLinhVucCon.Columns.Add("ParentId");

            if (listLinhVucConId != null)
            {
                for (int i = 0; i < listLinhVucConId.Count; i++)
                {
                    DataRow row = dtLinhVucCon.NewRow();
                    row["LinhVucConId"] = listLinhVucConId[i];

                    for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                    {
                        if (row["LinhVucConId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                        {
                            row["LinhVucCon"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                            row["ParentId"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].ParentId;
                            break;
                        }
                    }

                    dtLinhVucCon.Rows.Add(row);
                }
            }

            dtLoaiKhieuNai.Columns.Add("LuyKeKNDaGiaiQuyetDenDauTuan");
            dtLoaiKhieuNai.Columns.Add("LuyKeKNTonDongDauTuan");
            dtLoaiKhieuNai.Columns.Add("SoLuongTiepNhanTrongTuan");
            dtLoaiKhieuNai.Columns.Add("SoLuongDaGiaiQuyetTrongTuan");
            dtLoaiKhieuNai.Columns.Add("SoLuongTonDongTrongTuanDoQuaHan");
            dtLoaiKhieuNai.Columns.Add("LuyKeKNDaGiaiQuyetDenCuoiTuan");
            dtLoaiKhieuNai.Columns.Add("LuyKeKNTongDongDoQuaHan");

            dtLinhVucChung.Columns.Add("LuyKeKNDaGiaiQuyetDenDauTuan");
            dtLinhVucChung.Columns.Add("LuyKeKNTonDongDauTuan");
            dtLinhVucChung.Columns.Add("SoLuongTiepNhanTrongTuan");
            dtLinhVucChung.Columns.Add("SoLuongDaGiaiQuyetTrongTuan");
            dtLinhVucChung.Columns.Add("SoLuongTonDongTrongTuanDoQuaHan");
            dtLinhVucChung.Columns.Add("LuyKeKNDaGiaiQuyetDenCuoiTuan");
            dtLinhVucChung.Columns.Add("LuyKeKNTongDongDoQuaHan");

            dtLinhVucCon.Columns.Add("LuyKeKNDaGiaiQuyetDenDauTuan");
            dtLinhVucCon.Columns.Add("LuyKeKNTonDongDauTuan");
            dtLinhVucCon.Columns.Add("SoLuongTiepNhanTrongTuan");
            dtLinhVucCon.Columns.Add("SoLuongDaGiaiQuyetTrongTuan");
            dtLinhVucCon.Columns.Add("SoLuongTonDongTrongTuanDoQuaHan");
            dtLinhVucCon.Columns.Add("LuyKeKNDaGiaiQuyetDenCuoiTuan");
            dtLinhVucCon.Columns.Add("LuyKeKNTongDongDoQuaHan");

            #region Lũy kế khiếu nại đã giải quyết

            whereClause = string.Format("{0} AND TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND DoiTacXuLyId:{3} {4}", whereClauseLoaiKhieuNai, ngayDauNam.ToString("yyyyMMdd"), ngayLienKeDauTuan.ToString("yyyyMMdd"), doiTacId, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "LuyKeKNDaGiaiQuyetDenDauTuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND DoiTacXuLyId:{3} {4}", whereClauseLinhVucChung, ngayDauNam.ToString("yyyyMMdd"), ngayLienKeDauTuan.ToString("yyyyMMdd"), doiTacId, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "LuyKeKNDaGiaiQuyetDenDauTuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND DoiTacXuLyId:{3} {4}", whereClauseLinhVucCon, ngayDauNam.ToString("yyyyMMdd"), ngayLienKeDauTuan.ToString("yyyyMMdd"), doiTacId, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "LuyKeKNDaGiaiQuyetDenDauTuan", listKhieuNaiInfo);

            #endregion

            #region Lũy kế khiếu nại tồn đọng đầu tuần

            whereClause = string.Format("{0} AND -TrangThai : 3 AND LDate [* TO {1}] AND (DoiTacId : {2} OR DoiTacXuLyId : {2}) {3}", whereClauseLoaiKhieuNai, ConvertDateToSolr(ngayLienKeDauTuan.ToString("yyyyMMdd"), false, true), doiTacId, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "LuyKeKNTonDongDauTuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND -TrangThai : 3 AND LDate [* TO {1}] AND (DoiTacId : {2} OR DoiTacXuLyId : {2}) {3}", whereClauseLinhVucChung, ConvertDateToSolr(ngayLienKeDauTuan.ToString("yyyyMMdd"), false, true), doiTacId, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "LuyKeKNTonDongDauTuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND -TrangThai : 3 AND LDate [* TO {1}] AND (DoiTacId : {2} OR DoiTacXuLyId : {2}) {3}", whereClauseLinhVucCon, ConvertDateToSolr(ngayLienKeDauTuan.ToString("yyyyMMdd"), false, true), doiTacId, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "LuyKeKNTonDongDauTuan", listKhieuNaiInfo);

            #endregion

            #region Số lượng tiếp nhận trong tuần

            whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3} {4}", whereClauseLoaiKhieuNai, sFromDate, sToDate, whereClausePhongBanXuLy, whereClauseDoiTacXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3} {4}", whereClauseLinhVucChung, sFromDate, sToDate, whereClausePhongBanXuLy, whereClauseDoiTacXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3} {4}", whereClauseLinhVucCon, sFromDate, sToDate, whereClausePhongBanXuLy, whereClauseDoiTacXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort:[{1} TO {2}] AND  DoiTacId : {3} {4}", whereClauseLoaiKhieuNai, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), doiTacId, whereClausePhongBanTiepNhan);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort:[{1} TO {2}] AND  DoiTacId : {3} {4}", whereClauseLinhVucChung, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), doiTacId, whereClausePhongBanTiepNhan);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort:[{1} TO {2}] AND  DoiTacId : {3} {4}", whereClauseLinhVucCon, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), doiTacId, whereClausePhongBanTiepNhan);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            #endregion

            #region Số lượng đã giải quyết trong tuần

            whereClause = string.Format("{0} AND TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND  DoiTacXuLyId : {3} {4}", whereClauseLoaiKhieuNai, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), doiTacId, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "SoLuongDaGiaiQuyetTrongTuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND  DoiTacXuLyId : {3} {4}", whereClauseLinhVucChung, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), doiTacId, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "SoLuongDaGiaiQuyetTrongTuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND  DoiTacXuLyId : {3} {4}", whereClauseLinhVucCon, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), doiTacId, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "SoLuongDaGiaiQuyetTrongTuan", listKhieuNaiInfo);

            #endregion

            #region Số lượng tồn đọng trong tuần do quá hạn

            foreach (DataRow row in dtLoaiKhieuNai.Rows)
            {
                row["SoLuongTonDongTrongTuanDoQuaHan"] = ConvertUtility.ToInt32(row["SoLuongTiepNhanTrongTuan"], 0) - ConvertUtility.ToInt32(row["SoLuongDaGiaiQuyetTrongTuan"], 0);
            }

            foreach (DataRow row in dtLinhVucChung.Rows)
            {
                row["SoLuongTonDongTrongTuanDoQuaHan"] = ConvertUtility.ToInt32(row["SoLuongTiepNhanTrongTuan"], 0) - ConvertUtility.ToInt32(row["SoLuongDaGiaiQuyetTrongTuan"], 0);
            }

            foreach (DataRow row in dtLinhVucCon.Rows)
            {
                row["SoLuongTonDongTrongTuanDoQuaHan"] = ConvertUtility.ToInt32(row["SoLuongTiepNhanTrongTuan"], 0) - ConvertUtility.ToInt32(row["SoLuongDaGiaiQuyetTrongTuan"], 0);
            }

            //whereClause = string.Format("{0} AND -TrangThai : 3 AND NgayQuaHanSort : [{1} TO {2}] AND  DoiTacId : {3}", whereClauseLoaiKhieuNai, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), doiTacId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "SoLuongTonDongTrongTuanDoQuaHan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND -TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND  DoiTacId : {3}", whereClauseLinhVucChung, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), doiTacId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "SoLuongTonDongTrongTuanDoQuaHan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND -TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND  DoiTacId : {3}", whereClauseLinhVucCon, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), doiTacId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "SoLuongTonDongTrongTuanDoQuaHan", listKhieuNaiInfo);

            #endregion

            #region Lũy kế khiếu nại đã giải quyết đến cuối tuần

            foreach (DataRow row in dtLoaiKhieuNai.Rows)
            {
                row["LuyKeKNDaGiaiQuyetDenCuoiTuan"] = ConvertUtility.ToInt32(row["LuyKeKNDaGiaiQuyetDenDauTuan"], 0) + ConvertUtility.ToInt32(row["SoLuongDaGiaiQuyetTrongTuan"], 0);
            }

            foreach (DataRow row in dtLinhVucChung.Rows)
            {
                row["LuyKeKNDaGiaiQuyetDenCuoiTuan"] = ConvertUtility.ToInt32(row["LuyKeKNDaGiaiQuyetDenDauTuan"], 0) + ConvertUtility.ToInt32(row["SoLuongDaGiaiQuyetTrongTuan"], 0);
            }

            foreach (DataRow row in dtLinhVucCon.Rows)
            {
                row["LuyKeKNDaGiaiQuyetDenCuoiTuan"] = ConvertUtility.ToInt32(row["LuyKeKNDaGiaiQuyetDenDauTuan"], 0) + ConvertUtility.ToInt32(row["SoLuongDaGiaiQuyetTrongTuan"], 0);
            }

            //whereClause = string.Format("{0} AND TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND  DoiTacId : {3}", whereClauseLoaiKhieuNai, ngayDauNam.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), doiTacId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "LuyKeKNDaGiaiQuyet", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND  DoiTacId : {3}", whereClauseLinhVucChung, ngayDauNam.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), doiTacId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "LuyKeKNDaGiaiQuyet", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND TrangThai : 3 AND NgayDongKNSort : [{1} TO {2}] AND  DoiTacId : {3}", whereClauseLinhVucCon, ngayDauNam.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), doiTacId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "LuyKeKNDaGiaiQuyet", listKhieuNaiInfo);

            #endregion

            #region Lũy kế tồn đọng do quá hạn cuối tuần

            foreach (DataRow row in dtLoaiKhieuNai.Rows)
            {
                row["LuyKeKNTongDongDoQuaHan"] = ConvertUtility.ToInt32(row["LuyKeKNTonDongDauTuan"], 0) + ConvertUtility.ToInt32(row["SoLuongTonDongTrongTuanDoQuaHan"], 0);
            }

            foreach (DataRow row in dtLinhVucChung.Rows)
            {
                row["LuyKeKNTongDongDoQuaHan"] = ConvertUtility.ToInt32(row["LuyKeKNTonDongDauTuan"], 0) + ConvertUtility.ToInt32(row["SoLuongTonDongTrongTuanDoQuaHan"], 0);
            }

            foreach (DataRow row in dtLinhVucCon.Rows)
            {
                row["LuyKeKNTongDongDoQuaHan"] = ConvertUtility.ToInt32(row["LuyKeKNTonDongDauTuan"], 0) + ConvertUtility.ToInt32(row["SoLuongTonDongTrongTuanDoQuaHan"], 0);
            }

            //whereClause = string.Format("{0} AND -TrangThai : 3 AND LDate [* TO {1}] AND DoiTacXuLyId : {2}", whereClauseLoaiKhieuNai, ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "LuyKeKNTonDonDoQuaHan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND -TrangThai : 3 AND LDate [* TO {1}] AND DoiTacXuLyId : {2}", whereClauseLinhVucChung, ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "LuyKeKNTonDonDoQuaHan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND -TrangThai : 3 AND LDate [* TO {1}] AND DoiTacXuLyId : {2}", whereClauseLinhVucCon, ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "LuyKeKNTonDonDoQuaHan", listKhieuNaiInfo);

            #endregion

            dsResult.Tables.Add(dtLoaiKhieuNai);
            dsResult.Tables.Add(dtLinhVucChung);
            dsResult.Tables.Add(dtLinhVucCon);
            return dsResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Edit date :  01/03/2014
        /// Todo : Lấy dữ liệu báo cáo giảm trừ cước dịch vụ CP
        /// </summary>
        /// <param name="doiTacXuLyId"></param>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="loaiKhieuNaiID"></param>
        /// <param name="linhVucChungID"></param>
        /// <param name="linhVucConID"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoTongHopGiamTruCuocDV_Solr(int doiTacXuLyId, int phongBanXuLyId, int layDuLieuTheo1HoacNhieuPhongBan, int fromDate, int toDate, int loaiKhieuNaiID, int linhVucChungID, int linhVucConID)
        {
            List<KhieuNai_ReportInfo> listDauSo = new List<KhieuNai_ReportInfo>();

            // Danh sách nội dung công việc
            //Where điều kiện
            string whereClause = string.Empty;
            if (doiTacXuLyId != -1)
            {
                whereClause = string.Format("{0} AND DoiTacXuLyId : {1}", whereClause, doiTacXuLyId);
            }

            if (phongBanXuLyId > 0)
            {
                if (layDuLieuTheo1HoacNhieuPhongBan == 1)
                {
                    whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, phongBanXuLyId);
                }
                else if (layDuLieuTheo1HoacNhieuPhongBan == 2)
                {
                    List<PhongBanInfo> listPhongBan = new PhongBanImpl().GetAllPhongBanOfAllOfParentId(phongBanXuLyId);
                    if (listPhongBan != null && listPhongBan.Count > 0)
                    {
                        string sPhongBan = listPhongBan[0].Id.ToString();
                        for (int i = 1; i < listPhongBan.Count; i++)
                        {
                            sPhongBan = string.Format("{0} {1}", sPhongBan, listPhongBan[i].Id);
                        }

                        whereClause = string.Format("{0} AND PhongBanXuLyId : ({1})", whereClause, sPhongBan);
                    }
                }
            }

            if (fromDate != -1)
            {
                whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO ", whereClause, fromDate);
            }
            else
            {
                whereClause = string.Format("{0} AND NgayDongKNSort : [* TO ", whereClause);
            }

            if (toDate != -1)
            {
                whereClause = string.Format("{0} {1}]", whereClause, toDate);
            }
            else
            {
                whereClause = string.Format("{0} *]", whereClause);
            }

            if (loaiKhieuNaiID != -1)
            {
                whereClause = string.Format("{0} AND LoaiKhieuNaiId : {1}", whereClause, loaiKhieuNaiID);
            }

            if (linhVucChungID != -1)
            {
                whereClause = string.Format("{0} AND LinhVucChungId : {1}", whereClause, linhVucChungID);
            }

            if (linhVucConID != -1)
            {
                whereClause = string.Format("{0} AND LinhVucConId : {1}", whereClause, linhVucConID);
            }

            #region Dau So

            string whereClauseSoTien = string.Format("SoTien_Edit:0 {0} AND IsDaBuTien:true AND IsDauSo:true AND -LoaiTien:5", whereClause);
            var solrQuery = new SolrQuery(whereClauseSoTien);

            var qoSoTienDauSo = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "DichVuCPId, MaDichVu, DauSo, SoTien, SoTien_Edit");
            qoSoTienDauSo.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienDauSo.Start = 0;
            qoSoTienDauSo.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienDauSo = new StatsParameters();
            spSoTienDauSo.AddField("SoTien");
            spSoTienDauSo.AddFacet("DauSo");

            qoSoTienDauSo.Stats = spSoTienDauSo;

            var listQueryResult = QuerySolrBase<object>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTienDauSo);

            List<string> listDauSoId = new List<string>();
            foreach (var kv in listQueryResult.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listDauSoId.Contains(fv.Key))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.DauSo = fv.Key;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listDauSoId.Add(fv.Key);
                            listDauSo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))                          
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)  

            var qoSoTienEditDauSo = new QueryOptions();
            //Lấy ra những trường nào
            extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "DichVuCPId, MaDichVu, DauSo, SoTien, SoTien_Edit");
            qoSoTienEditDauSo.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienEditDauSo.Start = 0;
            qoSoTienEditDauSo.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienEditDauSo = new StatsParameters();
            spSoTienEditDauSo.AddField("SoTien_Edit");
            spSoTienEditDauSo.AddFacet("DauSo");

            qoSoTienEditDauSo.Stats = spSoTienEditDauSo;

            string whereClauseSoTienEdit = string.Format("-SoTien_Edit:0 {0} AND IsDaBuTien:true AND IsDauSo:true AND -LoaiTien:5", whereClause);
            solrQuery = new SolrQuery(whereClauseSoTienEdit);
            listQueryResult = QuerySolrBase<object>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTienEditDauSo);

            foreach (var kv in listQueryResult.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listDauSoId.Contains(fv.Key))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.DauSo = fv.Key;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listDauSoId.Add(fv.Key);
                            listDauSo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))  
                        else
                        {
                            for (int i = 0; i < listDauSo.Count; i++)
                            {
                                if (listDauSo[i].DauSoId.ToString() == fv.Key)
                                {
                                    listDauSo[i].SoLuongGiamTru += ConvertUtility.ToInt32(fv.Value.Count);
                                    listDauSo[i].SoTien += (decimal)fv.Value.Sum;
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)      

            #endregion

            #region Dich vu

            QueryOptions qoSoTienDichVu = new QueryOptions();
            //Lấy ra những trường nào
            extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "Id,DichVuCPId, MaDichVu, DauSo, SoTien, SoTien_Edit");
            qoSoTienDichVu.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienDichVu.Start = 0;
            qoSoTienDichVu.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienDichVu = new StatsParameters();
            spSoTienDichVu.AddField("SoTien");
            spSoTienDichVu.AddFacet("MaDichVu");

            qoSoTienDichVu.Stats = spSoTienDichVu;

            string whereClauseSoTienDichVu = string.Format("SoTien_Edit:0 {0} AND IsDaBuTien:true AND IsDauSo:false AND -DichVuCPId:0 AND -LoaiTien:5", whereClause);
            var solrQuery1 = new SolrQuery(whereClauseSoTienDichVu);

            var listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery1, qoSoTienDichVu);

            listDauSoId = new List<string>();
            foreach (var kv in listKhieuNaiInfo.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listDauSoId.Contains(fv.Key))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.DauSo = fv.Key;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listDauSoId.Add(fv.Key);
                            listDauSo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))                          
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)  

            var qoSoTienEditDichVu = new QueryOptions();
            //Lấy ra những trường nào
            extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "DichVuCPId, MaDichVu, DauSo, SoTien, SoTien_Edit");
            qoSoTienEditDichVu.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienEditDichVu.Start = 0;
            qoSoTienEditDichVu.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienEditDichVu = new StatsParameters();
            spSoTienEditDichVu.AddField("SoTien_Edit");
            spSoTienEditDichVu.AddFacet("MaDichVu");

            qoSoTienEditDichVu.Stats = spSoTienEditDichVu;

            whereClauseSoTienEdit = string.Format("-SoTien_Edit:0 {0} AND IsDaBuTien:true AND IsDauSo:false AND -DichVuCPId:0 AND -LoaiTien:5", whereClause);
            solrQuery = new SolrQuery(whereClauseSoTienEdit);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTienEditDichVu);

            foreach (var kv in listKhieuNaiInfo.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listDauSoId.Contains(fv.Key))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.DauSo = fv.Key;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listDauSoId.Add(fv.Key);
                            listDauSo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))  
                        else
                        {
                            for (int i = 0; i < listDauSo.Count; i++)
                            {
                                if (listDauSo[i].DauSoId.ToString() == fv.Key)
                                {
                                    listDauSo[i].SoLuongGiamTru += ConvertUtility.ToInt32(fv.Value.Count);
                                    listDauSo[i].SoTien += (decimal)fv.Value.Sum;
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)             

            #endregion

            return listDauSo;

        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 04/07/2014
        /// Todo : Báo cáo tổng hợp giảm trừ của VNPTTT
        /// </summary>
        /// <param name="listDoiTacId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopGiamTruVNPTTT_Solr(List<int> listDoiTacId, DateTime fromDate, DateTime toDate)
        {
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("DoiTacId");
            dtResult.Columns.Add("TenDoiTac");
            dtResult.Columns.Add("SoTienGiamTru");

            for (int i = 0; i < listDoiTacId.Count; i++)
            {
                DataRow row = dtResult.NewRow();
                row["DoiTacId"] = listDoiTacId[i];

                for (int j = 0; j < DoiTacImpl.ListDoiTac.Count; j++)
                {
                    if (listDoiTacId[i] == DoiTacImpl.ListDoiTac[j].Id)
                    {
                        row["TenDoiTac"] = DoiTacImpl.ListDoiTac[j].TenDoiTac;
                        break;
                    }
                }

                row["SoTienGiamTru"] = 0;
                dtResult.Rows.Add(row);
            }

            string whereClause = string.Format("NgayDongKNSort:[{0} TO {1}]", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            QueryOptions queryOptionPost = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamPost = new Dictionary<string, string>();
            extraParamPost.Add("fl", @"");

            queryOptionPost.ExtraParams = extraParamPost;

            queryOptionPost.Start = 0;
            queryOptionPost.Rows = LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count;

            FacetParameters fpPost = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("DoiTacXuLyId");
            fpPost.Queries.Add(facetField);
            queryOptionPost.Facet = fpPost;

            StatsParameters spPost = new StatsParameters();
            spPost.AddFacet("DoiTacXuLyId");
            spPost.AddField("SoTienKhauTru_TKC");
            spPost.AddField("SoTienKhauTru_KM");
            spPost.AddField("SoTienKhauTru_KM1");
            spPost.AddField("SoTienKhauTru_KM2");
            spPost.AddField("SoTienKhauTru_Khac");
            spPost.AddField("SoTienKhauTru_TS_GPRS");
            spPost.AddField("SoTienKhauTru_TS_CP");
            spPost.AddField("SoTienKhauTru_TS_Thoai");
            spPost.AddField("SoTienKhauTru_TS_SMS");
            spPost.AddField("SoTienKhauTru_TS_IR");
            spPost.AddField("SoTienKhauTru_TS_Khac");
            queryOptionPost.Stats = spPost;

            SolrQuery solrQuery = new SolrQuery(whereClause);
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionPost);

            List<string> listKhieuNaiId = new List<string>();
            List<KhieuNai_ReportInfo> listKhieuNaiMoney = new List<KhieuNai_ReportInfo>();

            foreach (var kv in listKhieuNaiInfo.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Data, SoTienKhauTru_Khac
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);
                        KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();

                        if (!listKhieuNaiId.Contains(fv.Key))
                        {

                            int doiTacXuLyId = ConvertUtility.ToInt32(fv.Key);
                            reportInfo.DoiTacXuLyId = doiTacXuLyId;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);

                            switch (kv.Key)
                            {
                                case "SoTienKhauTru_TKC":
                                    reportInfo.SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM":
                                    reportInfo.SoTienKhauTru_KM = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM1":
                                    reportInfo.SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM2":
                                    reportInfo.SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_Khac":
                                    reportInfo.SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_GPRS":
                                    reportInfo.SoTienKhauTru_TS_GPRS = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_CP":
                                    reportInfo.SoTienKhauTru_TS_CP = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_Thoai":
                                    reportInfo.SoTienKhauTru_TS_Thoai = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_SMS":
                                    reportInfo.SoTienKhauTru_TS_SMS = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_IR":
                                    reportInfo.SoTienKhauTru_TS_IR = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_Khac":
                                    reportInfo.SoTienKhauTru_TS_Khac = (decimal)fv.Value.Sum;
                                    break;
                            }

                            listKhieuNaiId.Add(fv.Key);
                            listKhieuNaiMoney.Add(reportInfo);
                        } // end if (!listKhieuNaiId.Contains(fv.Key))
                        else
                        {
                            for (int i = 0; i < listKhieuNaiMoney.Count; i++)
                            {
                                if (listKhieuNaiMoney[i].DoiTacXuLyId.ToString() == fv.Key)
                                {
                                    switch (kv.Key)
                                    {
                                        case "SoTienKhauTru_TKC":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM":
                                            listKhieuNaiMoney[i].SoTienKhauTru_KM = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM1":
                                            listKhieuNaiMoney[i].SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM2":
                                            listKhieuNaiMoney[i].SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_Khac":
                                            listKhieuNaiMoney[i].SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_GPRS":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_GPRS = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_CP":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_CP = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_Thoai":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_Thoai = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_SMS":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_SMS = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_IR":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_IR = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_Khac":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_Khac = (decimal)fv.Value.Sum;
                                            break;
                                    }
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)               

            if (listKhieuNaiMoney != null && listKhieuNaiMoney.Count > 0)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    for (int i = 0; i < listKhieuNaiMoney.Count; i++)
                    {
                        if (row["DoiTacId"].ToString() == listKhieuNaiMoney[i].DoiTacXuLyId.ToString())
                        {
                            row["SoTienGiamTru"] = listKhieuNaiMoney[i].SoTienKhauTru_TKC + listKhieuNaiMoney[i].SoTienKhauTru_KM + listKhieuNaiMoney[i].SoTienKhauTru_KM1
                                        + listKhieuNaiMoney[i].SoTienKhauTru_KM2 + listKhieuNaiMoney[i].SoTienKhauTru_Khac
                                        + listKhieuNaiMoney[i].SoTienKhauTru_TS_GPRS + listKhieuNaiMoney[i].SoTienKhauTru_TS_CP + listKhieuNaiMoney[i].SoTienKhauTru_TS_Thoai
                                        + listKhieuNaiMoney[i].SoTienKhauTru_TS_SMS + listKhieuNaiMoney[i].SoTienKhauTru_TS_IR + listKhieuNaiMoney[i].SoTienKhauTru_TS_Khac;
                            break;
                        }
                    }
                }
            }

            return dtResult;
        }
        /// <summary>
        /// AUTHOR : DODV
        /// DESC: báo cáo tổng hợp giảm trừ dịch vụ giá trị gia tăng theo đơn vị
        /// CREATE DATE: 24/04/2016
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BCTH_GiamTru_DVGTGTDV_Solr(int doiTacId, DateTime fromDate, DateTime toDate)
        {
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("DoiTacId");
            dtResult.Columns.Add("TenDoiTac");
            dtResult.Columns.Add("SoTienGiamTru");
            dtResult.Columns.Add("DonViTrucThuocChoBaoCao");
            dtResult.Columns.Add("Level");
            List<DoiTacInfo> listDoiTacInfo = new DoiTacImpl().GetAllDoiTacOfDonViTrucThuocChoBaoCao(doiTacId);

            for (int i = 0; i < listDoiTacInfo.Count; i++)
            {
                DataRow row = dtResult.NewRow();
                row["DoiTacId"] = listDoiTacInfo[i].Id;
                row["TenDoiTac"] = listDoiTacInfo[i].TenDoiTac;
                row["SoTienGiamTru"] = 0;
                row["DonViTrucThuocChoBaoCao"] = listDoiTacInfo[i].DonViTrucThuocChoBaoCao;
                row["Level"] = listDoiTacInfo[i].Level;
                dtResult.Rows.Add(row);
            }


            string whereClause = string.Format("NgayDongKNSort:[{0} TO {1}]", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            QueryOptions queryOptionPost = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamPost = new Dictionary<string, string>();
            extraParamPost.Add("fl", @"");

            queryOptionPost.ExtraParams = extraParamPost;

            queryOptionPost.Start = 0;
            queryOptionPost.Rows = LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count;

            FacetParameters fpPost = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("DoiTacXuLyId");
            fpPost.Queries.Add(facetField);
            queryOptionPost.Facet = fpPost;

            StatsParameters spPost = new StatsParameters();
            spPost.AddFacet("DoiTacXuLyId");
            spPost.AddField("SoTienKhauTru_TKC");
            spPost.AddField("SoTienKhauTru_KM");
            spPost.AddField("SoTienKhauTru_KM1");
            spPost.AddField("SoTienKhauTru_KM2");
            spPost.AddField("SoTienKhauTru_Khac");
            spPost.AddField("SoTienKhauTru_TS_GPRS");
            spPost.AddField("SoTienKhauTru_TS_CP");
            spPost.AddField("SoTienKhauTru_TS_Thoai");
            spPost.AddField("SoTienKhauTru_TS_SMS");
            spPost.AddField("SoTienKhauTru_TS_IR");
            spPost.AddField("SoTienKhauTru_TS_Khac");
            queryOptionPost.Stats = spPost;

            SolrQuery solrQuery = new SolrQuery(whereClause);
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionPost);

            List<string> listKhieuNaiId = new List<string>();
            List<KhieuNai_ReportInfo> listKhieuNaiMoney = new List<KhieuNai_ReportInfo>();

            foreach (var kv in listKhieuNaiInfo.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Data, SoTienKhauTru_Khac
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {

                    foreach (var fv in f.Value)
                    {

                        KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();

                        if (!listKhieuNaiId.Contains(fv.Key))
                        {

                            int doiTacXuLyId = ConvertUtility.ToInt32(fv.Key);
                            reportInfo.DoiTacXuLyId = doiTacXuLyId;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);

                            switch (kv.Key)
                            {
                                case "SoTienKhauTru_TKC":
                                    reportInfo.SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM":
                                    reportInfo.SoTienKhauTru_KM = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM1":
                                    reportInfo.SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM2":
                                    reportInfo.SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_Khac":
                                    reportInfo.SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_GPRS":
                                    reportInfo.SoTienKhauTru_TS_GPRS = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_CP":
                                    reportInfo.SoTienKhauTru_TS_CP = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_Thoai":
                                    reportInfo.SoTienKhauTru_TS_Thoai = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_SMS":
                                    reportInfo.SoTienKhauTru_TS_SMS = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_IR":
                                    reportInfo.SoTienKhauTru_TS_IR = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_Khac":
                                    reportInfo.SoTienKhauTru_TS_Khac = (decimal)fv.Value.Sum;
                                    break;
                            }

                            listKhieuNaiId.Add(fv.Key);
                            listKhieuNaiMoney.Add(reportInfo);
                        } // end if (!listKhieuNaiId.Contains(fv.Key))
                        else
                        {
                            for (int i = 0; i < listKhieuNaiMoney.Count; i++)
                            {
                                if (listKhieuNaiMoney[i].DoiTacXuLyId.ToString() == fv.Key)
                                {
                                    switch (kv.Key)
                                    {
                                        case "SoTienKhauTru_TKC":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM":
                                            listKhieuNaiMoney[i].SoTienKhauTru_KM = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM1":
                                            listKhieuNaiMoney[i].SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM2":
                                            listKhieuNaiMoney[i].SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_Khac":
                                            listKhieuNaiMoney[i].SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_GPRS":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_GPRS = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_CP":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_CP = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_Thoai":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_Thoai = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_SMS":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_SMS = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_IR":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_IR = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_Khac":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_Khac = (decimal)fv.Value.Sum;
                                            break;
                                    }
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)               

            if (listKhieuNaiMoney.Count > 0)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    for (int i = 0; i < listKhieuNaiMoney.Count; i++)
                    {
                        if (row["DoiTacId"].ToString() == listKhieuNaiMoney[i].DoiTacXuLyId.ToString())
                        {
                            row["SoTienGiamTru"] = listKhieuNaiMoney[i].SoTienKhauTru_TKC + listKhieuNaiMoney[i].SoTienKhauTru_KM + listKhieuNaiMoney[i].SoTienKhauTru_KM1
                                        + listKhieuNaiMoney[i].SoTienKhauTru_KM2 + listKhieuNaiMoney[i].SoTienKhauTru_Khac
                                        + listKhieuNaiMoney[i].SoTienKhauTru_TS_GPRS + listKhieuNaiMoney[i].SoTienKhauTru_TS_CP + listKhieuNaiMoney[i].SoTienKhauTru_TS_Thoai
                                        + listKhieuNaiMoney[i].SoTienKhauTru_TS_SMS + listKhieuNaiMoney[i].SoTienKhauTru_TS_IR + listKhieuNaiMoney[i].SoTienKhauTru_TS_Khac;
                            break;
                        }
                    }
                }
            }

            return dtResult;
        }
        /// <summary>
        /// AUTHOR : DODV
        /// DESC: báo cáo tổng hợp giảm trừ dịch vụ giá trị gia tăng theo dịch vụ
        /// CREATE DATE: 25/04/2016
        /// </summary>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BCTH_GiamTru_DVGTGT_DiVu_Solr(DateTime fromDate, DateTime toDate)
        {
            System.Diagnostics.Debugger.Launch();

            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("LinhVucConId");
            dtResult.Columns.Add("TenLinhVucCon");
            dtResult.Columns.Add("SoTienGiamTru");
            List<LoaiKhieuNaiInfo> listLoaiKhieuNaiInfo = new LoaiKhieuNaiImpl().GetListDynamic("*", "Cap = 3 AND ParentLoaiKHieuNaiId IN (1265, 1339)", string.Empty);
            if (listLoaiKhieuNaiInfo == null || listLoaiKhieuNaiInfo.Count == 0)
                return null;
            for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
            {
                DataRow row = dtResult.NewRow();
                row["LinhVucConId"] = listLoaiKhieuNaiInfo[i].Id;
                row["TenLinhVucCon"] = listLoaiKhieuNaiInfo[i].Name;
                dtResult.Rows.Add(row);
            }
            string whereClause = string.Format("NgayDongKNSort:[{0} TO {1}]", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            QueryOptions queryOptionPost = new QueryOptions();
            //Lấy ra những trường nào
            Dictionary<string, string> extraParamPost = new Dictionary<string, string>();
            extraParamPost.Add("fl", @"");

            queryOptionPost.ExtraParams = extraParamPost;

            queryOptionPost.Start = 0;
            queryOptionPost.Rows = LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count;

            FacetParameters fpPost = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("LinhVucConId");
            fpPost.Queries.Add(facetField);
            queryOptionPost.Facet = fpPost;

            StatsParameters spPost = new StatsParameters();
            spPost.AddFacet("LinhVucConId");
            spPost.AddField("SoTienKhauTru_TKC");
            spPost.AddField("SoTienKhauTru_KM");
            spPost.AddField("SoTienKhauTru_KM1");
            spPost.AddField("SoTienKhauTru_KM2");
            spPost.AddField("SoTienKhauTru_Khac");
            spPost.AddField("SoTienKhauTru_TS_GPRS");
            spPost.AddField("SoTienKhauTru_TS_CP");
            spPost.AddField("SoTienKhauTru_TS_Thoai");
            spPost.AddField("SoTienKhauTru_TS_SMS");
            spPost.AddField("SoTienKhauTru_TS_IR");
            spPost.AddField("SoTienKhauTru_TS_Khac");
            queryOptionPost.Stats = spPost;

            SolrQuery solrQuery = new SolrQuery(whereClause);
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionPost);

            List<string> listKhieuNaiId = new List<string>();
            List<KhieuNai_ReportInfo> listKhieuNaiMoney = new List<KhieuNai_ReportInfo>();

            foreach (var kv in listKhieuNaiInfo.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Data, SoTienKhauTru_Khac
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {

                    foreach (var fv in f.Value)
                    {

                        KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();

                        if (!listKhieuNaiId.Contains(fv.Key))
                        {

                            int linhVucConId = ConvertUtility.ToInt32(fv.Key);
                            reportInfo.LinhVucConId = linhVucConId;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);

                            switch (kv.Key)
                            {
                                case "SoTienKhauTru_TKC":
                                    reportInfo.SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM":
                                    reportInfo.SoTienKhauTru_KM = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM1":
                                    reportInfo.SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM2":
                                    reportInfo.SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_Khac":
                                    reportInfo.SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_GPRS":
                                    reportInfo.SoTienKhauTru_TS_GPRS = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_CP":
                                    reportInfo.SoTienKhauTru_TS_CP = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_Thoai":
                                    reportInfo.SoTienKhauTru_TS_Thoai = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_SMS":
                                    reportInfo.SoTienKhauTru_TS_SMS = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_IR":
                                    reportInfo.SoTienKhauTru_TS_IR = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_TS_Khac":
                                    reportInfo.SoTienKhauTru_TS_Khac = (decimal)fv.Value.Sum;
                                    break;
                            }

                            listKhieuNaiId.Add(fv.Key);
                            listKhieuNaiMoney.Add(reportInfo);
                        } // end if (!listKhieuNaiId.Contains(fv.Key))
                        else
                        {
                            for (int i = 0; i < listKhieuNaiMoney.Count; i++)
                            {
                                if (listKhieuNaiMoney[i].LinhVucConId.ToString() == fv.Key)
                                {
                                    switch (kv.Key)
                                    {
                                        case "SoTienKhauTru_TKC":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM":
                                            listKhieuNaiMoney[i].SoTienKhauTru_KM = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM1":
                                            listKhieuNaiMoney[i].SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM2":
                                            listKhieuNaiMoney[i].SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_Khac":
                                            listKhieuNaiMoney[i].SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_GPRS":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_GPRS = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_CP":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_CP = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_Thoai":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_Thoai = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_SMS":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_SMS = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_IR":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_IR = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_TS_Khac":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TS_Khac = (decimal)fv.Value.Sum;
                                            break;
                                    }
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)               

            if (listKhieuNaiMoney.Count > 0)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    for (int i = 0; i < listKhieuNaiMoney.Count; i++)
                    {
                        if (row["LinhVucConId"].ToString() == listKhieuNaiMoney[i].LinhVucConId.ToString())
                        {
                            row["SoTienGiamTru"] = listKhieuNaiMoney[i].SoTienKhauTru_TKC + listKhieuNaiMoney[i].SoTienKhauTru_KM + listKhieuNaiMoney[i].SoTienKhauTru_KM1
                                        + listKhieuNaiMoney[i].SoTienKhauTru_KM2 + listKhieuNaiMoney[i].SoTienKhauTru_Khac
                                        + listKhieuNaiMoney[i].SoTienKhauTru_TS_GPRS + listKhieuNaiMoney[i].SoTienKhauTru_TS_CP + listKhieuNaiMoney[i].SoTienKhauTru_TS_Thoai
                                        + listKhieuNaiMoney[i].SoTienKhauTru_TS_SMS + listKhieuNaiMoney[i].SoTienKhauTru_TS_IR + listKhieuNaiMoney[i].SoTienKhauTru_TS_Khac;
                            break;
                        }
                    }
                }
            }

            return dtResult;
        }
        public DataTable BaoCaoTongHopPAKNTheoPhongBanVNPTTT_Solr(int doitacId, int phongbanId, int fromDate, int toDate)
        {

            var dtPhongban = new DataTable();
            dtPhongban.Columns.Add("Id");
            dtPhongban.Columns.Add("TenPhongBan");
            dtPhongban.Columns.Add("SLMangSang");
            dtPhongban.Columns.Add("SLTiepNhan");
            dtPhongban.Columns.Add("SLGiaiQuyet");
            dtPhongban.Columns.Add("SLTonDong");
            dtPhongban.Columns.Add("SLGiamCuoc");
            dtPhongban.Columns.Add("SLLuyKeNam");
            dtPhongban.Columns.Add("SLChatLuongDV");
            dtPhongban.Columns.Add("SLChatLuongPV");
            dtPhongban.Columns.Add("SLCuoc");
            dtPhongban.Columns.Add("SLKhac");
            dtPhongban.Columns.Add("SLLoiNhanVien");
            dtPhongban.Columns.Add("SLLoiHeThong");
            dtPhongban.Columns.Add("SLChamSocKhachHang");
            dtPhongban.Columns.Add("SLLyDoKhac");
            List<PhongBanInfo> listPhongBan = null;
            int soLuongTiepNhan = 0;
            int soLuongXuLy = 0;
            int soLuongTonDong = 0;
            int soLuongQuaHan = 0;
            int soChatLuongDV = 0;
            int soChatLuongPhucVu = 0;
            int soCuoc = 0;
            int soKhac = 0;
            int soLoiNhanVien = 0;
            int soLoiHeThong = 0;
            int soLoiChamSocKhachHang = 0;
            int soLoiKhac = 0;
            string lstIds = "";
            if (phongbanId != -1)
            {
                var objPhongBan = new PhongBanImpl().QLKN_PhongBangetByID(phongbanId);
                if (objPhongBan != null)
                {
                    listPhongBan = new List<PhongBanInfo>();
                    listPhongBan.Add(objPhongBan);

                }
            }
            else
            {
                listPhongBan = new PhongBanImpl().GetListPhongBanByDoiTacId(doitacId);
            }

            if (listPhongBan != null && listPhongBan.Count > 0)
            {
                foreach (PhongBanInfo itemPhongban in listPhongBan)
                {
                    DataRow row = dtPhongban.NewRow();
                    row["Id"] = itemPhongban.Id;
                    row["TenPhongBan"] = itemPhongban.GetFormattedBreadCrumb(" >>");
                    row["SLMangSang"] = "0";
                    row["SLLuyKeNam"] = "0";
                    row["SLLyDoKhac"] = "0";
                    // row["TenNguoiDung"] = listNguoiSuDung[i].TenDayDu;
                    dtPhongban.Rows.Add(row);
                    lstIds += itemPhongban.Id.ToString() + " ";
                }

            } // end if (listPhongBan != null && listPhongBan.Count > 0)
            else
            {
                return null;
            }

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"");

            queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            listSortOrder.Add(sortOrder);

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");
            GroupingParameters gp = new GroupingParameters();
            gp.Fields = listGroupField;
            gp.Limit = 2;
            gp.Main = true;
            gp.OrderBy = listSortOrder;
            queryOptionTiepNhan.Grouping = gp;

            //Where điều kiện

            string whereClauseTiepNhan = string.Format("LDate:[{0} TO {1}] AND (DoiTacXuLyTruocId:{2} OR DoiTacXuLyId:{2})  AND (PhongBanXuLyTruocId:({3}) OR PhongBanXuLyId:({3}))", ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true), doitacId, lstIds);

            solrQuery = new SolrQuery(whereClauseTiepNhan);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
            //Utility.LogEvent(whereClauseTiepNhan);
            //Utility.LogEvent(listKhieuNaiInfo);
            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {
                foreach (DataRow row in dtPhongban.Rows)
                {
                    soLuongTiepNhan = 0;
                    soLuongXuLy = 0;
                    soLuongTonDong = 0;
                    soChatLuongPhucVu = 0;
                    soCuoc = 0;
                    soChatLuongDV = 0;
                    soKhac = 0;
                    soLoiNhanVien = 0;
                    soLoiChamSocKhachHang = 0;
                    soLoiHeThong = 0;
                    for (int j = 0; j < listKhieuNaiInfo.Count; j++)
                    {
                        // Nếu đã chuyển về đài khai thác
                        if (listKhieuNaiInfo[j].DoiTacXuLyTruocId == doitacId && listKhieuNaiInfo[j].DoiTacXuLyTruocId != listKhieuNaiInfo[j].DoiTacXuLyId && listKhieuNaiInfo[j].PhongBanXuLyTruocId == ConvertUtility.ToInt32(row["Id"].ToString()))
                        {
                            soLuongTiepNhan++;
                            soLuongXuLy++;
                            // fix loai dich vu =26 hoac 71(dich vu hoac chat luong mang)
                            if (listKhieuNaiInfo[j].LoaiKhieuNaiId == 26 || listKhieuNaiInfo[j].LoaiKhieuNaiId == 71)
                            {
                                soChatLuongDV++;
                            }
                            else if (listKhieuNaiInfo[j].LoaiKhieuNaiId == 89)// chat luong phuc vu
                            {
                                soChatLuongPhucVu++;
                            }

                            else if (listKhieuNaiInfo[j].LoaiKhieuNaiId == 30 || listKhieuNaiInfo[j].LoaiKhieuNaiId == 35)
                            {
                                soCuoc++;

                            }
                            else
                            {
                                soKhac++;
                            }

                        }
                        // Nếu chưa chuyển về đài khai thác
                        else if (listKhieuNaiInfo[j].DoiTacXuLyId == doitacId && listKhieuNaiInfo[j].PhongBanXuLyId == ConvertUtility.ToInt32(row["Id"].ToString()))
                        {
                            soLuongTiepNhan++;
                            // if(listKhieuNaiInfo[j].HanhDong != 4)
                            soLuongTonDong++;
                            // fix loai dich vu =26 hoac 71(dich vu hoac chat luong mang)
                            if (listKhieuNaiInfo[j].LoaiKhieuNaiId == 26 || listKhieuNaiInfo[j].LoaiKhieuNaiId == 71)
                            {
                                soChatLuongDV++;
                            }
                            else if (listKhieuNaiInfo[j].LoaiKhieuNaiId == 89)// chat luong phuc vu
                            {
                                soChatLuongPhucVu++;
                            }
                            else if (listKhieuNaiInfo[j].LoaiKhieuNaiId == 30 || listKhieuNaiInfo[j].LoaiKhieuNaiId == 35)
                            {
                                soCuoc++;


                            }
                            else
                            {
                                soKhac++;
                            }

                        }

                    }

                    row["SLTiepNhan"] = soLuongTiepNhan;
                    row["SLGiaiQuyet"] = soLuongXuLy;
                    row["SLTonDong"] = soLuongTonDong;
                    row["SLChatLuongDV"] = soChatLuongDV;
                    row["SLChatLuongPV"] = soChatLuongPhucVu;
                    row["SLCuoc"] = soCuoc;
                    row["SLKhac"] = soKhac;
                    row["SLLuyKeNam"] = soLuongTonDong;

                } // end for (int i = 0; i < listNguoiSuDung.Count; i++)                              
            } // end if (listKhieuNaiInfo != null)

            // Tính số lượng tồn đọng và quá hạn trong quá khứ (tính từ thời điểm trước ngày bắt đầu)
            // Tồn đọng là chưa chuyển cho trung tâm (đối tác) khác
            string whereClauseTonDong = string.Format("  LDate : [* TO {0}] AND (DoiTacXuLyTruocId:{1} OR DoiTacXuLyId:{1})  AND (PhongBanXuLyTruocId:({2}) OR PhongBanXuLyId:({2}))", ConvertDateToSolr(fromDate.ToString(), true, false), doitacId, lstIds);
            solrQuery = new SolrQuery(whereClauseTonDong);

            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"");

            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;
            queryOptionTonDong.Grouping = gp;

            var mSoluongMangSang = 0;
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {
                foreach (DataRow row in dtPhongban.Rows)
                {
                    mSoluongMangSang = 0;
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        if (listKhieuNaiInfo[i].DoiTacXuLyId == doitacId && listKhieuNaiInfo[i].PhongBanXuLyId == ConvertUtility.ToInt32(row["Id"].ToString()))
                        {
                            mSoluongMangSang++;
                        }
                    }
                    row["SLMangSang"] = mSoluongMangSang;
                    row["SLLuyKeNam"] = ConvertUtility.ToInt32(row["SLLuyKeNam"], 0) + mSoluongMangSang;
                }
            }
            //---------------------------
            string whereClauseGiamCuoc = string.Format("DoiTacXuLyId:{0} AND LDate: [{1} TO {2}]", doitacId, ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true));
            var solrQueryGiamCuoc = new SolrQuery(whereClauseGiamCuoc);
            var qoGiamCuoc = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "");
            qoGiamCuoc.ExtraParams = extraParamLoaiKhieuNai;

            qoGiamCuoc.Start = 0;
            qoGiamCuoc.Rows = int.MaxValue;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQueryGiamCuoc, qoGiamCuoc);
            if (listKhieuNaiInfo.Any())
            {
                decimal totalSoTienGiamTru = 0;
                foreach (DataRow row in dtPhongban.Rows)
                {
                    foreach (var item in listKhieuNaiInfo)
                    {
                        if (item.PhongBanXuLyId == ConvertUtility.ToInt32(row["Id"]))
                        {
                            if (item.LyDoGiamTru == 1)//loi do nhan vien
                            {
                                soLoiHeThong++;
                            }
                            else if (item.LyDoGiamTru == 2)//loi do nhan vien
                            {
                                soLoiNhanVien++;
                            }
                            else if (item.LyDoGiamTru == 3)//loi do nhan vien
                            {
                                soLoiChamSocKhachHang++;
                            }
                            else
                            {
                                soLoiKhac++;
                            }

                            decimal totalTienGiamTru = item.SoTien_Edit > 0 ? item.SoTien_Edit : item.SoTien;
                            totalSoTienGiamTru += totalTienGiamTru;
                        }
                    }
                    row["SLLoiNhanVien"] = soLoiNhanVien;
                    row["SLLoiHeThong"] = soLoiHeThong;
                    row["SLChamSocKhachHang"] = soLoiChamSocKhachHang;
                    row["SLLyDoKhac"] = soLoiKhac;
                    row["SLGiamCuoc"] = totalSoTienGiamTru > 0 ? totalSoTienGiamTru : 0;
                }
            }

            return dtPhongban;
        }
        /// <summary>
        /// Bao cao tong hop PAKN theo nguoi dung vnp tinh thanh
        /// Author: Nguyen Chi Quang
        /// Ngay: 02/06/2014
        /// </summary>
        /// <param name="doitacId"></param>
        /// <param name="phongBanId"></param>
        /// <param name="nguoiSuDungId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopPAKNTheoNguoiDungVNPTTT_Solr(int doitacId, int phongBanId, int nguoiSuDungId, int fromDate, int toDate)
        {

            DataTable dtNguoiDung = new DataTable();
            dtNguoiDung.Columns.Add("Id");
            dtNguoiDung.Columns.Add("TenTruyCap");
            dtNguoiDung.Columns.Add("TenNguoiDung");
            dtNguoiDung.Columns.Add("SLTiepNhan");
            dtNguoiDung.Columns.Add("SLDaXuLy");
            dtNguoiDung.Columns.Add("SLTonDong");
            dtNguoiDung.Columns.Add("SLQuaHan");
            var listNguoiDungPhong = "";
            List<NguoiSuDungInfo> listNguoiSuDung = null;
            int soLuongTiepNhan = 0;
            int soLuongXuLy = 0;
            int soLuongTonDong = 0;
            int soLuongQuaHan = 0;
            if (nguoiSuDungId != -1)
            {
                NguoiSuDungInfo objNguoiSuDung = new NguoiSuDungImpl().GetInfo(nguoiSuDungId);
                if (objNguoiSuDung != null)
                {
                    listNguoiSuDung = new List<NguoiSuDungInfo>();
                    listNguoiSuDung.Add(objNguoiSuDung);

                }
            }
            else
            {
                listNguoiSuDung = new NguoiSuDungImpl().GetListNguoiSuDungByPhongBanId(phongBanId);
            }

            if (listNguoiSuDung != null && listNguoiSuDung.Count > 0)
            {
                for (int i = 0; i < listNguoiSuDung.Count; i++)
                {
                    DataRow row = dtNguoiDung.NewRow();
                    row["Id"] = listNguoiSuDung[i].Id;
                    row["TenTruyCap"] = listNguoiSuDung[i].TenTruyCap;
                    row["TenNguoiDung"] = listNguoiSuDung[i].TenDayDu;
                    dtNguoiDung.Rows.Add(row);

                    listNguoiDungPhong += listNguoiSuDung[i].TenTruyCap + " ";
                } // end for (int i = 0; i < listPhongBan.Count; i++)
            } // end if (listPhongBan != null && listPhongBan.Count > 0)
            else
            {
                return null;
            }

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"");

            queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            listSortOrder.Add(sortOrder);

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");
            GroupingParameters gp = new GroupingParameters();
            gp.Fields = listGroupField;
            gp.Limit = 2;
            gp.Main = true;
            gp.OrderBy = listSortOrder;
            queryOptionTiepNhan.Grouping = gp;

            //Where điều kiện
            string whereClause = string.Empty;
            string whereClauseTiepNhan = string.Format("LDate:[{0} TO {1}] AND (DoiTacXuLyTruocId:{2} OR DoiTacXuLyId:{2}) AND (PhongBanXuLyTruocId:{3} OR PhongBanXuLyId:{3})  ", ConvertDateToSolr(fromDate.ToString(), true, false), ConvertDateToSolr(toDate.ToString(), false, true), doitacId, phongBanId);

            solrQuery = new SolrQuery(whereClauseTiepNhan);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
            //Utility.LogEvent(whereClauseTiepNhan);
            //Utility.LogEvent(listKhieuNaiInfo);
            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {
                foreach (DataRow row in dtNguoiDung.Rows)
                {
                    soLuongTiepNhan = 0;
                    soLuongXuLy = 0;
                    soLuongQuaHan = 0;
                    soLuongTonDong = 0;
                    for (int j = 0; j < listKhieuNaiInfo.Count; j++)
                    {
                        // Nếu đã chuyển về đài khai thác
                        if (listKhieuNaiInfo[j].DoiTacXuLyTruocId == doitacId && listKhieuNaiInfo[j].DoiTacXuLyTruocId != listKhieuNaiInfo[j].DoiTacXuLyId
                            && listKhieuNaiInfo[j].NguoiXuLyTruoc == row["TenTruyCap"].ToString())
                        {
                            soLuongTiepNhan++;
                            soLuongXuLy++;

                            if (listKhieuNaiInfo[j].LDate > listKhieuNaiInfo[j].NgayQuaHan)
                            {
                                soLuongQuaHan++;
                            }

                            //if ((j + 1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
                            //{
                            //    listKhieuNaiInfo.RemoveAt(j + 1);
                            //}
                        }
                        // Nếu chưa chuyển về đài khai thác
                        else if (listKhieuNaiInfo[j].DoiTacXuLyId == doitacId && listKhieuNaiInfo[j].NguoiXuLy == row["TenTruyCap"].ToString())
                        {
                            soLuongTiepNhan++;
                            soLuongTonDong++;

                            // nếu quá hạn thì tăng số lượng quá hạn
                            if ((j + 1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
                            {
                                if (listKhieuNaiInfo[j + 1].LDate > listKhieuNaiInfo[j + 1].NgayQuaHan)
                                {
                                    soLuongQuaHan++;
                                }

                                // listKhieuNaiInfo.RemoveAt(j + 1);
                            }
                        }
                        //else
                        //{
                        //    // Trường hợp nếu bản ghi đầu của từng nhóm không phải của người dùng thì chuyển sang nhóm KhieuNaiId khác luôn
                        //    //  (vì người dùng này sẽ không phải là người tiếp nhận và xử lý
                        //    if ((j + 1) < listKhieuNaiInfo.Count && listKhieuNaiInfo[j].KhieuNaiId == listKhieuNaiInfo[j + 1].KhieuNaiId)
                        //    {
                        //        j++;
                        //    }
                        //}

                        //listKhieuNaiInfo.RemoveAt(j);
                        //j--;
                    }

                    row["SLTiepNhan"] = soLuongTiepNhan;
                    row["SLDaXuLy"] = soLuongXuLy;
                    row["SLTonDong"] = soLuongTonDong;
                    row["SLQuaHan"] = soLuongQuaHan;
                } // end for (int i = 0; i < listNguoiSuDung.Count; i++)                              
            } // end if (listKhieuNaiInfo != null)

            // Tính số lượng tồn đọng và quá hạn trong quá khứ (tính từ thời điểm trước ngày bắt đầu)
            // Tồn đọng là chưa chuyển cho trung tâm (đối tác) khác
            string whereClauseTonDong = string.Format("PhongBanXuLyId:{0} AND -TrangThai:3 AND LDate : [* TO {1}]", phongBanId, ConvertDateToSolr(fromDate.ToString(), true, false));
            solrQuery = new SolrQuery(whereClauseTonDong);

            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"");

            queryOptionTonDong.ExtraParams = extraParamTonDong;

            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTonDong);
            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {
                foreach (DataRow row in dtNguoiDung.Rows)
                {
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        if (listKhieuNaiInfo[i].NguoiXuLy == row["TenTruyCap"].ToString())
                        {
                            row["SLTonDong"] = ConvertUtility.ToInt32(row["SLTonDong"], 0) + 1;
                            if (toDate > listKhieuNaiInfo[i].NgayQuaHanPhongBanXuLySort)
                            {
                                row["SLQuaHan"] = ConvertUtility.ToInt32(row["SLQuaHan"], 0) + 1;
                            }

                            listKhieuNaiInfo.RemoveAt(i);
                            i--;
                        }
                    }
                }
            }

            return dtNguoiDung;
        }

        #endregion

        #region Báo cáo VNP

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 22/01/2014
        /// Todo : Lấy báo cáo tổng hợp số lượng khiếu nại theo khu vực
        /// </summary>
        /// <param name="khuVucId"></param>
        /// <param name="doiTacid"></param>
        /// <param name="phongBanId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopKhieuNaiVNP_Solr(int doiTacId, int phongBanId, DateTime fromDate, DateTime toDate)
        {
            DataTable dtResult = new DataTable();

            int soLuongPhongBanMax = 1000;
            int DOITAC_VNP = 1;

            string whereClause = string.Empty;
            SolrQuery solrQuery = new SolrQuery(whereClause);
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = new SolrQueryResults<KhieuNai_ReportInfo>();
            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);
            int iFromDate = ConvertUtility.ToInt32(fromDate.ToString("yyyyMMdd"));
            int iToDate = ConvertUtility.ToInt32(toDate.ToString("yyyyMMdd"));
            DateTime fromDate_1 = fromDate.Subtract(new TimeSpan(1, 0, 0, 0));
            DateTime toDatePlus1 = toDate.AddDays(1);

            //dtResult = new PhongBanImpl().GetAllPhongBanOfAllDoiTacOfParentDoiTacId(doiTacId);
            dtResult = new PhongBanImpl().GetAllPhongBanOfAllDoiTacOfDonViTrucThuocChoBaoCao(doiTacId);
            if (dtResult != null && dtResult.Rows.Count > 0)
            {
                //dtResult.Columns.Add("Col1");
                //dtResult.Columns.Add("Col3");
                //dtResult.Columns.Add("Col4");
                //dtResult.Columns.Add("Col5");
                //dtResult.Columns.Add("Col7");
                //dtResult.Columns.Add("Col8");
                //dtResult.Columns.Add("Col9");
                //dtResult.Columns.Add("Col10");

                dtResult.Columns.Add("Col1_1");
                dtResult.Columns.Add("Col1_2");
                dtResult.Columns.Add("Col2_1");
                dtResult.Columns.Add("Col2_2");
                dtResult.Columns.Add("Col2_3");
                dtResult.Columns.Add("Col3_1");
                dtResult.Columns.Add("Col3_2");
                dtResult.Columns.Add("Col4_1");
                dtResult.Columns.Add("Col4_2");
                dtResult.Columns.Add("Col4_3");
                dtResult.Columns.Add("Col4_4");
                dtResult.Columns.Add("Col5");
                dtResult.Columns.Add("Col6");
                dtResult.Columns.Add("Col7"); // Số lượng khiếu nại được phản hồi về đơn vị sau khi đơn vị chuyển  xử lý
                dtResult.Columns.Add("IsAllowDongKN");

                List<PhongBan_PermissionInfo> listPhongBanPermission = new PhongBan_PermissionImpl().GetListByPermissionSchemeId(PERMISSIONSCHEMES_DONGKN);

                foreach (DataRow row in dtResult.Rows)
                {
                    for (int i = 0; i < listPhongBanPermission.Count; i++)
                    {
                        if (row["PhongBanId"].ToString() == listPhongBanPermission[i].PhongBanId.ToString())
                        {
                            row["IsAllowDongKN"] = listPhongBanPermission[i].IsAllow;
                            break;
                        }
                    }
                }
            }
            else
            {
                return null;
            }

            string sPhongBanId = string.Empty;
            List<string> listPhongBanId = new List<string>();
            foreach (DataRow row in dtResult.Rows)
            {
                if (!listPhongBanId.Contains(row["PhongBanId"].ToString()))
                {
                    listPhongBanId.Add(row["PhongBanId"].ToString());
                    sPhongBanId = string.Format("{0}{1} ", sPhongBanId, row["PhongBanId"].ToString());
                }
            }

            sPhongBanId = sPhongBanId.Trim();

            string whereClausePhongBanXuLyId = string.Empty;
            string whereClausePhongBanXuLyTruocId = string.Empty;
            if (doiTacId != DOITAC_VNP)
            {
                whereClausePhongBanXuLyId = string.Format(" AND PhongBanXuLyId : ({0})", sPhongBanId);
                whereClausePhongBanXuLyTruocId = string.Format(" AND PhongBanXuLyTruocId : ({0})", sPhongBanId);
            }

            SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            listSortOrder.Add(sortOrder);

            GroupingParameters gpTonDong = new GroupingParameters();
            List<string> listField = new List<string>();
            listField.Add("KhieuNaiId");
            gpTonDong.Fields = listField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrder;

            // (1):  Số liệu PAKN tồn tính đến thời điểm lấy báo cáo tại phòng ban (số liệu tồn quá hạn +số liệu tồn trong hạn)                        
            //whereClause = string.Format("NgayTiepNhan : [* TO {0}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *])", ConvertDateToSolr(fromDate_1.ToString("yyyMMdd"), false, true), fromDate.ToString("yyyMMdd"));
            //whereClause = string.Format("LDate : [* TO {0}]", ConvertDateToSolr(fromDate_1.ToString("yyyMMdd"), false, true));
            whereClause = string.Format("NgayTiepNhan : [* TO {0}]", ConvertDateToSolr(fromDate_1.ToString("yyyMMdd"), false, true));
            solrQuery = new SolrQuery(whereClause);
            // qoCol1 lấy ra tất cả các khiếu nại tồn đọng đến trước thời điểm lấy báo cáo
            QueryOptions qoCol1 = new QueryOptions();
            Dictionary<string, string> extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, HanhDong, LDate");
            qoCol1.ExtraParams = extraParamTiepNhan;
            qoCol1.Start = 0;
            qoCol1.Rows = int.MaxValue;
            qoCol1.Grouping = gpTonDong;
            qoCol1.OrderBy = listSortOrder;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol1);

            // listKhieuNaiPhongBanTonDong : Lưu các khiếu nại tồn đọng của các phòng ban để khi tính số lượng khiếu nại tiếp nhận mới của phòng ban đó
            // thì loại trừ các khiếu nại tồn đọng này (do khiếu nại có thể đã được phản hồi lại nhưng phòng ban được phản hồi chưa thoải mãn nên lại chuyển lại)
            List<string> listKhieuNaiPhongBanTonDong = new List<string>();
            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    List<KhieuNai_ReportInfo> listKhieuNaiOfPhongBan = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    {
                        //return obj.PhongBanXuLyId.ToString() == row["PhongBanId"].ToString() && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN;                                                                                       
                        return obj.PhongBanXuLyId.ToString() == row["PhongBanId"].ToString() && (obj.LDate >= fromDate || (obj.LDate < fromDate && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN));
                    });

                    row["Col1_1"] = listKhieuNaiOfPhongBan != null && listKhieuNaiOfPhongBan.Count > 0 ? listKhieuNaiOfPhongBan.Count : 0;

                    if (listKhieuNaiOfPhongBan != null && listKhieuNaiOfPhongBan.Count > 0)
                    {
                        for (int i = 0; i < listKhieuNaiOfPhongBan.Count; i++)
                        {
                            string sKhieuNaiPhongBan = string.Format("{0}_{1}", listKhieuNaiOfPhongBan[i].KhieuNaiId, listKhieuNaiOfPhongBan[i].PhongBanXuLyId);
                            listKhieuNaiPhongBanTonDong.Add(sKhieuNaiPhongBan);
                        }
                    }
                }
            } // end if(listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)                       

            //(2): Số liệu PAKN tạo mới trong khoảng thời gian lấy báo cáo tại phòng ban:
            //    (2.1): Số liệu PAKN đã xử lý xong (đã đóng)            
            whereClause = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND TrangThai:3", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            solrQuery = new SolrQuery(whereClause);
            // qoTonDong lấy ra tất cả các khiếu nại tồn đọng đến trước thời điểm lấy báo cáo
            QueryOptions qoCol21 = new QueryOptions();
            extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"*");
            qoCol21.ExtraParams = extraParamTiepNhan;
            qoCol21.Start = 0;
            qoCol21.Rows = 0;

            FacetParameters fpCol21 = new FacetParameters();
            SolrFacetFieldQuery sffqCol3 = new SolrFacetFieldQuery("PhongBanTiepNhanId");
            fpCol21.Queries.Add(sffqCol3);
            fpCol21.Limit = soLuongPhongBanMax;
            qoCol21.Facet = fpCol21;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoCol21);
            if (listKhieuNaiInfo != null)
            {
                GetCountOfFacet(dtResult, "PhongBanId", "Col2_1", listKhieuNaiInfo);
            } // end if(listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)            

            whereClause = string.Format("KhieuNai_NgayTiepNhanSort:[{0} TO {1}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *])", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            solrQuery = new SolrQuery(whereClause);
            // qoTonDong lấy ra tất cả các khiếu nại tồn đọng đến trước thời điểm lấy báo cáo
            QueryOptions qoCol22 = new QueryOptions();
            extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"KhieuNaiId, SoThueBao, NgayTiepNhan, NguoiXuLyTruoc, NguoiXuLy, PhongBanXuLyId, HanhDong, NgayQuaHan, LDate, KhieuNai_NgayTiepNhan, KhieuNai_NgayQuaHan, PhongBanTiepNhanId");
            qoCol22.ExtraParams = extraParamTiepNhan;
            qoCol22.Start = 0;
            qoCol22.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderCol22 = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderCol22 = new List<SolrNet.SortOrder>();
            listSortOrderCol22.Add(sortOrderCol22);
            GroupingParameters gpCol22 = new GroupingParameters();
            gpCol22.Fields = listField;
            gpCol22.Limit = 1;
            gpCol22.Main = true;
            gpCol22.OrderBy = listSortOrderCol22;

            qoCol22.Grouping = gpCol22;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol22);
            if (listKhieuNaiInfo != null)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    int curPhongBanId = ConvertUtility.ToInt32(row["PhongBanId"]);
                    row["Col2_2"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.PhongBanTiepNhanId == curPhongBanId && obj.PhongBanXuLyId != curPhongBanId; }).Count;
                    row["Col2_3"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.PhongBanTiepNhanId == curPhongBanId && obj.PhongBanXuLyId == curPhongBanId && (obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban); }).Count;
                }
            }

            whereClause = string.Format("LDate : [{0} TO {1}]", sFromDate, sToDate);
            solrQuery = new SolrQuery(whereClause);
            QueryOptions qoColAll = new QueryOptions();
            extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, NgayTiepNhan, NgayQuaHan, LDate");
            qoColAll.ExtraParams = extraParamTiepNhan;
            qoColAll.Start = 0;
            qoColAll.Rows = int.MaxValue;

            List<SolrNet.SortOrder> listSortOrderKhieuNaiIdASCActivityIdASC = new List<SolrNet.SortOrder>();
            SolrNet.SortOrder orderKhieuNaiId = new SolrNet.SortOrder("KhieuNaiId", Order.ASC);
            SolrNet.SortOrder orderActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderKhieuNaiId);
            listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderActivityId);
            qoColAll.OrderBy = listSortOrderKhieuNaiIdASCActivityIdASC;

            //List<KhieuNai_ReportInfo> listAllKhieuNaiActivity = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoColAll);

            //(3): Số liệu PAKN tiếp nhận trong khoảng thời gian lấy báo cáo tại phòng ban (số liệu này là do đơn vị khác chuyển đến )
            if (doiTacId != DOITAC_VNP)
            {
                whereClause = string.Format("NgayTiepNhan:[{0} TO {1}] AND HanhDong : (2 3) AND (PhongBanXuLyTruocId : ({2}) OR PhongBanXuLyId : ({2}))", sFromDate, sToDate, sPhongBanId);
            }
            else
            {
                whereClause = string.Format("NgayTiepNhan:[{0} TO {1}] AND HanhDong : (2 3)", sFromDate, sToDate);
            }

            solrQuery = new SolrQuery(whereClause);
            QueryOptions qoCol3 = new QueryOptions();
            extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, HanhDong, NgayTiepNhan, NgayQuaHan, KhieuNai_NgayDongKNSort");
            qoCol3.ExtraParams = extraParamTiepNhan;
            qoCol3.Start = 0;
            qoCol3.Rows = int.MaxValue;
            //qoCol3.OrderBy = listSortOrder;
            qoCol3.OrderBy = listSortOrderKhieuNaiIdASCActivityIdASC;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol3);
            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {
                //(3.1): Số liệu PAKN thực hiện xử lý tại phòng ban
                //(3.2): Số liệu PAKN thực hiện chuyển tiếp ngoài phòng ban
                foreach (DataRow row in dtResult.Rows)
                {
                    int curPhongBanId = ConvertUtility.ToInt32(row["PhongBanId"]);
                    int soLuongKhieuNaiTonDongVaDuocChuyenTiep = 0; // Số lượng khiếu nại tồn đọng sau đó được chuyển cho đơn vị khác xử lý trong khoảng thời gian lấy báo cáo                    
                    int soLuongXuLyTaiPhongBan = 0;   // Số lượng khiếu nại tiếp nhận do đơn vị khác chuyển xử lý đến                 
                    int soLuongChuyenTiepNgoaiPhongban = 0; // Số lượng khiếu nại đơn vị tiếp nhận (do đơn vị khác chuyển xử lý đến) sau đó chuyển cho đơn vị khác phối hợp xử lý                   
                    int soLuongChuyenPhanHoiDaDong = 0; // Số lượng khiếu nại đơn vị  phản hồi về đơn vị trước đã được đóng
                    int soLuongChuyenPhanHoiBiTraLai = 0; // Số lượng khiếu nại đơn vị phản hồi về đơn vị trước nhưng không được chấp nhận và bị trả lại
                    int soLuongChuyenPhanHoiChuaDuocXuLy = 0; // Số lượng khiếu nại đơn vị phản hồi về đơn vị trước nhưng chưa được xử lý


                    List<KhieuNai_ReportInfo> listKhieuNaiInfoOfPhongBan = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    {
                        return obj.PhongBanXuLyTruocId == curPhongBanId || obj.PhongBanXuLyId == curPhongBanId;
                    });

                    //if (curPhongBanId == 261)
                    //{

                    //}

                    List<string> listKhieuNaiIdTiepNhan = new List<string>();
                    List<string> listKhieuNaiIdPhanHoi = new List<string>();
                    List<string> listKhieuNaiIdTonDong = new List<string>();

                    for (int i = 0; i < listKhieuNaiInfoOfPhongBan.Count; i++)
                    {
                        // Tính số lượng xử lý của các khiếu nại tiếp nhận
                        if (listKhieuNaiInfoOfPhongBan[i].PhongBanXuLyId == curPhongBanId &&
                            listKhieuNaiInfoOfPhongBan[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban
                           )
                        //if (listKhieuNaiInfoOfPhongBan[i].PhongBanXuLyId == curPhongBanId && 
                        //    (listKhieuNaiInfoOfPhongBan[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban 
                        //    ||
                        //    listKhieuNaiInfoOfPhongBan[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi)
                        //    )
                        {
                            string sCheck = string.Format("{0}_{1}", listKhieuNaiInfoOfPhongBan[i].KhieuNaiId, listKhieuNaiInfoOfPhongBan[i].PhongBanXuLyId);
                            if (!listKhieuNaiIdTiepNhan.Contains(sCheck) && !listKhieuNaiPhongBanTonDong.Contains(sCheck))
                            {
                                listKhieuNaiIdTiepNhan.Add(sCheck);

                                if (i - 1 >= 0 && listKhieuNaiInfoOfPhongBan[i - 1].KhieuNaiId == listKhieuNaiInfoOfPhongBan[i].KhieuNaiId)
                                {
                                    if (listKhieuNaiInfoOfPhongBan[i - 1].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                                    {
                                        soLuongChuyenTiepNgoaiPhongban++;
                                    }
                                    else
                                    {
                                        soLuongXuLyTaiPhongBan++;
                                    }
                                }
                                else
                                {
                                    soLuongXuLyTaiPhongBan++;
                                }
                            }
                        }

                        // Tính số lượng khiếu nại tồn đọng bị chuyển cho các phòng ban khác xử lý
                        if (listKhieuNaiInfoOfPhongBan[i].PhongBanXuLyTruocId == curPhongBanId &&
                            listKhieuNaiInfoOfPhongBan[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                        {
                            int curKhieuNaiId = listKhieuNaiInfoOfPhongBan[i].KhieuNaiId;
                            bool isDaPhanHoi = false;
                            for (int j = i - 1; j >= 0; j--)
                            {
                                if (listKhieuNaiInfoOfPhongBan[j].KhieuNaiId != curKhieuNaiId)
                                {
                                    break;
                                }
                                else
                                {
                                    if (listKhieuNaiInfoOfPhongBan[j].PhongBanXuLyId == curPhongBanId
                                        && (listKhieuNaiInfoOfPhongBan[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi
                                            || listKhieuNaiInfoOfPhongBan[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                                        )
                                    {
                                        isDaPhanHoi = true;
                                        break;
                                    }
                                }
                            }

                            if (!isDaPhanHoi)
                            {
                                string sCheck = string.Format("{0}_{1}", listKhieuNaiInfoOfPhongBan[i].KhieuNaiId, listKhieuNaiInfoOfPhongBan[i].PhongBanXuLyTruocId);
                                if (!listKhieuNaiIdTonDong.Contains(sCheck) && listKhieuNaiPhongBanTonDong.Contains(sCheck))
                                {
                                    listKhieuNaiIdTonDong.Add(sCheck);
                                    soLuongKhieuNaiTonDongVaDuocChuyenTiep++;
                                }
                            }
                        }

                        // Tính số lượng khiếu nại phản hồi
                        if (listKhieuNaiInfoOfPhongBan[i].PhongBanXuLyTruocId == curPhongBanId && listKhieuNaiInfoOfPhongBan[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi)
                        {
                            string sCheck = string.Format("{0}_{1}", listKhieuNaiInfoOfPhongBan[i].KhieuNaiId, listKhieuNaiInfoOfPhongBan[i].PhongBanXuLyTruocId);
                            if (!listKhieuNaiIdPhanHoi.Contains(sCheck))
                            {
                                listKhieuNaiIdPhanHoi.Add(sCheck);
                                int curKhieuNaiId = listKhieuNaiInfoOfPhongBan[i].KhieuNaiId;

                                if (listKhieuNaiInfoOfPhongBan[i].KhieuNai_NgayDongKNSort >= iFromDate && listKhieuNaiInfoOfPhongBan[i].KhieuNai_NgayDongKNSort <= iToDate)
                                {
                                    bool isValid = true;

                                    for (int j = i; j >= 0; j--)
                                    {
                                        if (listKhieuNaiInfoOfPhongBan[j].KhieuNaiId == curKhieuNaiId)
                                        {
                                            if (listKhieuNaiInfoOfPhongBan[j].PhongBanXuLyTruocId == curPhongBanId
                                                && listKhieuNaiInfoOfPhongBan[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                                            {
                                                isValid = false;
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }

                                    if (isValid)
                                    {
                                        soLuongChuyenPhanHoiDaDong++;
                                    }

                                }
                                else
                                {
                                    bool isTraLai = false;
                                    for (int j = i; j >= 0; j--)
                                    {
                                        if (listKhieuNaiInfoOfPhongBan[j].KhieuNaiId == curKhieuNaiId)
                                        {
                                            if ((listKhieuNaiInfoOfPhongBan[j].PhongBanXuLyId == curPhongBanId
                                                && listKhieuNaiInfoOfPhongBan[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                                                || (
                                                    listKhieuNaiInfoOfPhongBan[j].PhongBanXuLyId == curPhongBanId
                                                    && listKhieuNaiInfoOfPhongBan[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi
                                                    )
                                                )
                                            {
                                                soLuongChuyenPhanHoiBiTraLai++;
                                                isTraLai = true;
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            break;
                                        }
                                    }

                                    if (!isTraLai)
                                    {
                                        soLuongChuyenPhanHoiChuaDuocXuLy++;
                                    }
                                }
                            }

                        }
                    }

                    row["Col1_2"] = soLuongKhieuNaiTonDongVaDuocChuyenTiep;
                    row["Col3_1"] = soLuongXuLyTaiPhongBan;
                    row["Col3_2"] = soLuongChuyenTiepNgoaiPhongban;

                    row["Col4_2"] = soLuongChuyenPhanHoiDaDong;
                    row["Col4_3"] = soLuongChuyenPhanHoiBiTraLai;
                    row["Col4_4"] = soLuongChuyenPhanHoiChuaDuocXuLy;
                } // end foreach (DataRow row in dtResult.Rows)                                
            }

            // (4): Số liệu PAKN đã được xử lý trong khoảng thời gian lấy báo cáo tại phòng ban:
            //  (4.1): Số liệu PAKN đã được đóng (là số lượng khiếu nại tồn được đóng + số khiếu nại do đơn vị khác chuyển đến và được đóng tại đơn vị)
            //whereClause = string.Format("NgayDongKNSort:[{0} TO {1}] AND TrangThai : 3 AND IsPhongBanXuLyLaPhongBanTiepNhan:false", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            whereClause = string.Format("(NgayTiepNhan : [* TO {0}] OR IsPhongBanXuLyLaPhongBanTiepNhan:false) AND NgayDongKNSort:[{1} TO {2}] AND TrangThai : 3", ConvertDateToSolr(fromDate_1.ToString("yyyMMdd"), false, true), fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            solrQuery = new SolrQuery(whereClause);
            QueryOptions qoCol41 = new QueryOptions();
            extraParamTiepNhan = new Dictionary<string, string>();
            //extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyId, HanhDong, NgayTiepNhan, NgayQuaHanPhongBan");
            extraParamTiepNhan.Add("fl", @"*");
            qoCol41.ExtraParams = extraParamTiepNhan;
            qoCol41.Start = 0;
            qoCol41.Rows = 0;

            FacetParameters fpCol41 = new FacetParameters();
            SolrFacetFieldQuery sffqCol41 = new SolrFacetFieldQuery("PhongBanXuLyId");
            fpCol41.Queries.Add(sffqCol41);
            fpCol41.Limit = soLuongPhongBanMax;
            qoCol41.Facet = fpCol41;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoCol41);
            if (listKhieuNaiInfo != null)
            {
                GetCountOfFacet(dtResult, "PhongBanId", "Col4_1", listKhieuNaiInfo);
            }

            //(5) Số liệu PAKN đang có tại thời điểm lấy báo cáo tại phòng ban (Tính số lượng KN tồn đọng tính đến thời điểm toDate)
            //whereClause = string.Format("LDate : [* TO {0}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true), toDatePlus1.ToString("yyyyMMdd"));            
            whereClause = string.Format("LDate:[{0} TO {1}]", sFromDate, sToDate);
            solrQuery = new SolrQuery(whereClause);
            QueryOptions qoCol7 = new QueryOptions();
            extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, HanhDong, NgayQuaHan, LDate, PhongBanTiepNhanId, KhieuNai_NgayDongKNSort");
            qoCol7.ExtraParams = extraParamTiepNhan;
            qoCol7.Start = 0;
            qoCol7.Rows = int.MaxValue;
            qoCol7.Grouping = gpTonDong;
            //qoCol9.OrderBy = listSortOrder;            

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol7);
            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    row["Col5"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    {
                        return obj.PhongBanXuLyId.ToString() == row["PhongBanId"].ToString() && obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi;
                    }).Count;
                }
            } // end if(listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)    

            //(5) Số liệu PAKN đang có tại thời điểm lấy báo cáo tại phòng ban (Tính số lượng KN tồn đọng tính đến thời điểm toDate)            
            //whereClause = string.Format("KhieuNai_NgayTiepNhan : [* TO {0}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true), toDatePlus1.ToString("yyyyMMdd"));
            //whereClause = string.Format("LDate : [* TO {0}]", ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true));
            whereClause = string.Format("NgayTiepNhan : [* TO {0}]", ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true));
            solrQuery = new SolrQuery(whereClause);
            QueryOptions qoCol9 = new QueryOptions();
            extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, HanhDong, NgayQuaHan, LDate, PhongBanTiepNhanId, KhieuNai_NgayDongKNSort");
            qoCol9.ExtraParams = extraParamTiepNhan;
            qoCol9.Start = 0;
            qoCol9.Rows = int.MaxValue;
            qoCol9.Grouping = gpTonDong;

            //qoCol9.OrderBy = listSortOrder;            

            SolrQueryResults<KhieuNai_ReportInfo> listTest = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol9);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol9);
            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    row["Col6"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    {
                        //return obj.PhongBanXuLyId.ToString() == row["PhongBanId"].ToString() && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN;
                        return obj.PhongBanXuLyId.ToString() == row["PhongBanId"].ToString() && (obj.LDate >= toDate || (obj.LDate < toDate && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN));

                    }).Count;
                    row["Col7"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    {
                        //return obj.PhongBanXuLyId.ToString() == row["PhongBanId"].ToString() && obj.LDate > obj.NgayQuaHan;
                        // Tính quá hạn phải tính theo ngày cuối lấy  báo cáo chứ không lấy theo LDate được bởi vì có đơn vị nhận xong không xử lý gì do đó LDate < NgayQuaHan
                        //return obj.PhongBanXuLyId.ToString() == row["PhongBanId"].ToString() && toDate >= obj.NgayQuaHan && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN;
                        return obj.PhongBanXuLyId.ToString() == row["PhongBanId"].ToString() && toDate >= obj.NgayQuaHan && (obj.LDate >= toDate || (obj.LDate < toDate && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN));
                    }).Count;
                }
            } // end if(listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)                           

            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Edited: DuongDv
        /// Created date : 08/12/2014
        /// Todo : Báo cáo tổng hợp PAKN của phòng CSKH
        /// </summary>
        public DataTable BaoCaoTongHopKhieuNaiVNP_V2_Solr(int doiTacId, DateTime fromDate, DateTime toDate)
        {
            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            List<DoiTacInfo> listDoiTacInfo = new DoiTacImpl().GetAllDoiTacOfDonViTrucThuocChoBaoCao(doiTacId);
            if (listDoiTacInfo == null || listDoiTacInfo.Count == 0)
                return null;

            List<int> listDoiTacId = null;
            if (doiTacId != DoiTacInfo.DoiTacIdValue.VNP)
            {
                listDoiTacId = new List<int>();
                for (int i = 0; i < listDoiTacInfo.Count; i++)
                {
                    listDoiTacId.Add(listDoiTacInfo[i].Id);
                }
            }

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            DataTable dtDoiTac = new DataTable();
            dtDoiTac.Columns.Add("DoiTacId");
            dtDoiTac.Columns.Add("TenDoiTac");
            dtDoiTac.Columns.Add("SLTonDongKyTruoc");
            dtDoiTac.Columns.Add("SLTiepNhan");
            dtDoiTac.Columns.Add("SLDaXuLy");
            dtDoiTac.Columns.Add("SLQuaHanDaXuLy");
            dtDoiTac.Columns.Add("SLTonDong");
            dtDoiTac.Columns.Add("SLQuaHanTonDong");
            dtDoiTac.Columns.Add("SLTaoMoi");
            dtDoiTac.Columns.Add("SLDaDong");
            dtDoiTac.Columns.Add("SLChuyenXuLy");
            dtDoiTac.Columns.Add("SLChuyenPhanHoi");
            dtDoiTac.Columns.Add("SLChuyenNgangHang");
            dtDoiTac.Columns.Add("DonViTrucThuocChoBaoCao");
            dtDoiTac.Columns.Add("Level");

            for (int i = 0; i < listDoiTacInfo.Count; i++)
            {
                DataRow row = dtDoiTac.NewRow();
                row["DoiTacId"] = listDoiTacInfo[i].Id;
                row["TenDoiTac"] = listDoiTacInfo[i].TenDoiTac;
                row["SLTonDongKyTruoc"] = 0;
                row["SLTiepNhan"] = 0;
                row["SLDaXuLy"] = 0;
                row["SLQuaHanDaXuLy"] = 0;
                row["SLTonDong"] = 0;
                row["SLQuaHanTonDong"] = 0;
                row["SLTaoMoi"] = 0;
                row["SLDaDong"] = 0;
                row["SLChuyenXuLy"] = 0;
                row["SLChuyenPhanHoi"] = 0;
                row["SLChuyenNgangHang"] = 0;
                row["DonViTrucThuocChoBaoCao"] = listDoiTacInfo[i].DonViTrucThuocChoBaoCao;
                row["Level"] = listDoiTacInfo[i].Level;
                dtDoiTac.Rows.Add(row);
            }

            // Số lượng tồn đọng kỳ trước
            QueryOptions queryOptionTonDongTruocKy = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDongTruocKy = new Dictionary<string, string>();
            extraParamTonDongTruocKy.Add("fl", @"KhieuNaiId, HanhDong, DoiTacXuLyId,PhongBanXuLyId");
            queryOptionTonDongTruocKy.ExtraParams = extraParamTonDongTruocKy;
            queryOptionTonDongTruocKy.Start = 0;
            queryOptionTonDongTruocKy.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            queryOptionTonDongTruocKy.Grouping = gpTonDongKyTruoc;

            DateTime previousFromDate = fromDate.AddDays(-1);
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND (KhieuNai_NgayDongKN : [{1} TO *])", ConvertUtility.ConvertDateTimeToSolr(previousFromDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(fromDate));
            solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDongTruocKy);

            Dictionary<int, int> listKhieuNaiIdTonDongKyTruoc = new Dictionary<int, int>();

            if (listKhieuNaiInfo != null)
            {
                if (listDoiTacId != null && listDoiTacId.Count > 0)
                {
                    listKhieuNaiInfo.RemoveAll(item => !listDoiTacId.Contains(item.DoiTacXuLyId));
                }

                foreach (DataRow rowDoiTac in dtDoiTac.Rows)
                {
                    int curDoiTacXuLyId = ConvertUtility.ToInt32(rowDoiTac["DoiTacId"]);
                    if (curDoiTacXuLyId == 10000)
                    {
                        var sl = listKhieuNaiInfo.Count(p => p.PhongBanXuLyId == 60);
                        rowDoiTac["SLTonDongKyTruoc"] = listKhieuNaiInfo.Count(p => p.PhongBanXuLyId == 60);
                    }
                    else
                    {
                        rowDoiTac["SLTonDongKyTruoc"] = listKhieuNaiInfo.Count(p => p.DoiTacXuLyId == curDoiTacXuLyId);
                    }
                }

                for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                {
                    listKhieuNaiIdTonDongKyTruoc.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].DoiTacXuLyId);
                }
            }

            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            Dictionary<int, int> listKhieuNaiIdTonDong = new Dictionary<int, int>();

            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTonDong = new Dictionary<string, string>();
            extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, DoiTacXuLyId,PhongBanXuLyId");
            queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN:[{1} TO *]", ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            solrQuery = new SolrQuery(whereClauseTonDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);

            if (listKhieuNaiInfo != null)
            {

                if (listDoiTacId != null && listDoiTacId.Count > 0)
                {
                    listKhieuNaiInfo.RemoveAll(item => !listDoiTacId.Contains(item.DoiTacXuLyId));
                }

                if (listKhieuNaiInfo != null)
                {
                    for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    {
                        listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId, listKhieuNaiInfo[i].DoiTacXuLyId);
                    }

                    foreach (DataRow rowDoiTac in dtDoiTac.Rows)
                    {
                        int curDoiTacXuLyId = ConvertUtility.ToInt32(rowDoiTac["DoiTacId"]);
                        if (curDoiTacXuLyId == 10000)
                        {
                            var tondong = listKhieuNaiInfo.Count(p => p.PhongBanXuLyId == 60);
                            rowDoiTac["SLTonDong"] = tondong;

                            var quahantondong = listKhieuNaiInfo.Count(p => p.PhongBanXuLyId == 60 && p.NgayQuaHan <= toDate);
                            rowDoiTac["SLQuaHanTonDong"] = quahantondong;
                        }
                        else
                        {
                            var tondong = listKhieuNaiInfo.Count(p => p.DoiTacXuLyId == curDoiTacXuLyId);
                            rowDoiTac["SLTonDong"] = tondong;

                            var quahantondong = listKhieuNaiInfo.Count(p => p.DoiTacXuLyId == curDoiTacXuLyId && p.NgayQuaHan <= toDate);
                            rowDoiTac["SLQuaHanTonDong"] = quahantondong;
                        }
                    }
                }
            }

            foreach (DataRow row in dtDoiTac.Rows)
            {
                int curDoiTacXuLyId = ConvertUtility.ToInt32(row["DoiTacId"]);

                // Số lượng tiếp nhận
                QueryOptions queryOptionTiepNhan = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId");
                queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
                queryOptionTiepNhan.Start = 0;
                queryOptionTiepNhan.Rows = int.MaxValue;


                SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
                List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
                listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

                GroupingParameters gpTiepNhan = new GroupingParameters();
                gpTiepNhan.Fields = listGroupField;
                gpTiepNhan.Limit = 1;
                gpTiepNhan.Main = true;
                gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
                queryOptionTiepNhan.Grouping = gpTiepNhan;
                string whereClauseTiepNhan = "";
                if (curDoiTacXuLyId == 10000)
                {
                    whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId: {2} AND HanhDong:(0 1 2 3)", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), 60);
                }
                else
                {
                    whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacXuLyId: {2} AND HanhDong:(0 1 2 3)", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), curDoiTacXuLyId);
                }
                solrQuery = new SolrQuery(whereClauseTiepNhan);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);

                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDongKyTruoc.Count > 0)
                    {
                        //listKhieuNaiInfo.RemoveAll(delegate(KhieuNai_ReportInfo obj) { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curDoiTacXuLyId)); });
                        listKhieuNaiInfo.RemoveAll(
                            item =>
                                listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, int>(item.KhieuNaiId,
                                    curDoiTacXuLyId)));
                    }

                    row["SLTiepNhan"] = listKhieuNaiInfo.Count;
                }

                // Số lượng đã xử lý
                // Số lượng quá hạn đã xử lý
                QueryOptions queryOptionXuLy = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamXuLy = new Dictionary<string, string>();
                extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, NgayQuaHan_PhongBanXuLyTruoc, LDate, HanhDong");
                queryOptionXuLy.ExtraParams = extraParamXuLy;
                queryOptionXuLy.Start = 0;
                queryOptionXuLy.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
                listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

                GroupingParameters gpXuLy = new GroupingParameters
                {
                    Fields = listGroupField,
                    Limit = 1,
                    Main = true,
                    OrderBy = listSortOrderNgayXuLy
                };
                queryOptionXuLy.Grouping = gpXuLy;
                string whereClauseXuLy = "";
                //string whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND ((DoiTacXuLyTruocId: {2} AND -DoiTacXuLyId : {2}) OR (DoiTacXuLyId:{2} AND HanhDong:4))", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId);
                if (curDoiTacXuLyId == 10000)
                {
                    whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND  PhongBanXuLyTruocId: {2} AND -PhongBanXuLyId : {2} AND -HanhDong:4) OR (LDate:[{0} TO {1}] AND  DoiTacXuLyId:{2} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), 60);
                }
                else
                {
                    whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND  DoiTacXuLyTruocId: {2} AND -DoiTacXuLyId : {2} AND -HanhDong:4) OR (LDate:[{0} TO {1}] AND  DoiTacXuLyId:{2} AND HanhDong:4)", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), curDoiTacXuLyId);
                }

                solrQuery = new SolrQuery(whereClauseXuLy);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);

                if (listKhieuNaiInfo != null)
                {
                    if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                    {
                        listKhieuNaiInfo.RemoveAll(item => listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, int>(item.KhieuNaiId, curDoiTacXuLyId)));
                    }
                    row["SLDaXuLy"] = listKhieuNaiInfo.Count;

                    row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.Count(p => p.NgayTiepNhan > p.NgayQuaHan_PhongBanXuLyTruoc);

                    row["SLChuyenXuLy"] = listKhieuNaiInfo.Count(p => p.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban);

                    row["SLChuyenPhanHoi"] = listKhieuNaiInfo.Count(p => p.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi);

                    row["SLChuyenNgangHang"] = listKhieuNaiInfo.Count(p => p.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng);

                }
                // Số lượng tạo mới                    
                QueryOptions queryOptionTaoMoi = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamTaoMoi = new Dictionary<string, string>();

                // Điểu khiện
                string whereClauseTaoMoi = string.Empty;

                extraParamTaoMoi.Add("fl", @"Id");
                queryOptionTaoMoi.ExtraParams = extraParamTaoMoi;
                queryOptionTaoMoi.Start = 0;
                queryOptionTaoMoi.Rows = int.MaxValue;


                if (curDoiTacXuLyId == 10000)
                {
                    whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), 60);
                }
                else
                {
                    whereClauseTaoMoi = string.Format("NgayTiepNhan:[{0} TO {1}] AND DoiTacId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), curDoiTacXuLyId);
                }

                solrQuery = new SolrQuery(whereClauseTaoMoi);

                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTaoMoi);

                row["SLTaoMoi"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;

                // Số lượng tạo đã đóng                   
                QueryOptions queryOptionDaDong = new QueryOptions();
                //Lấy ra những trường nào
                var extraParamDaDong = new Dictionary<string, string>();
                extraParamDaDong.Add("fl", @"Id");
                queryOptionDaDong.ExtraParams = extraParamDaDong;
                queryOptionDaDong.Start = 0;
                queryOptionDaDong.Rows = int.MaxValue;
                string whereClauseDaDong = "";
                if (curDoiTacXuLyId == 10000)
                {
                    whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND PhongBanXuLyId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), 60);
                }
                else
                {
                    whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND DoiTacXuLyId : {2}", ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999), curDoiTacXuLyId);
                }
                solrQuery = new SolrQuery(whereClauseDaDong);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionDaDong);

                row["SLDaDong"] = listKhieuNaiInfo != null ? listKhieuNaiInfo.Count : 0;
            }
            // end  foreach(DataRow row in dtDoiTac.Rows)
            return dtDoiTac;
        }
        /// <summary>
        /// Author : Phi Hoang Hai
        /// Edit date :  29/05/2014
        /// Todo : Lấy dữ liệu báo cáo giảm trừ cước dịch vụ CP
        /// </summary>
        /// <param name="doiTacXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoTongHopGiamTruCuocDV_Solr(int doiTacXuLyId, DateTime fromDate, DateTime toDate)
        {
            List<KhieuNai_ReportInfo> listDauSo = new List<KhieuNai_ReportInfo>();
            int DOITAC_VNP = 1;

            // Danh sách nội dung công việc
            //Where điều kiện
            string whereClause = string.Empty;

            if (doiTacXuLyId != DOITAC_VNP)
            {
                List<DoiTacInfo> listDoiTac = new DoiTacImpl().GetAllDoiTacOfDonViTrucThuocChoBaoCao(doiTacXuLyId);
                string sListDoiTacId = string.Empty;
                if (listDoiTac != null && listDoiTac.Count > 0)
                {
                    for (int i = 0; i < listDoiTac.Count; i++)
                    {
                        sListDoiTacId = string.Format("{0}{1} ", sListDoiTacId, listDoiTac[i].Id);
                    }

                    sListDoiTacId = sListDoiTacId.Trim();

                    whereClause = string.Format("{0} AND DoiTacXuLyId : ({1})", whereClause, sListDoiTacId);
                }
            }

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] ", whereClause, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));

            #region Dau So

            string whereClauseSoTien = string.Format("SoTien_Edit:0 {0} AND IsDaBuTien:true AND IsDauSo:true AND -LoaiTien:5", whereClause);
            var solrQuery = new SolrQuery(whereClauseSoTien);

            var qoSoTienDauSo = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "DichVuCPId, MaDichVu, DauSo, SoTien, SoTien_Edit");
            qoSoTienDauSo.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienDauSo.Start = 0;
            qoSoTienDauSo.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienDauSo = new StatsParameters();
            spSoTienDauSo.AddField("SoTien");
            spSoTienDauSo.AddFacet("DauSo");

            qoSoTienDauSo.Stats = spSoTienDauSo;

            var listQueryResult = QuerySolrBase<object>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTienDauSo);

            List<string> listDauSoId = new List<string>();
            foreach (var kv in listQueryResult.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listDauSoId.Contains(fv.Key))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.DauSo = fv.Key;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listDauSoId.Add(fv.Key);
                            listDauSo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))                          
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)  

            var qoSoTienEditDauSo = new QueryOptions();
            //Lấy ra những trường nào
            extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "DichVuCPId, MaDichVu, DauSo, SoTien, SoTien_Edit");
            qoSoTienEditDauSo.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienEditDauSo.Start = 0;
            qoSoTienEditDauSo.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienEditDauSo = new StatsParameters();
            spSoTienEditDauSo.AddField("SoTien_Edit");
            spSoTienEditDauSo.AddFacet("DauSo");

            qoSoTienEditDauSo.Stats = spSoTienEditDauSo;

            string whereClauseSoTienEdit = string.Format("-SoTien_Edit:0 {0} AND IsDaBuTien:true AND IsDauSo:true AND -LoaiTien:5", whereClause);
            solrQuery = new SolrQuery(whereClauseSoTienEdit);
            listQueryResult = QuerySolrBase<object>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTienEditDauSo);

            foreach (var kv in listQueryResult.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listDauSoId.Contains(fv.Key))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.DauSo = fv.Key;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listDauSoId.Add(fv.Key);
                            listDauSo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))  
                        else
                        {
                            for (int i = 0; i < listDauSo.Count; i++)
                            {
                                if (listDauSo[i].DauSoId.ToString() == fv.Key)
                                {
                                    listDauSo[i].SoLuongGiamTru += ConvertUtility.ToInt32(fv.Value.Count);
                                    listDauSo[i].SoTien += (decimal)fv.Value.Sum;
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)      

            #endregion

            #region Dich vu

            QueryOptions qoSoTienDichVu = new QueryOptions();
            //Lấy ra những trường nào
            extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "DichVuCPId, MaDichVu, DauSo, SoTien, SoTien_Edit");
            qoSoTienDichVu.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienDichVu.Start = 0;
            qoSoTienDichVu.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienDichVu = new StatsParameters();
            spSoTienDichVu.AddField("SoTien");
            spSoTienDichVu.AddFacet("MaDichVu");

            qoSoTienDichVu.Stats = spSoTienDichVu;

            string whereClauseSoTienDichVu = string.Format("SoTien_Edit:0 {0} AND IsDaBuTien:true AND IsDauSo:false AND -DichVuCPId:0 AND -LoaiTien:5", whereClause);
            var solrQuery1 = new SolrQuery(whereClauseSoTienDichVu);

            var listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery1, qoSoTienDichVu);

            listDauSoId = new List<string>();
            foreach (var kv in listKhieuNaiInfo.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listDauSoId.Contains(fv.Key))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.DauSo = fv.Key;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listDauSoId.Add(fv.Key);
                            listDauSo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))                          
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)  

            var qoSoTienEditDichVu = new QueryOptions();
            //Lấy ra những trường nào
            extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "DichVuCPId, MaDichVu, DauSo, SoTien, SoTien_Edit");
            qoSoTienEditDichVu.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienEditDichVu.Start = 0;
            qoSoTienEditDichVu.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienEditDichVu = new StatsParameters();
            spSoTienEditDichVu.AddField("SoTien_Edit");
            spSoTienEditDichVu.AddFacet("MaDichVu");

            qoSoTienEditDichVu.Stats = spSoTienEditDichVu;

            whereClauseSoTienEdit = string.Format("-SoTien_Edit:0 {0} AND IsDaBuTien:true AND IsDauSo:false AND -DichVuCPId:0 AND -LoaiTien:5", whereClause);
            solrQuery = new SolrQuery(whereClauseSoTienEdit);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTienEditDichVu);

            foreach (var kv in listKhieuNaiInfo.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);

                        if (!listDauSoId.Contains(fv.Key))
                        {
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();
                            reportInfo.DauSo = fv.Key;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTien = (decimal)fv.Value.Sum;

                            listDauSoId.Add(fv.Key);
                            listDauSo.Add(reportInfo);
                        } // end if (!listDauSoId.Contains(fv.Key))  
                        else
                        {
                            for (int i = 0; i < listDauSo.Count; i++)
                            {
                                if (listDauSo[i].DauSoId.ToString() == fv.Key)
                                {
                                    listDauSo[i].SoLuongGiamTru += ConvertUtility.ToInt32(fv.Value.Count);
                                    listDauSo[i].SoTien += (decimal)fv.Value.Sum;
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)             

            #endregion

            return listDauSo;

        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 17/06/2014
        /// </summary>
        /// <param name="khuVucId"></param>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="listLoaiKhieuNaiId"></param>
        /// <param name="listLinhVucChungId"></param>
        /// <param name="listLinhVucConId"></param>
        /// <returns></returns>
        /// 
        public DataSet BaoCaoTongHopKhieuNaiTheoToGQKNCuaPhongCSKH_Solr(int phongBanXuLyId, DateTime fromDate, DateTime toDate, List<string> listLoaiKhieuNaiId, List<string> listLinhVucChungId, List<string> listLinhVucConId)
        {
            DataSet dsResult = new DataSet();

            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);
            string iFromDate = fromDate.ToString("yyyyMMdd");
            string iToDate = toDate.ToString("yyyyMMdd");
            string iStartYear = string.Format("{0}0101", fromDate.Year);
            string iFromDateMinus1 = fromDate.Subtract(new TimeSpan(1, 0, 0, 0)).ToString("yyyyMMdd");

            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            string colNameLoaiKhieuNaiId = "LoaiKhieuNaiId";
            string colNameLinhVucChungId = "LinhVucChungId";
            string colNameLinhVucConId = "LinhVucConId";

            string loaiKhieuNaiId = string.Empty;
            string linhVucChungId = string.Empty;
            string linhVucConId = string.Empty;

            string sqlLoaiKhieuNai = string.Empty;
            string sqlLinhVucChung = string.Empty;
            string sqlLinhVucCon = string.Empty;

            QueryOptions queryOptionLoaiKhieuNai = new QueryOptions();
            QueryOptions queryOptionLinhVucChung = new QueryOptions();
            QueryOptions queryOptionLinhVucCon = new QueryOptions();
            QueryOptions queryOptionLyDoGiamTru = new QueryOptions();

            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"LoaiKhieuNaiId,LoaiKhieuNai");

            queryOptionLoaiKhieuNai.ExtraParams = extraParamLoaiKhieuNai;

            queryOptionLoaiKhieuNai.Start = 0;
            queryOptionLoaiKhieuNai.Rows = listLoaiKhieuNaiId.Count;

            //Lấy ra những trường nào
            var extraParamLinhVucChung = new Dictionary<string, string>();
            extraParamLinhVucChung.Add("fl", @"LinhVucChungId, LinhVucChung");

            queryOptionLinhVucChung.ExtraParams = extraParamLinhVucChung;

            queryOptionLinhVucChung.Start = 0;
            queryOptionLinhVucChung.Rows = listLinhVucChungId.Count;

            //Lấy ra những trường nào
            var extraParamLinhVucCon = new Dictionary<string, string>();
            extraParamLinhVucCon.Add("fl", @"LinhVucConId, LinhVucCon");

            queryOptionLinhVucCon.ExtraParams = extraParamLinhVucCon;

            queryOptionLinhVucCon.Start = 0;
            queryOptionLinhVucCon.Rows = listLinhVucConId.Count;

            FacetParameters fpLoaiKhieuNai = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("LoaiKhieuNaiId");
            fpLoaiKhieuNai.Queries.Add(facetField);
            queryOptionLoaiKhieuNai.Facet = fpLoaiKhieuNai;

            FacetParameters fpLinhVucChung = new FacetParameters();
            facetField = new SolrFacetFieldQuery("LinhVucChungId");
            fpLinhVucChung.Queries.Add(facetField);
            queryOptionLinhVucChung.Facet = fpLinhVucChung;

            FacetParameters fpLinhVucCon = new FacetParameters();
            facetField = new SolrFacetFieldQuery("LinhVucConId");
            fpLinhVucCon.Queries.Add(facetField);
            queryOptionLinhVucCon.Facet = fpLinhVucCon;

            FacetParameters fpLyDoGiamTru = new FacetParameters();
            facetField = new SolrFacetFieldQuery("LyDoGiamTru");
            fpLyDoGiamTru.Queries.Add(facetField);
            queryOptionLyDoGiamTru.Facet = fpLyDoGiamTru;

            //Where điều kiện
            string whereClauseLoaiKhieuNai = "*:* ";
            string whereClauseLinhVucChung = "*:* ";
            string whereClauseLinhVucCon = "*:* ";
            string whereClausePhongBanXuLy = string.Empty;

            if (phongBanXuLyId != -1)
            {
                whereClausePhongBanXuLy = string.Format(" AND PhongBanXuLyId : {0}", phongBanXuLyId);
            }

            string whereClause = string.Empty;
            SolrQuery solrQuery = null;

            DataTable dtLoaiKhieuNai = new DataTable();
            DataTable dtLinhVucChung = new DataTable();
            DataTable dtLinhVucCon = new DataTable();

            dtLoaiKhieuNai.Columns.Add("LoaiKhieuNaiId");
            dtLoaiKhieuNai.Columns.Add("LoaiKhieuNai");
            dtLoaiKhieuNai.Columns.Add("ParentId");

            for (int i = 0; i < listLoaiKhieuNaiId.Count; i++)
            {
                DataRow row = dtLoaiKhieuNai.NewRow();
                row["LoaiKhieuNaiId"] = listLoaiKhieuNaiId[i];
                row["ParentId"] = "0";

                for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                {
                    if (row["LoaiKhieuNaiId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                    {
                        row["LoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                        break;
                    }
                }

                dtLoaiKhieuNai.Rows.Add(row);
            }

            dtLinhVucChung.Columns.Add("LinhVucChungId");
            dtLinhVucChung.Columns.Add("LinhVucChung");
            dtLinhVucChung.Columns.Add("ParentId");

            for (int i = 0; i < listLinhVucChungId.Count; i++)
            {
                DataRow row = dtLinhVucChung.NewRow();
                row["LinhVucChungId"] = listLinhVucChungId[i];

                for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                {
                    if (row["LinhVucChungId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                    {
                        row["LinhVucChung"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                        row["ParentId"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].ParentId;
                        break;
                    }
                }

                dtLinhVucChung.Rows.Add(row);
            }

            dtLinhVucCon.Columns.Add("LinhVucConId");
            dtLinhVucCon.Columns.Add("LinhVucCon");
            dtLinhVucCon.Columns.Add("ParentId");

            for (int i = 0; i < listLinhVucConId.Count; i++)
            {
                DataRow row = dtLinhVucCon.NewRow();
                row["LinhVucConId"] = listLinhVucConId[i];

                for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                {
                    if (row["LinhVucConId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                    {
                        row["LinhVucCon"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                        row["ParentId"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].ParentId;
                        break;
                    }
                }

                dtLinhVucCon.Rows.Add(row);
            }

            dtLoaiKhieuNai.Columns.Add("LuyKeKNDaGiaiQuyetDenDauTuanX");
            dtLoaiKhieuNai.Columns.Add("LuyKeKNTonDongDenDauTuanX");
            dtLoaiKhieuNai.Columns.Add("SoLuongTiepNhanTrongTuan");
            dtLoaiKhieuNai.Columns.Add("TongSoPAKNGiaiQuyetDuoc");

            dtLinhVucChung.Columns.Add("LuyKeKNDaGiaiQuyetDenDauTuanX");
            dtLinhVucChung.Columns.Add("LuyKeKNTonDongDenDauTuanX");
            dtLinhVucChung.Columns.Add("SoLuongTiepNhanTrongTuan");
            dtLinhVucChung.Columns.Add("TongSoPAKNGiaiQuyetDuoc");

            dtLinhVucCon.Columns.Add("LuyKeKNDaGiaiQuyetDenDauTuanX");
            dtLinhVucCon.Columns.Add("LuyKeKNTonDongDenDauTuanX");
            dtLinhVucCon.Columns.Add("SoLuongTiepNhanTrongTuan");
            dtLinhVucCon.Columns.Add("TongSoPAKNGiaiQuyetDuoc");


            #region Lũy kế KN đã GQ đến đầu tuần 30/2013

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLoaiKhieuNai, iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "LuyKeKNDaGiaiQuyetDenDauTuanX", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucChung, iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "LuyKeKNDaGiaiQuyetDenDauTuanX", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucCon, iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "LuyKeKNDaGiaiQuyetDenDauTuanX", listKhieuNaiInfo);

            #endregion

            #region Lũy kế KN tồn đọng đầu tuần 30/2013

            whereClause = string.Format("{0} AND NgayTiepNhanSort : [* TO {1}] AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClauseLoaiKhieuNai, iFromDateMinus1, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "LuyKeKNTonDongDenDauTuanX", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayTiepNhanSort : [* TO {1}] AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClauseLinhVucChung, iFromDateMinus1, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "LuyKeKNTonDongDenDauTuanX", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayTiepNhanSort : [* TO {1}] AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClauseLinhVucCon, iFromDateMinus1, phongBanXuLyId);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "LuyKeKNTonDongDenDauTuanX", listKhieuNaiInfo);

            #endregion

            #region Số lượng tiếp nhận trong tuần

            whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3}", whereClauseLoaiKhieuNai, sFromDate, sToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3}", whereClauseLinhVucChung, sFromDate, sToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3}", whereClauseLinhVucCon, sFromDate, sToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] {3}", whereClauseLoaiKhieuNai, iFromDate, iToDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] {3}", whereClauseLinhVucChung, iFromDate, iToDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            //whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] {3}", whereClauseLinhVucCon, iFromDate, iToDate, whereClausePhongBanXuLy);
            //solrQuery = new SolrQuery(whereClause);
            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

            #endregion

            #region Số lượng đã giải quyết trong tuần

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLoaiKhieuNai, iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucChung, iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

            whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucCon, iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

            #endregion

            dsResult.Tables.Add(dtLoaiKhieuNai);
            dsResult.Tables.Add(dtLinhVucChung);
            dsResult.Tables.Add(dtLinhVucCon);

            #region Báo cáo PPS

            // Lấy dữ liệu báo cáo PPS            
            DataTable dtPPS = new DataTable();
            dtPPS.Columns.Add("LoaiKhieuNaiId");
            dtPPS.Columns.Add("TenLoaiKhieuNai");
            dtPPS.Columns.Add("MaDichVu");
            dtPPS.Columns.Add("CapChiTiet_1");
            dtPPS.Columns.Add("BuCuoc_1");
            dtPPS.Columns.Add("SoTien_1");
            dtPPS.Columns.Add("LoiHeThong_11");
            dtPPS.Columns.Add("LoiHeThong_12");
            dtPPS.Columns.Add("GiaoDichVien_11");
            dtPPS.Columns.Add("GiaoDichVien_12");
            dtPPS.Columns.Add("CSKH_11");
            dtPPS.Columns.Add("CSKH_12");
            dtPPS.Columns.Add("Khac_11");
            dtPPS.Columns.Add("Khac_12");

            dtPPS.Columns.Add("CapChiTiet_2");
            dtPPS.Columns.Add("BuCuoc_2");
            dtPPS.Columns.Add("SoTien_2");
            dtPPS.Columns.Add("LoiHeThong_21");
            dtPPS.Columns.Add("LoiHeThong_22");
            dtPPS.Columns.Add("GiaoDichVien_21");
            dtPPS.Columns.Add("GiaoDichVien_22");
            dtPPS.Columns.Add("CSKH_21");
            dtPPS.Columns.Add("CSKH_22");
            dtPPS.Columns.Add("Khac_21");
            dtPPS.Columns.Add("Khac_22");

            dtPPS.Columns.Add("CapChiTiet_3");
            dtPPS.Columns.Add("BuCuoc_3");
            dtPPS.Columns.Add("SoTien_3");
            dtPPS.Columns.Add("LoiHeThong_31");
            dtPPS.Columns.Add("LoiHeThong_32");
            dtPPS.Columns.Add("GiaoDichVien_31");
            dtPPS.Columns.Add("GiaoDichVien_32");
            dtPPS.Columns.Add("CSKH_31");
            dtPPS.Columns.Add("CSKH_32");
            dtPPS.Columns.Add("Khac_31");
            dtPPS.Columns.Add("Khac_32");

            for (int i = 0; i < listLoaiKhieuNaiId.Count; i++)
            {
                for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                {
                    if (listLoaiKhieuNaiId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                    {
                        DataRow row = dtPPS.NewRow();
                        row["LoaiKhieuNaiId"] = listLoaiKhieuNaiId[i];
                        row["TenLoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                        row["MaDichVu"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].MaDichVu;
                        dtPPS.Rows.Add(row);
                        break;
                    }
                }
            }

            for (int i = 0; i < listLinhVucChungId.Count; i++)
            {
                for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                {
                    if (listLinhVucChungId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                    {
                        DataRow row = dtPPS.NewRow();
                        row["LoaiKhieuNaiId"] = listLinhVucChungId[i];
                        row["TenLoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                        row["MaDichVu"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].MaDichVu;
                        dtPPS.Rows.Add(row);
                        break;
                    }
                }
            }

            for (int i = 0; i < listLinhVucConId.Count; i++)
            {
                for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                {
                    if (listLinhVucConId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                    {
                        DataRow row = dtPPS.NewRow();
                        row["LoaiKhieuNaiId"] = listLinhVucConId[i];
                        row["TenLoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                        row["MaDichVu"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].MaDichVu;
                        dtPPS.Rows.Add(row);
                        break;
                    }
                }
            }

            // Lũy kế từ đầu năm đến trước thời điểm lấy báo cáo
            // Tính số lượng  cấp chi tiết
            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:0", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_1", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:0", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_1", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:0", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_1", listKhieuNaiInfo);

            // Tính số lượng bù cước
            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND -LyDoGiamTru:0", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_1", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND -LyDoGiamTru:0", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_1", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND -LyDoGiamTru:0", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_1", listKhieuNaiInfo);

            // Tổng số tiền
            DataTable dtTongSoTienBuCuoc = null;
            DataTable dtSoTienBuCuocTheoLyDoGiamTru = null;

            if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
            {
                dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LoaiKhieuNaiId", listLoaiKhieuNaiId, iStartYear, iFromDateMinus1, phongBanXuLyId);
                if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
                {
                    for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["SoTien_1"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
                                break;
                            }
                        }
                    }
                }

                dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LoaiKhieuNaiId", listLoaiKhieuNaiId, iStartYear, iFromDateMinus1, phongBanXuLyId);
                if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
                {
                    for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["LoiHeThong_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
                                dtPPS.Rows[j]["GiaoDichVien_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
                                dtPPS.Rows[j]["CSKH_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
                                dtPPS.Rows[j]["Khac_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
                                break;
                            }
                        }
                    }
                }
            } // end if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)

            if (listLinhVucChungId != null && listLinhVucChungId.Count > 0)
            {
                dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LinhVucChungId", listLinhVucChungId, iStartYear, iFromDateMinus1, phongBanXuLyId);
                if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
                {
                    for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["SoTien_1"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
                                break;
                            }
                        }
                    }
                }

                dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LinhVucChungId", listLinhVucChungId, iStartYear, iFromDateMinus1, phongBanXuLyId);
                if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
                {
                    for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["LoiHeThong_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
                                dtPPS.Rows[j]["GiaoDichVien_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
                                dtPPS.Rows[j]["CSKH_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
                                dtPPS.Rows[j]["Khac_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
                                break;
                            }
                        }
                    }
                }
            } // end if(listLinhVucChungId != null && listLinhVucChungId.Count > 0)            

            if (listLinhVucConId != null && listLinhVucConId.Count > 0)
            {
                dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LinhVucConId", listLinhVucConId, iStartYear, iFromDateMinus1, phongBanXuLyId);
                if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
                {
                    for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["SoTien_1"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
                                break;
                            }
                        }
                    }
                }

                dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LinhVucConId", listLinhVucConId, iStartYear, iFromDateMinus1, phongBanXuLyId);
                if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
                {
                    for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["LoiHeThong_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
                                dtPPS.Rows[j]["GiaoDichVien_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
                                dtPPS.Rows[j]["CSKH_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
                                dtPPS.Rows[j]["Khac_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
                                break;
                            }
                        }
                    }
                }
            } // end if(listLinhVucConId != null && listLinhVucConId.Count > 0)

            // Số lượng và số tiền giảm trừ của từng nguyên nhân           
            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_11", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_11", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_11", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_11", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_11", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_11", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_11", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_11", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_11", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_11", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_11", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_11", listKhieuNaiInfo);

            if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
            {
                dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LoaiKhieuNaiId", listLoaiKhieuNaiId, iFromDate, iToDate, phongBanXuLyId);
                if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
                {
                    for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["SoTien_2"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
                                break;
                            }
                        }
                    }
                }
            } // end if(listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)

            // Số lượng cấp chi tiết tại thời điểm lấy báo cáo
            // Số lượng cấp chi tiết
            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:0", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_2", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:0", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_2", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:0", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_2", listKhieuNaiInfo);

            // Tính số lượng bù cước
            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND -LyDoGiamTru:0", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_2", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND -LyDoGiamTru:0", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_2", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND -LyDoGiamTru:0", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_2", listKhieuNaiInfo);

            // Tổng số tiền 
            if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
            {
                dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LoaiKhieuNaiId", listLoaiKhieuNaiId, iFromDate, iToDate, phongBanXuLyId);
                if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
                {
                    for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["SoTien_2"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
                                break;
                            }
                        }
                    }
                }

                dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LoaiKhieuNaiId", listLoaiKhieuNaiId, iFromDate, iToDate, phongBanXuLyId);
                if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
                {
                    for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["LoiHeThong_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
                                dtPPS.Rows[j]["GiaoDichVien_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
                                dtPPS.Rows[j]["CSKH_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
                                dtPPS.Rows[j]["Khac_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
                                break;
                            }
                        }
                    }
                }
            } // end if(listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)

            if (listLinhVucChungId != null && listLinhVucChungId.Count > 0)
            {
                dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LinhVucChungId", listLinhVucChungId, iFromDate, iToDate, phongBanXuLyId);
                if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
                {
                    for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["SoTien_2"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
                                break;
                            }
                        }
                    }
                }

                dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LinhVucChungId", listLinhVucChungId, iFromDate, iToDate, phongBanXuLyId);
                if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
                {
                    for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["LoiHeThong_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
                                dtPPS.Rows[j]["GiaoDichVien_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
                                dtPPS.Rows[j]["CSKH_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
                                dtPPS.Rows[j]["Khac_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
                                break;
                            }
                        }
                    }
                }
            } // end if(listLinhVucChungId != null && listLinhVucChungId.Count > 0 )            

            if (listLinhVucConId != null && listLinhVucConId.Count > 0)
            {
                dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LinhVucConId", listLinhVucConId, iFromDate, iToDate, phongBanXuLyId);
                if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
                {
                    for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["SoTien_2"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
                                break;
                            }
                        }
                    }
                }

                dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LinhVucConId", listLinhVucConId, iFromDate, iToDate, phongBanXuLyId);
                if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
                {
                    for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["LoiHeThong_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
                                dtPPS.Rows[j]["GiaoDichVien_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
                                dtPPS.Rows[j]["CSKH_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
                                dtPPS.Rows[j]["Khac_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
                                break;
                            }
                        }
                    }
                }
            } // end if(listLinhVucConId != null && listLinhVucConId.Count > 0)

            // Tính số lượng và số tiền giảm trừ của từng nguyên nhân
            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_21", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_21", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_21", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_21", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_21", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_21", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_21", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_21", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_21", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_21", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_21", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4", iFromDate, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_21", listKhieuNaiInfo);


            // Lũy kế từ đầu năm đến cuối thời điểm lấy báo cáo
            // Số lượng cấp chi tiết
            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3} AND LyDoGiamTru:0", iStartYear, iToDate, whereClausePhongBanXuLy, whereClauseLoaiKhieuNai);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_3", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3} AND LyDoGiamTru:0", iStartYear, iToDate, whereClausePhongBanXuLy, whereClauseLinhVucChung);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_3", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3} AND LyDoGiamTru:0", iStartYear, iToDate, whereClausePhongBanXuLy, whereClauseLinhVucCon);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_3", listKhieuNaiInfo);

            // Tính số lượng bù cước
            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3} AND -LyDoGiamTru:0", iStartYear, iToDate, whereClausePhongBanXuLy, whereClauseLoaiKhieuNai);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_3", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3} AND -LyDoGiamTru:0", iStartYear, iToDate, whereClausePhongBanXuLy, whereClauseLinhVucChung);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_3", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3} AND -LyDoGiamTru:0", iStartYear, iToDate, whereClausePhongBanXuLy, whereClauseLinhVucCon);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_3", listKhieuNaiInfo);

            // Tổng số tiền  
            if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
            {
                dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LoaiKhieuNaiId", listLoaiKhieuNaiId, iStartYear, iToDate, phongBanXuLyId);
                if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
                {
                    for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["SoTien_3"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
                                break;
                            }
                        }
                    }
                }

                dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LoaiKhieuNaiId", listLoaiKhieuNaiId, iStartYear, iToDate, phongBanXuLyId);
                if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
                {
                    for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["LoiHeThong_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
                                dtPPS.Rows[j]["GiaoDichVien_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
                                dtPPS.Rows[j]["CSKH_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
                                dtPPS.Rows[j]["Khac_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
                                break;
                            }
                        }
                    }
                }
            } // end if(listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)

            if (listLinhVucChungId != null && listLinhVucChungId.Count > 0)
            {
                dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LinhVucChungId", listLinhVucChungId, iStartYear, iToDate, phongBanXuLyId);
                if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
                {
                    for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["SoTien_3"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
                                break;
                            }
                        }
                    }
                }

                dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LinhVucChungId", listLinhVucChungId, iStartYear, iToDate, phongBanXuLyId);
                if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
                {
                    for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["LoiHeThong_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
                                dtPPS.Rows[j]["GiaoDichVien_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
                                dtPPS.Rows[j]["CSKH_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
                                dtPPS.Rows[j]["Khac_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
                                break;
                            }
                        }
                    }
                }
            } // end if(listLinhVucChungId != null && listLinhVucChungId.Count > 0)

            if (listLinhVucConId != null && listLinhVucConId.Count > 0)
            {
                dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LinhVucConId", listLinhVucConId, iStartYear, iToDate, phongBanXuLyId);
                if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
                {
                    for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["SoTien_3"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
                                break;
                            }
                        }
                    }
                }

                dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LinhVucConId", listLinhVucConId, iStartYear, iToDate, phongBanXuLyId);
                if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
                {
                    for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
                    {
                        for (int j = 0; j < dtPPS.Rows.Count; j++)
                        {
                            if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
                            {
                                dtPPS.Rows[j]["LoiHeThong_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
                                dtPPS.Rows[j]["GiaoDichVien_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
                                dtPPS.Rows[j]["CSKH_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
                                dtPPS.Rows[j]["Khac_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
                                break;
                            }
                        }
                    }
                }
            } // end if(listLinhVucConId != null && listLinhVucConId.Count > 0)

            // Số lượng và số tiền giảm trừ của từng nguyên nhân           
            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1", iStartYear, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_31", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1", iStartYear, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_31", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1", iStartYear, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_31", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2", iStartYear, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_31", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2", iStartYear, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_31", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2", iStartYear, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_31", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3", iStartYear, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_31", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3", iStartYear, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_31", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3", iStartYear, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_31", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4", iStartYear, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_31", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4", iStartYear, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_31", listKhieuNaiInfo);

            whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4", iStartYear, iToDate, whereClausePhongBanXuLy);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
            GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_31", listKhieuNaiInfo);


            #endregion

            dsResult.Tables.Add(dtPPS);

            return dsResult;
        }

        //public DataSet BaoCaoTongHopKhieuNaiTheoToGQKNCuaPhongCSKH_Solr(int phongBanXuLyId, DateTime fromDate, DateTime toDate, List<string> listLoaiKhieuNaiId, List<string> listLinhVucChungId, List<string> listLinhVucConId)
        //{
        //    DataSet dsResult = new DataSet();

        //    string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
        //    string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);
        //    string iFromDate = fromDate.ToString("yyyyMMdd");
        //    string iToDate = toDate.ToString("yyyyMMdd");
        //    string iStartYear = string.Format("{0}0101", fromDate.Year);
        //    string iFromDateMinus1 = fromDate.Subtract(new TimeSpan(1, 0, 0, 0)).ToString("yyyyMMdd");

        //    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

        //    string colNameLoaiKhieuNaiId = "LoaiKhieuNaiId";
        //    string colNameLinhVucChungId = "LinhVucChungId";
        //    string colNameLinhVucConId = "LinhVucConId";

        //    string loaiKhieuNaiId = string.Empty;
        //    string linhVucChungId = string.Empty;
        //    string linhVucConId = string.Empty;

        //    string sqlLoaiKhieuNai = string.Empty;
        //    string sqlLinhVucChung = string.Empty;
        //    string sqlLinhVucCon = string.Empty;

        //    QueryOptions queryOptionLoaiKhieuNai = new QueryOptions();
        //    QueryOptions queryOptionLinhVucChung = new QueryOptions();
        //    QueryOptions queryOptionLinhVucCon = new QueryOptions();
        //    QueryOptions queryOptionLyDoGiamTru = new QueryOptions();

        //    //Lấy ra những trường nào
        //    var extraParamLoaiKhieuNai = new Dictionary<string, string>();
        //    extraParamLoaiKhieuNai.Add("fl", @"LoaiKhieuNaiId,LoaiKhieuNai");

        //    queryOptionLoaiKhieuNai.ExtraParams = extraParamLoaiKhieuNai;

        //    queryOptionLoaiKhieuNai.Start = 0;
        //    queryOptionLoaiKhieuNai.Rows = listLoaiKhieuNaiId.Count;

        //    //Lấy ra những trường nào
        //    var extraParamLinhVucChung = new Dictionary<string, string>();
        //    extraParamLinhVucChung.Add("fl", @"LinhVucChungId, LinhVucChung");

        //    queryOptionLinhVucChung.ExtraParams = extraParamLinhVucChung;

        //    queryOptionLinhVucChung.Start = 0;
        //    queryOptionLinhVucChung.Rows = listLinhVucChungId.Count;

        //    //Lấy ra những trường nào
        //    var extraParamLinhVucCon = new Dictionary<string, string>();
        //    extraParamLinhVucCon.Add("fl", @"LinhVucConId, LinhVucCon");

        //    queryOptionLinhVucCon.ExtraParams = extraParamLinhVucCon;

        //    queryOptionLinhVucCon.Start = 0;
        //    queryOptionLinhVucCon.Rows = listLinhVucConId.Count;

        //    FacetParameters fpLoaiKhieuNai = new FacetParameters();
        //    SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("LoaiKhieuNaiId");
        //    fpLoaiKhieuNai.Queries.Add(facetField);
        //    queryOptionLoaiKhieuNai.Facet = fpLoaiKhieuNai;

        //    FacetParameters fpLinhVucChung = new FacetParameters();
        //    facetField = new SolrFacetFieldQuery("LinhVucChungId");
        //    fpLinhVucChung.Queries.Add(facetField);
        //    queryOptionLinhVucChung.Facet = fpLinhVucChung;

        //    FacetParameters fpLinhVucCon = new FacetParameters();
        //    facetField = new SolrFacetFieldQuery("LinhVucConId");
        //    fpLinhVucCon.Queries.Add(facetField);
        //    queryOptionLinhVucCon.Facet = fpLinhVucCon;

        //    FacetParameters fpLyDoGiamTru = new FacetParameters();
        //    facetField = new SolrFacetFieldQuery("LyDoGiamTru");
        //    fpLyDoGiamTru.Queries.Add(facetField);
        //    queryOptionLyDoGiamTru.Facet = fpLyDoGiamTru;

        //    //Where điều kiện
        //    string whereClauseLoaiKhieuNai = "*:* ";
        //    string whereClauseLinhVucChung = "*:* ";
        //    string whereClauseLinhVucCon = "*:* ";
        //    string whereClausePhongBanXuLy = string.Empty;

        //    if (phongBanXuLyId != -1)
        //    {
        //        whereClausePhongBanXuLy = string.Format(" AND PhongBanXuLyId : {0}", phongBanXuLyId);
        //    }

        //    string whereClause = string.Empty;
        //    SolrQuery solrQuery = null;

        //    DataTable dtLoaiKhieuNai = new DataTable();
        //    DataTable dtLinhVucChung = new DataTable();
        //    DataTable dtLinhVucCon = new DataTable();

        //    dtLoaiKhieuNai.Columns.Add("LoaiKhieuNaiId");
        //    dtLoaiKhieuNai.Columns.Add("LoaiKhieuNai");
        //    dtLoaiKhieuNai.Columns.Add("ParentId");

        //    for (int i = 0; i < listLoaiKhieuNaiId.Count; i++)
        //    {
        //        DataRow row = dtLoaiKhieuNai.NewRow();
        //        row["LoaiKhieuNaiId"] = listLoaiKhieuNaiId[i];
        //        row["ParentId"] = "0";

        //        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
        //        {
        //            if (row["LoaiKhieuNaiId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
        //            {
        //                row["LoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
        //                break;
        //            }
        //        }

        //        dtLoaiKhieuNai.Rows.Add(row);
        //    }

        //    dtLinhVucChung.Columns.Add("LinhVucChungId");
        //    dtLinhVucChung.Columns.Add("LinhVucChung");
        //    dtLinhVucChung.Columns.Add("ParentId");

        //    for (int i = 0; i < listLinhVucChungId.Count; i++)
        //    {
        //        DataRow row = dtLinhVucChung.NewRow();
        //        row["LinhVucChungId"] = listLinhVucChungId[i];

        //        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
        //        {
        //            if (row["LinhVucChungId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
        //            {
        //                row["LinhVucChung"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
        //                row["ParentId"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].ParentId;
        //                break;
        //            }
        //        }

        //        dtLinhVucChung.Rows.Add(row);
        //    }

        //    dtLinhVucCon.Columns.Add("LinhVucConId");
        //    dtLinhVucCon.Columns.Add("LinhVucCon");
        //    dtLinhVucCon.Columns.Add("ParentId");

        //    for (int i = 0; i < listLinhVucConId.Count; i++)
        //    {
        //        DataRow row = dtLinhVucCon.NewRow();
        //        row["LinhVucConId"] = listLinhVucConId[i];

        //        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
        //        {
        //            if (row["LinhVucConId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
        //            {
        //                row["LinhVucCon"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
        //                row["ParentId"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].ParentId;
        //                break;
        //            }
        //        }

        //        dtLinhVucCon.Rows.Add(row);
        //    }

        //    dtLoaiKhieuNai.Columns.Add("LuyKeKNDaGiaiQuyetDenDauTuanX");
        //    dtLoaiKhieuNai.Columns.Add("LuyKeKNTonDongDenDauTuanX");
        //    dtLoaiKhieuNai.Columns.Add("SoLuongTiepNhanTrongTuan");
        //    dtLoaiKhieuNai.Columns.Add("TongSoPAKNGiaiQuyetDuoc");

        //    dtLinhVucChung.Columns.Add("LuyKeKNDaGiaiQuyetDenDauTuanX");
        //    dtLinhVucChung.Columns.Add("LuyKeKNTonDongDenDauTuanX");
        //    dtLinhVucChung.Columns.Add("SoLuongTiepNhanTrongTuan");
        //    dtLinhVucChung.Columns.Add("TongSoPAKNGiaiQuyetDuoc");

        //    dtLinhVucCon.Columns.Add("LuyKeKNDaGiaiQuyetDenDauTuanX");
        //    dtLinhVucCon.Columns.Add("LuyKeKNTonDongDenDauTuanX");
        //    dtLinhVucCon.Columns.Add("SoLuongTiepNhanTrongTuan");
        //    dtLinhVucCon.Columns.Add("TongSoPAKNGiaiQuyetDuoc");


        //    #region Lũy kế KN đã GQ đến đầu tuần 30/2013

        //    whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLoaiKhieuNai, iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "LuyKeKNDaGiaiQuyetDenDauTuanX", listKhieuNaiInfo);

        //    whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucChung, iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "LuyKeKNDaGiaiQuyetDenDauTuanX", listKhieuNaiInfo);

        //    whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucCon, iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "LuyKeKNDaGiaiQuyetDenDauTuanX", listKhieuNaiInfo);

        //    #endregion

        //    #region Lũy kế KN tồn đọng đầu tuần 30/2013

        //    whereClause = string.Format("{0} AND NgayTiepNhanSort : [* TO {1}] AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClauseLoaiKhieuNai, iFromDateMinus1, phongBanXuLyId);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "LuyKeKNTonDongDenDauTuanX", listKhieuNaiInfo);

        //    whereClause = string.Format("{0} AND NgayTiepNhanSort : [* TO {1}] AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClauseLinhVucChung, iFromDateMinus1, phongBanXuLyId);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "LuyKeKNTonDongDenDauTuanX", listKhieuNaiInfo);

        //    whereClause = string.Format("{0} AND NgayTiepNhanSort : [* TO {1}] AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClauseLinhVucCon, iFromDateMinus1, phongBanXuLyId);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "LuyKeKNTonDongDenDauTuanX", listKhieuNaiInfo);

        //    #endregion

        //    #region Số lượng tiếp nhận trong tuần

        //    whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3}", whereClauseLoaiKhieuNai, sFromDate, sToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

        //    whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3}", whereClauseLinhVucChung, sFromDate, sToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

        //    whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) {3}", whereClauseLinhVucCon, sFromDate, sToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

        //    //whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] {3}", whereClauseLoaiKhieuNai, iFromDate, iToDate, whereClausePhongBanXuLy);
        //    //solrQuery = new SolrQuery(whereClause);
        //    //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
        //    //GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

        //    //whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] {3}", whereClauseLinhVucChung, iFromDate, iToDate, whereClausePhongBanXuLy);
        //    //solrQuery = new SolrQuery(whereClause);
        //    //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
        //    //GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

        //    //whereClause = string.Format("{0} AND NgayTiepNhanSort : [{1} TO {2}] {3}", whereClauseLinhVucCon, iFromDate, iToDate, whereClausePhongBanXuLy);
        //    //solrQuery = new SolrQuery(whereClause);
        //    //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
        //    //GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "SoLuongTiepNhanTrongTuan", listKhieuNaiInfo);

        //    #endregion

        //    #region Số lượng đã giải quyết trong tuần

        //    whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLoaiKhieuNai, iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtLoaiKhieuNai, colNameLoaiKhieuNaiId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

        //    whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucChung, iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtLinhVucChung, colNameLinhVucChungId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

        //    whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 {3}", whereClauseLinhVucCon, iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtLinhVucCon, colNameLinhVucConId, "TongSoPAKNGiaiQuyetDuoc", listKhieuNaiInfo);

        //    #endregion

        //    dsResult.Tables.Add(dtLoaiKhieuNai);
        //    dsResult.Tables.Add(dtLinhVucChung);
        //    dsResult.Tables.Add(dtLinhVucCon);

        //    #region Báo cáo PPS

        //    // Lấy dữ liệu báo cáo PPS            
        //    DataTable dtPPS = new DataTable();
        //    dtPPS.Columns.Add("LoaiKhieuNaiId");
        //    dtPPS.Columns.Add("TenLoaiKhieuNai");
        //    dtPPS.Columns.Add("MaDichVu");
        //    dtPPS.Columns.Add("CapChiTiet_1");
        //    dtPPS.Columns.Add("BuCuoc_1");
        //    dtPPS.Columns.Add("SoTien_1");
        //    dtPPS.Columns.Add("LoiHeThong_11");
        //    dtPPS.Columns.Add("LoiHeThong_12");
        //    dtPPS.Columns.Add("GiaoDichVien_11");
        //    dtPPS.Columns.Add("GiaoDichVien_12");
        //    dtPPS.Columns.Add("CSKH_11");
        //    dtPPS.Columns.Add("CSKH_12");
        //    dtPPS.Columns.Add("Khac_11");
        //    dtPPS.Columns.Add("Khac_12");

        //    dtPPS.Columns.Add("CapChiTiet_2");
        //    dtPPS.Columns.Add("BuCuoc_2");
        //    dtPPS.Columns.Add("SoTien_2");
        //    dtPPS.Columns.Add("LoiHeThong_21");
        //    dtPPS.Columns.Add("LoiHeThong_22");
        //    dtPPS.Columns.Add("GiaoDichVien_21");
        //    dtPPS.Columns.Add("GiaoDichVien_22");
        //    dtPPS.Columns.Add("CSKH_21");
        //    dtPPS.Columns.Add("CSKH_22");
        //    dtPPS.Columns.Add("Khac_21");
        //    dtPPS.Columns.Add("Khac_22");

        //    dtPPS.Columns.Add("CapChiTiet_3");
        //    dtPPS.Columns.Add("BuCuoc_3");
        //    dtPPS.Columns.Add("SoTien_3");
        //    dtPPS.Columns.Add("LoiHeThong_31");
        //    dtPPS.Columns.Add("LoiHeThong_32");
        //    dtPPS.Columns.Add("GiaoDichVien_31");
        //    dtPPS.Columns.Add("GiaoDichVien_32");
        //    dtPPS.Columns.Add("CSKH_31");
        //    dtPPS.Columns.Add("CSKH_32");
        //    dtPPS.Columns.Add("Khac_31");
        //    dtPPS.Columns.Add("Khac_32");

        //    for(int i=0;i<listLoaiKhieuNaiId.Count;i++)
        //    {
        //        for(int j=0;j<LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count;j++)
        //        {
        //            if(listLoaiKhieuNaiId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
        //            {
        //                DataRow row = dtPPS.NewRow();
        //                row["LoaiKhieuNaiId"] = listLoaiKhieuNaiId[i];
        //                row["TenLoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
        //                row["MaDichVu"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].MaDichVu;
        //                dtPPS.Rows.Add(row);
        //                break;
        //            }
        //        }
        //    }

        //    for (int i = 0; i < listLinhVucChungId.Count; i++)
        //    {
        //        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
        //        {
        //            if (listLinhVucChungId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
        //            {
        //                DataRow row = dtPPS.NewRow();
        //                row["LoaiKhieuNaiId"] = listLinhVucChungId[i];
        //                row["TenLoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
        //                row["MaDichVu"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].MaDichVu;
        //                dtPPS.Rows.Add(row);
        //                break;
        //            }
        //        }
        //    }

        //    for (int i = 0; i < listLinhVucConId.Count; i++)
        //    {
        //        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
        //        {
        //            if (listLinhVucConId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
        //            {
        //                DataRow row = dtPPS.NewRow();
        //                row["LoaiKhieuNaiId"] = listLinhVucConId[i];
        //                row["TenLoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
        //                row["MaDichVu"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].MaDichVu;
        //                dtPPS.Rows.Add(row);
        //                break;
        //            }
        //        }
        //    }

        //    // Lũy kế từ đầu năm đến trước thời điểm lấy báo cáo
        //    // Tính số lượng  cấp chi tiết
        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND (SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2 : 0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_1", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND (SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_1", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND (SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_1", listKhieuNaiInfo);

        //    // Tính số lượng bù cước
        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND -(SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_1", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND -(SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_1", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND -(SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_1", listKhieuNaiInfo);

        //    // Tổng số tiền
        //    DataTable dtTongSoTienBuCuoc = null;
        //    DataTable dtSoTienBuCuocTheoLyDoGiamTru = null;

        //    if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
        //    {
        //        dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LoaiKhieuNaiId", listLoaiKhieuNaiId, iStartYear, iFromDateMinus1, phongBanXuLyId);
        //        if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["SoTien_1"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }

        //        dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LoaiKhieuNaiId", listLoaiKhieuNaiId, iStartYear, iFromDateMinus1, phongBanXuLyId);
        //        if(dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["LoiHeThong_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
        //                        dtPPS.Rows[j]["GiaoDichVien_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
        //                        dtPPS.Rows[j]["CSKH_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
        //                        dtPPS.Rows[j]["Khac_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //    } // end if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)

        //    if(listLinhVucChungId != null && listLinhVucChungId.Count > 0)
        //    {
        //        dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LinhVucChungId", listLinhVucChungId, iStartYear, iFromDateMinus1, phongBanXuLyId);
        //        if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["SoTien_1"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }

        //        dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LinhVucChungId", listLinhVucChungId, iStartYear, iFromDateMinus1, phongBanXuLyId);
        //        if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["LoiHeThong_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
        //                        dtPPS.Rows[j]["GiaoDichVien_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
        //                        dtPPS.Rows[j]["CSKH_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
        //                        dtPPS.Rows[j]["Khac_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //    } // end if(listLinhVucChungId != null && listLinhVucChungId.Count > 0)            

        //    if(listLinhVucConId != null && listLinhVucConId.Count > 0)
        //    {
        //        dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LinhVucConId", listLinhVucConId, iStartYear, iFromDateMinus1, phongBanXuLyId);
        //        if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["SoTien_1"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }

        //        dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LinhVucConId", listLinhVucConId, iStartYear, iFromDateMinus1, phongBanXuLyId);
        //        if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["LoiHeThong_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
        //                        dtPPS.Rows[j]["GiaoDichVien_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
        //                        dtPPS.Rows[j]["CSKH_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
        //                        dtPPS.Rows[j]["Khac_12"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //    } // end if(listLinhVucConId != null && listLinhVucConId.Count > 0)

        //    // Số lượng và số tiền giảm trừ của từng nguyên nhân           
        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1 AND -LoaiTien:5", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_11", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1 AND -LoaiTien:5", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_11", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1 AND -LoaiTien:5", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_11", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2 AND -LoaiTien:5", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_11", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2 AND -LoaiTien:5", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_11", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2 AND -LoaiTien:5", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_11", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3 AND -LoaiTien:5", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_11", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3 AND -LoaiTien:5", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_11", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3 AND -LoaiTien:5", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_11", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4 AND -LoaiTien:5", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_11", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4 AND -LoaiTien:5", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_11", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4 AND -LoaiTien:5", iStartYear, iFromDateMinus1, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_11", listKhieuNaiInfo);

        //    if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
        //    {
        //        dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LoaiKhieuNaiId", listLoaiKhieuNaiId, iFromDate, iToDate, phongBanXuLyId);
        //        if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["SoTien_2"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //    } // end if(listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)

        //    // Số lượng cấp chi tiết tại thời điểm lấy báo cáo
        //    // Số lượng cấp chi tiết
        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND (SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_2", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND (SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_2", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND (SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_2", listKhieuNaiInfo);

        //    // Tính số lượng bù cước
        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND -(SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_2", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND -(SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_2", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND -(SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_2", listKhieuNaiInfo);

        //    // Tổng số tiền 
        //    if(listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
        //    {
        //        dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LoaiKhieuNaiId", listLoaiKhieuNaiId, iFromDate, iToDate, phongBanXuLyId);
        //        if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["SoTien_2"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }

        //        dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LoaiKhieuNaiId", listLoaiKhieuNaiId, iFromDate, iToDate, phongBanXuLyId);
        //        if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["LoiHeThong_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
        //                        dtPPS.Rows[j]["GiaoDichVien_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
        //                        dtPPS.Rows[j]["CSKH_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
        //                        dtPPS.Rows[j]["Khac_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //    } // end if(listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)

        //    if(listLinhVucChungId != null && listLinhVucChungId.Count > 0 )
        //    {
        //        dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LinhVucChungId", listLinhVucChungId, iFromDate, iToDate, phongBanXuLyId);
        //        if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["SoTien_2"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }

        //        dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LinhVucChungId", listLinhVucChungId, iFromDate, iToDate, phongBanXuLyId);
        //        if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["LoiHeThong_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
        //                        dtPPS.Rows[j]["GiaoDichVien_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
        //                        dtPPS.Rows[j]["CSKH_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
        //                        dtPPS.Rows[j]["Khac_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //    } // end if(listLinhVucChungId != null && listLinhVucChungId.Count > 0 )            

        //    if(listLinhVucConId != null && listLinhVucConId.Count > 0)
        //    {
        //        dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LinhVucConId", listLinhVucConId, iFromDate, iToDate, phongBanXuLyId);
        //        if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["SoTien_2"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }

        //        dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LinhVucConId", listLinhVucConId, iFromDate, iToDate, phongBanXuLyId);
        //        if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["LoiHeThong_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
        //                        dtPPS.Rows[j]["GiaoDichVien_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
        //                        dtPPS.Rows[j]["CSKH_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
        //                        dtPPS.Rows[j]["Khac_22"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //    } // end if(listLinhVucConId != null && listLinhVucConId.Count > 0)

        //    // Tính số lượng và số tiền giảm trừ của từng nguyên nhân
        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1 AND -LoaiTien:5", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_21", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1 AND -LoaiTien:5", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_21", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1 AND -LoaiTien:5", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_21", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2 AND -LoaiTien:5", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_21", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2 AND -LoaiTien:5", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_21", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2 AND -LoaiTien:5", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_21", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3 AND -LoaiTien:5", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_21", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3 AND -LoaiTien:5", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_21", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3 AND -LoaiTien:5", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_21", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4 AND -LoaiTien:5", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_21", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4 AND -LoaiTien:5", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_21", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4 AND -LoaiTien:5", iFromDate, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_21", listKhieuNaiInfo);


        //    // Lũy kế từ đầu năm đến cuối thời điểm lấy báo cáo
        //    // Số lượng cấp chi tiết
        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3} AND (SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iStartYear, iToDate, whereClausePhongBanXuLy, whereClauseLoaiKhieuNai);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_3", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3} AND (SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iStartYear, iToDate, whereClausePhongBanXuLy, whereClauseLinhVucChung);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_3", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3} AND (SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iStartYear, iToDate, whereClausePhongBanXuLy, whereClauseLinhVucCon);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CapChiTiet_3", listKhieuNaiInfo);

        //    // Tính số lượng bù cước
        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3} AND -(SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iStartYear, iToDate, whereClausePhongBanXuLy, whereClauseLoaiKhieuNai);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_3", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3} AND -(SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iStartYear, iToDate, whereClausePhongBanXuLy, whereClauseLinhVucChung);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_3", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3} AND -(SoTienKhauTru_TKC:0 AND SoTienKhauTru_KM:0 AND SoTienKhauTru_KM1:0 AND SoTienKhauTru_KM2:0 AND SoTienKhauTru_Data:0 AND SoTienKhauTru_Khac:0)", iStartYear, iToDate, whereClausePhongBanXuLy, whereClauseLinhVucCon);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "BuCuoc_3", listKhieuNaiInfo);

        //    // Tổng số tiền  
        //    if(listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
        //    {
        //        dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LoaiKhieuNaiId", listLoaiKhieuNaiId, iStartYear, iToDate, phongBanXuLyId);
        //        if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["SoTien_3"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }

        //        dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LoaiKhieuNaiId", listLoaiKhieuNaiId, iStartYear, iToDate, phongBanXuLyId);
        //        if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["LoiHeThong_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
        //                        dtPPS.Rows[j]["GiaoDichVien_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
        //                        dtPPS.Rows[j]["CSKH_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
        //                        dtPPS.Rows[j]["Khac_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //    } // end if(listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)

        //    if(listLinhVucChungId != null && listLinhVucChungId.Count > 0)
        //    {
        //        dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LinhVucChungId", listLinhVucChungId, iStartYear, iToDate, phongBanXuLyId);
        //        if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["SoTien_3"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }

        //        dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LinhVucChungId", listLinhVucChungId, iStartYear, iToDate, phongBanXuLyId);
        //        if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["LoiHeThong_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
        //                        dtPPS.Rows[j]["GiaoDichVien_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
        //                        dtPPS.Rows[j]["CSKH_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
        //                        dtPPS.Rows[j]["Khac_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //    } // end if(listLinhVucChungId != null && listLinhVucChungId.Count > 0)

        //    if(listLinhVucConId != null && listLinhVucConId.Count > 0)
        //    {
        //        dtTongSoTienBuCuoc = CaculateSoTienBuCuoc("LinhVucConId", listLinhVucConId, iStartYear, iToDate, phongBanXuLyId);
        //        if (dtTongSoTienBuCuoc != null && dtTongSoTienBuCuoc.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtTongSoTienBuCuoc.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtTongSoTienBuCuoc.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["SoTien_3"] = dtTongSoTienBuCuoc.Rows[i]["SoTien"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }

        //        dtSoTienBuCuocTheoLyDoGiamTru = CalculateSoTienBuCuocTheoLyDoGiamTru("LinhVucConId", listLinhVucConId, iStartYear, iToDate, phongBanXuLyId);
        //        if (dtSoTienBuCuocTheoLyDoGiamTru != null && dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count > 0)
        //        {
        //            for (int i = 0; i < dtSoTienBuCuocTheoLyDoGiamTru.Rows.Count; i++)
        //            {
        //                for (int j = 0; j < dtPPS.Rows.Count; j++)
        //                {
        //                    if (dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["LoaiKhieuNaiId"] == dtPPS.Rows[j]["LoaiKhieuNaiId"])
        //                    {
        //                        dtPPS.Rows[j]["LoiHeThong_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiHeThong"];
        //                        dtPPS.Rows[j]["GiaoDichVien_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_LoiGiaoDichVien"];
        //                        dtPPS.Rows[j]["CSKH_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_CSKH"];
        //                        dtPPS.Rows[j]["Khac_32"] = dtSoTienBuCuocTheoLyDoGiamTru.Rows[i]["SoTien_Khac"];
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //    } // end if(listLinhVucConId != null && listLinhVucConId.Count > 0)

        //    // Số lượng và số tiền giảm trừ của từng nguyên nhân           
        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1 AND -LoaiTien:5", iStartYear, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_31", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1 AND -LoaiTien:5", iStartYear, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_31", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:1 AND -LoaiTien:5", iStartYear, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "LoiHeThong_31", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2 AND -LoaiTien:5", iStartYear, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_31", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2 AND -LoaiTien:5", iStartYear, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_31", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:2 AND -LoaiTien:5", iStartYear, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "GiaoDichVien_31", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3 AND -LoaiTien:5", iStartYear, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_31", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3 AND -LoaiTien:5", iStartYear, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_31", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:3 AND -LoaiTien:5", iStartYear, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "CSKH_31", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4 AND -LoaiTien:5", iStartYear, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLoaiKhieuNai);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_31", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4 AND -LoaiTien:5", iStartYear, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucChung);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_31", listKhieuNaiInfo);

        //    whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} AND LyDoGiamTru:4 AND -LoaiTien:5", iStartYear, iToDate, whereClausePhongBanXuLy);
        //    solrQuery = new SolrQuery(whereClause);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionLinhVucCon);
        //    GetCountOfFacet(dtPPS, colNameLoaiKhieuNaiId, "Khac_31", listKhieuNaiInfo);


        //    #endregion

        //    dsResult.Tables.Add(dtPPS);           

        //    return dsResult;
        //}

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 17/06/2014
        /// Todo : Tính số tiền được bù cước
        /// </summary>
        /// <param name="facetField"></param>
        /// <param name="listLoaiKhieuNaiId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        private DataTable CaculateSoTienBuCuoc(string facetFieldName, List<string> listLoaiKhieuNaiId, string iFromDate, string iToDate, int phongBanXuLyId)
        {
            DataTable dtPPS = new DataTable();
            dtPPS.Columns.Add("LoaiKhieuNaiId");
            dtPPS.Columns.Add("SoTien");
            for (int i = 0; i < listLoaiKhieuNaiId.Count; i++)
            {
                DataRow row = dtPPS.NewRow();
                row["LoaiKhieuNaiId"] = listLoaiKhieuNaiId[i];
                row["SoTien"] = 0;

                dtPPS.Rows.Add(row);
            }

            QueryOptions queryOptionPPS = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamPPS = new Dictionary<string, string>();
            extraParamPPS.Add("fl", @"LoaiKhieuNaiId, LoaiKhieuNai, LinhVucChungId, LinhVucChung, LinhVucConId, LinhVucCon");

            queryOptionPPS.ExtraParams = extraParamPPS;

            queryOptionPPS.Start = 0;
            queryOptionPPS.Rows = LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count;

            FacetParameters fpPPS = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery(facetFieldName);
            fpPPS.Queries.Add(facetField);
            queryOptionPPS.Facet = fpPPS;

            StatsParameters spPPS = new StatsParameters();
            spPPS.AddFacet(facetFieldName);
            spPPS.AddField("SoTienKhauTru_TKC");
            spPPS.AddField("SoTienKhauTru_KM");
            spPPS.AddField("SoTienKhauTru_KM1");
            spPPS.AddField("SoTienKhauTru_KM2");
            spPPS.AddField("SoTienKhauTru_Data");
            spPPS.AddField("SoTienKhauTru_Khac");
            queryOptionPPS.Stats = spPPS;
            //string whereClauseSoTien = string.Format("NgayDongKNSort : [{0} TO {1}] AND PhongBanXuLyId:{2} AND (-SoTienKhauTru_TKC:0 OR -SoTienKhauTru_KM:0 OR -SoTienKhauTru_KM1:0 OR -SoTienKhauTru_KM2 OR -SoTienKhauTru_Data:0 OR -SoTienKhauTru_Khac:0)", iFromDate, iToDate, phongBanXuLyId);
            string whereClauseSoTien = string.Format("NgayDongKNSort : [{0} TO {1}] AND PhongBanXuLyId:{2}", iFromDate, iToDate, phongBanXuLyId);
            SolrQuery solrQuery = new SolrQuery(whereClauseSoTien);
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionPPS);

            List<string> listKhieuNaiId = new List<string>();
            List<KhieuNai_ReportInfo> listKhieuNaiMoney = new List<KhieuNai_ReportInfo>();

            foreach (var kv in listKhieuNaiInfo.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Data, SoTienKhauTru_Khac
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);
                        KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();

                        if (!listKhieuNaiId.Contains(fv.Key))
                        {

                            int loaiKhieuNaiIdTemp = ConvertUtility.ToInt32(fv.Key);
                            reportInfo.LoaiKhieuNaiId = loaiKhieuNaiIdTemp;
                            reportInfo.LinhVucChungId = loaiKhieuNaiIdTemp;
                            reportInfo.LinhVucConId = loaiKhieuNaiIdTemp;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);

                            switch (kv.Key)
                            {
                                case "SoTienKhauTru_TKC":
                                    reportInfo.SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM":
                                    reportInfo.SoTienKhauTru_KM = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM1":
                                    reportInfo.SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_KM2":
                                    reportInfo.SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_Data":
                                    // Không tính data
                                    //reportInfo.SoTienKhauTru_Data = (decimal)fv.Value.Sum;
                                    break;
                                case "SoTienKhauTru_Khac":
                                    reportInfo.SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
                                    break;
                            }

                            listKhieuNaiId.Add(fv.Key);
                            listKhieuNaiMoney.Add(reportInfo);
                        } // end if (!listKhieuNaiId.Contains(fv.Key))
                        else
                        {
                            for (int i = 0; i < listKhieuNaiMoney.Count; i++)
                            {
                                if (listKhieuNaiMoney[i].LoaiKhieuNaiId.ToString() == fv.Key)
                                {
                                    switch (kv.Key)
                                    {
                                        case "SoTienKhauTru_TKC":
                                            listKhieuNaiMoney[i].SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM":
                                            listKhieuNaiMoney[i].SoTienKhauTru_KM = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM1":
                                            listKhieuNaiMoney[i].SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_KM2":
                                            listKhieuNaiMoney[i].SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
                                            break;
                                            //case "SoTienKhauTru_Data":
                                            //listKhieuNaiMoney[i].SoTienKhauTru_Data = (decimal)fv.Value.Sum;
                                            break;
                                        case "SoTienKhauTru_Khac":
                                            listKhieuNaiMoney[i].SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
                                            break;
                                    }
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)               

            if (listKhieuNaiMoney != null && listKhieuNaiMoney.Count > 0)
            {
                foreach (DataRow row in dtPPS.Rows)
                {
                    for (int i = 0; i < listKhieuNaiMoney.Count; i++)
                    {
                        if (row["LoaiKhieuNaiId"].ToString() == listKhieuNaiMoney[i].LinhVucConId.ToString())
                        {
                            row["SoTien"] = listKhieuNaiMoney[i].SoTienKhauTru_TKC + listKhieuNaiMoney[i].SoTienKhauTru_KM + listKhieuNaiMoney[i].SoTienKhauTru_KM1
                                        + listKhieuNaiMoney[i].SoTienKhauTru_KM2 + listKhieuNaiMoney[i].SoTienKhauTru_Khac; //+ listKhieuNaiMoney[i].SoTienKhauTru_Data
                            break;
                        }
                    }
                }
            }

            return dtPPS;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 18/06/2014
        /// Todo : 
        /// </summary>
        /// <param name="facetFieldName"></param>
        /// <param name="listLoaiKhieuNaiId"></param>
        /// <param name="iFromDate"></param>
        /// <param name="iToDate"></param>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="lyDoGiamTru"></param>
        /// <returns></returns>
        private DataTable CalculateSoTienBuCuocTheoLyDoGiamTru(string facetFieldName, List<string> listLoaiKhieuNaiId, string iFromDate, string iToDate, int phongBanXuLyId)
        {
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("LoaiKhieuNaiId");
            dtResult.Columns.Add("SoTien_LoiHeThong");
            dtResult.Columns.Add("SoTien_LoiGiaoDichVien");
            dtResult.Columns.Add("SoTien_CSKH");
            dtResult.Columns.Add("SoTien_Khac");

            for (int i = 0; i < listLoaiKhieuNaiId.Count; i++)
            {
                DataRow row = dtResult.NewRow();
                row["LoaiKhieuNaiId"] = listLoaiKhieuNaiId[i];
                row["SoTien_LoiHeThong"] = 0;
                row["SoTien_LoiGiaoDichVien"] = 0;
                row["SoTien_CSKH"] = 0;
                row["SoTien_Khac"] = 0;

                dtResult.Rows.Add(row);
            }

            QueryOptions queryOptionPPS = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamPPS = new Dictionary<string, string>();
            extraParamPPS.Add("fl", @"LoaiKhieuNaiId, LoaiKhieuNai, LinhVucChungId, LinhVucChung, LinhVucConId, LinhVucCon");

            queryOptionPPS.ExtraParams = extraParamPPS;

            queryOptionPPS.Start = 0;
            queryOptionPPS.Rows = LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count;

            FacetParameters fpPPS = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery(facetFieldName);
            fpPPS.Queries.Add(facetField);
            queryOptionPPS.Facet = fpPPS;

            StatsParameters spPPS = new StatsParameters();
            spPPS.AddFacet(facetFieldName);
            spPPS.AddField("SoTienKhauTru_TKC");
            spPPS.AddField("SoTienKhauTru_KM");
            spPPS.AddField("SoTienKhauTru_KM1");
            spPPS.AddField("SoTienKhauTru_KM2");
            spPPS.AddField("SoTienKhauTru_Data");
            spPPS.AddField("SoTienKhauTru_Khac");
            queryOptionPPS.Stats = spPPS;

            // Lặp 4 lý do giảm trừ
            for (int i = 1; i <= 4; i++)
            {
                string whereClauseSoTien = string.Format("NgayDongKNSort : [{0} TO {1}] AND PhongBanXuLyId:{2} AND LyDoGiamTru:{3}", iFromDate, iToDate, phongBanXuLyId, i);
                SolrQuery solrQuery = new SolrQuery(whereClauseSoTien);
                SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionPPS);

                List<string> listKhieuNaiId = new List<string>();
                List<KhieuNai_ReportInfo> listKhieuNaiMoney = new List<KhieuNai_ReportInfo>();

                foreach (var kv in listKhieuNaiInfo.Stats)
                {
                    // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Data, SoTienKhauTru_Khac
                    string kvKey = kv.Key;
                    var kvValue = kv.Value;

                    foreach (var f in kvValue.FacetResults)
                    {
                        string fKey = f.Key;
                        foreach (var fv in f.Value)
                        {
                            int fvKey = ConvertUtility.ToInt32(fv.Key);
                            KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();

                            if (!listKhieuNaiId.Contains(fv.Key))
                            {

                                int loaiKhieuNaiIdTemp = ConvertUtility.ToInt32(fv.Key);
                                reportInfo.LoaiKhieuNaiId = loaiKhieuNaiIdTemp;
                                reportInfo.LinhVucChungId = loaiKhieuNaiIdTemp;
                                reportInfo.LinhVucConId = loaiKhieuNaiIdTemp;
                                reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);

                                switch (kv.Key)
                                {
                                    case "SoTienKhauTru_TKC":
                                        reportInfo.SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
                                        break;
                                    case "SoTienKhauTru_KM":
                                        reportInfo.SoTienKhauTru_KM = (decimal)fv.Value.Sum;
                                        break;
                                    case "SoTienKhauTru_KM1":
                                        reportInfo.SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
                                        break;
                                    case "SoTienKhauTru_KM2":
                                        reportInfo.SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
                                        break;
                                    case "SoTienKhauTru_Data":
                                        // Không tính data
                                        //reportInfo.SoTienKhauTru_Data = (decimal)fv.Value.Sum;
                                        break;
                                    case "SoTienKhauTru_Khac":
                                        reportInfo.SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
                                        break;
                                }

                                listKhieuNaiId.Add(fv.Key);
                                listKhieuNaiMoney.Add(reportInfo);
                            } // end if (!listKhieuNaiId.Contains(fv.Key))
                            else
                            {
                                for (int j = 0; j < listKhieuNaiMoney.Count; j++)
                                {
                                    if (listKhieuNaiMoney[j].LoaiKhieuNaiId.ToString() == fv.Key)
                                    {
                                        switch (kv.Key)
                                        {
                                            case "SoTienKhauTru_TKC":
                                                listKhieuNaiMoney[j].SoTienKhauTru_TKC = (decimal)fv.Value.Sum;
                                                break;
                                            case "SoTienKhauTru_KM":
                                                listKhieuNaiMoney[j].SoTienKhauTru_KM = (decimal)fv.Value.Sum;
                                                break;
                                            case "SoTienKhauTru_KM1":
                                                listKhieuNaiMoney[j].SoTienKhauTru_KM1 = (decimal)fv.Value.Sum;
                                                break;
                                            case "SoTienKhauTru_KM2":
                                                listKhieuNaiMoney[j].SoTienKhauTru_KM2 = (decimal)fv.Value.Sum;
                                                break;
                                            case "SoTienKhauTru_Data":
                                                //listKhieuNaiMoney[i].SoTienKhauTru_Data = (decimal)fv.Value.Sum;
                                                break;
                                            case "SoTienKhauTru_Khac":
                                                listKhieuNaiMoney[j].SoTienKhauTru_Khac = (decimal)fv.Value.Sum;
                                                break;
                                        }
                                    }
                                }
                            }
                        } // end foreach (var fv in f.Value)
                    } // end foreach (var f in kvValue.FacetResults)                    
                } // end foreach (var kv in listQueryResult.Stats)               

                if (listKhieuNaiMoney != null && listKhieuNaiMoney.Count > 0)
                {
                    foreach (DataRow row in dtResult.Rows)
                    {
                        for (int j = 0; j < listKhieuNaiMoney.Count; j++)
                        {
                            if (row["LoaiKhieuNaiId"].ToString() == listKhieuNaiMoney[j].LinhVucConId.ToString())
                            {
                                row[i] = listKhieuNaiMoney[j].SoTienKhauTru_TKC + listKhieuNaiMoney[j].SoTienKhauTru_KM + listKhieuNaiMoney[j].SoTienKhauTru_KM1
                                        + listKhieuNaiMoney[j].SoTienKhauTru_KM2 + listKhieuNaiMoney[j].SoTienKhauTru_Khac; //+ listKhieuNaiMoney[i].SoTienKhauTru_Data
                                //row[i] = listKhieuNaiMoney[j].SoTienFinal;
                                break;
                            }
                        }
                    }
                }
            } // end for(int i=1;i<=4;i++)     

            return dtResult;
        }

        //private DataTable CalculateSoTienBuCuocTheoLyDoGiamTru(string facetFieldName, List<string> listLoaiKhieuNaiId, string iFromDate, string iToDate, int phongBanXuLyId)
        //{
        //    DataTable dtResult = new DataTable();
        //    dtResult.Columns.Add("LoaiKhieuNaiId");
        //    dtResult.Columns.Add("SoTien_LoiHeThong");
        //    dtResult.Columns.Add("SoTien_LoiGiaoDichVien");
        //    dtResult.Columns.Add("SoTien_CSKH");
        //    dtResult.Columns.Add("SoTien_Khac");

        //    for (int i = 0; i < listLoaiKhieuNaiId.Count; i++)
        //    {
        //        DataRow row = dtResult.NewRow();
        //        row["LoaiKhieuNaiId"] = listLoaiKhieuNaiId[i];
        //        row["SoTien_LoiHeThong"] = 0;
        //        row["SoTien_LoiGiaoDichVien"] = 0;
        //        row["SoTien_CSKH"] = 0;
        //        row["SoTien_Khac"] = 0;

        //        dtResult.Rows.Add(row);
        //    }

        //    QueryOptions queryOptionPPS = new QueryOptions();
        //    //Lấy ra những trường nào
        //    var extraParamPPS = new Dictionary<string, string>();
        //    extraParamPPS.Add("fl", @"LoaiKhieuNaiId, LoaiKhieuNai, LinhVucChungId, LinhVucChung, LinhVucConId, LinhVucCon");

        //    queryOptionPPS.ExtraParams = extraParamPPS;

        //    queryOptionPPS.Start = 0;
        //    queryOptionPPS.Rows = LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count;

        //    FacetParameters fpPPS = new FacetParameters();
        //    SolrFacetFieldQuery facetField = new SolrFacetFieldQuery(facetFieldName);
        //    fpPPS.Queries.Add(facetField);
        //    queryOptionPPS.Facet = fpPPS;

        //    StatsParameters spPPS = new StatsParameters();
        //    spPPS.AddFacet(facetFieldName);
        //    spPPS.AddField("SoTienFinal");            
        //    queryOptionPPS.Stats = spPPS;

        //    // Lặp 4 lý do giảm trừ
        //    for(int i=1;i<=4;i++)
        //    {
        //        string whereClauseSoTien = string.Format("NgayDongKNSort : [{0} TO {1}] AND PhongBanXuLyId:{2} AND LyDoGiamTru:{3} AND -LoaiTien:5", iFromDate, iToDate, phongBanXuLyId, i);
        //        SolrQuery solrQuery = new SolrQuery(whereClauseSoTien);
        //        SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionPPS);

        //        List<string> listKhieuNaiId = new List<string>();
        //        List<KhieuNai_ReportInfo> listKhieuNaiMoney = new List<KhieuNai_ReportInfo>();

        //        foreach (var kv in listKhieuNaiInfo.Stats)
        //        {
        //            // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Data, SoTienKhauTru_Khac
        //            string kvKey = kv.Key;
        //            var kvValue = kv.Value;

        //            foreach (var f in kvValue.FacetResults)
        //            {
        //                string fKey = f.Key;
        //                foreach (var fv in f.Value)
        //                {
        //                    int fvKey = ConvertUtility.ToInt32(fv.Key);
        //                    KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();

        //                    if (!listKhieuNaiId.Contains(fv.Key))
        //                    {

        //                        int loaiKhieuNaiIdTemp = ConvertUtility.ToInt32(fv.Key);
        //                        reportInfo.LoaiKhieuNaiId = loaiKhieuNaiIdTemp;
        //                        reportInfo.LinhVucChungId = loaiKhieuNaiIdTemp;
        //                        reportInfo.LinhVucConId = loaiKhieuNaiIdTemp;
        //                        reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);

        //                        reportInfo.SoTienFinal = (decimal)fv.Value.Sum;

        //                        listKhieuNaiId.Add(fv.Key);
        //                        listKhieuNaiMoney.Add(reportInfo);
        //                    } // end if (!listKhieuNaiId.Contains(fv.Key))
        //                    else
        //                    {
        //                        for (int j = 0; j < listKhieuNaiMoney.Count; j++)
        //                        {
        //                            if (listKhieuNaiMoney[j].LoaiKhieuNaiId.ToString() == fv.Key)
        //                            {
        //                                listKhieuNaiMoney[j].SoTienFinal = (decimal)fv.Value.Sum;
        //                            }
        //                        }
        //                    }
        //                } // end foreach (var fv in f.Value)
        //            } // end foreach (var f in kvValue.FacetResults)
        //        } // end foreach (var kv in listQueryResult.Stats)               

        //        if (listKhieuNaiMoney != null && listKhieuNaiMoney.Count > 0)
        //        {
        //            foreach (DataRow row in dtResult.Rows)
        //            {
        //                for (int j = 0; j < listKhieuNaiMoney.Count; j++)
        //                {
        //                    if (row["LoaiKhieuNaiId"].ToString() == listKhieuNaiMoney[j].LinhVucConId.ToString())
        //                    {
        //                        row[i] = listKhieuNaiMoney[j].SoTienFinal;
        //                        break;
        //                    }
        //                }
        //            }
        //        }
        //    } // end for(int i=1;i<=4;i++)     

        //    return dtResult;
        //}

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 28/11/2014
        /// Todo : Lấy dữ liệu toàn mạng của phòng CSKH
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="nguonKhieuNai">
        ///     -1 : all
        /// </param>
        /// <returns></returns>
        public DataTable GetTongHopKhieuNaiTheoLoaiKhieuNaiToanMang_Solr(int doiTacId, DateTime fromDateBefore, DateTime toDateBefore, DateTime fromDate, DateTime toDate, int nguonKhieuNai)
        {
            string sFromDateBefore = fromDateBefore.ToString("yyyyMMdd");
            string sToDateBefore = toDateBefore.ToString("yyyyMMdd");
            string sFromDate = fromDate.ToString("yyyyMMdd");
            string sToDate = toDate.ToString("yyyyMMdd");
            string sNextToDate = toDate.AddDays(1).ToString("yyyyMMdd");
            string whereClauseNguonKhieuNai = string.Empty;
            if (nguonKhieuNai != -1)
            {
                whereClauseNguonKhieuNai = string.Format(" AND KhieuNaiFrom:{0}", nguonKhieuNai);
            }

            DataTable dt = new DataTable();
            //List<DoiTacInfo> lstDoiTac = null;
            dt.Columns.Add("STT");
            dt.Columns.Add("LoaiKhieuNaiId");
            dt.Columns.Add("LoaiKhieuNai");
            dt.Columns.Add("LinhVucChungId");
            dt.Columns.Add("LinhVucChung");
            dt.Columns.Add("SLTiepNhanKyTruoc");
            dt.Columns.Add("SLTiepNhanTrongKy");
            dt.Columns.Add("TyLeTiepNhan");
            dt.Columns.Add("SLDaDongTrongKy");
            dt.Columns.Add("SLDaDong");
            dt.Columns.Add("SLQuaHanToanTrinh");
            dt.Columns.Add("SLQuaHanToanTrinhTrongKy");
            dt.Columns.Add("TyLe");

            List<LoaiKhieuNaiInfo> listLoaiKhieuNai = new LoaiKhieuNaiImpl().GetListDynamic("*", "Cap IN (1, 2) AND (Status=1 or Status=2)", "Sort ASC");
            if (listLoaiKhieuNai != null)
            {
                int indexSTT = 0;
                for (int i = 0; i < listLoaiKhieuNai.Count; i++)
                {
                    if (listLoaiKhieuNai[i].Cap == 1)
                    {
                        indexSTT++;
                        DataRow rowLevel1 = dt.NewRow();
                        rowLevel1["STT"] = indexSTT;
                        rowLevel1["LoaiKhieuNaiId"] = listLoaiKhieuNai[i].Id;
                        rowLevel1["LoaiKhieuNai"] = listLoaiKhieuNai[i].Name;
                        rowLevel1["LinhVucChungId"] = 0;
                        rowLevel1["LinhVucChung"] = "&nbsp;";
                        rowLevel1["SLTiepNhanKyTruoc"] = 0;
                        rowLevel1["SLTiepNhanTrongKy"] = 0;
                        rowLevel1["TyLeTiepNhan"] = 0;
                        rowLevel1["SLDaDongTrongKy"] = 0;
                        rowLevel1["SLDaDong"] = 0;
                        rowLevel1["SLQuaHanToanTrinh"] = 0;
                        rowLevel1["SLQuaHanToanTrinhTrongKy"] = 0;
                        rowLevel1["TyLe"] = 0;
                        dt.Rows.Add(rowLevel1);

                        for (int j = 0; j < listLoaiKhieuNai.Count; j++)
                        {
                            if (listLoaiKhieuNai[j].ParentId == listLoaiKhieuNai[i].Id)
                            {
                                DataRow row = dt.NewRow();
                                row["STT"] = 0;
                                row["LoaiKhieuNaiId"] = listLoaiKhieuNai[i].Id;
                                row["LoaiKhieuNai"] = listLoaiKhieuNai[i].Name;
                                row["LinhVucChungId"] = listLoaiKhieuNai[j].Id;
                                row["LinhVucChung"] = listLoaiKhieuNai[j].Name;
                                row["SLTiepNhanKyTruoc"] = 0;
                                row["SLTiepNhanTrongKy"] = 0;
                                row["TyLeTiepNhan"] = 0;
                                row["SLDaDongTrongKy"] = 0;
                                row["SLDaDong"] = 0;
                                row["SLQuaHanToanTrinh"] = 0;
                                row["SLQuaHanToanTrinhTrongKy"] = 0;
                                row["TyLe"] = 0;
                                dt.Rows.Add(row);
                            }
                        }
                    }
                }
            }
            else
            {
                return null;
            }

            SolrQuery solrQuery = null;
            QueryOptions qoKhieuNai = new QueryOptions();

            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"LoaiKhieuNaiId,LoaiKhieuNai");

            qoKhieuNai.ExtraParams = extraParamLoaiKhieuNai;

            qoKhieuNai.Start = 0;
            qoKhieuNai.Rows = 100;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetPivotQuery facetPivotQuery = new SolrFacetPivotQuery();
            List<string> listPivot = new List<string>();
            listPivot.Add("LoaiKhieuNaiId,LinhVucChungId");
            facetPivotQuery.Fields = listPivot;
            facetParam.Queries.Add(facetPivotQuery);
            qoKhieuNai.Facet = facetParam;

            List<string> listColumn = new List<string>();
            listColumn.Add("LoaiKhieuNaiId");
            listColumn.Add("LinhVucChungId");

            //Where điều kiện
            string whereClauseTiepNhanKyTruoc = string.Format("NgayTiepNhanSort:[{0} TO {1}] {2}", sFromDateBefore, sToDateBefore, whereClauseNguonKhieuNai);
            string whereClauseTiepNhanTrongKy = string.Format("NgayTiepNhanSort:[{0} TO {1}] {2}", sFromDate, sToDate, whereClauseNguonKhieuNai);
            string whereClauseDaDongTrongKy = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND NgayDongKNSort:[{0} TO {1}] {2}", sFromDate, sToDate, whereClauseNguonKhieuNai);
            string whereClauseDaDong = string.Format("NgayDongKNSort:[{0} TO {1}] {2}", sFromDate, sToDate, whereClauseNguonKhieuNai);
            string whereClauseQuaHanToanTrinhTrongKy = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND (NgayDongKNSort:[{2} TO *] OR NgayDongKNSort : 0) AND NgayQuaHanSort:[* TO {1}] {3}", sFromDate, sToDate, sNextToDate, whereClauseNguonKhieuNai);
            string whereClauseQuaHanToanTrinh = string.Format("(NgayDongKNSort:[{0} TO *] OR NgayDongKNSort : 0) AND NgayQuaHanSort:[* TO {1}] {2}", sNextToDate, sToDate, whereClauseNguonKhieuNai);

            if (doiTacId != DoiTacInfo.DoiTacIdValue.VNP)
            {
                whereClauseTiepNhanKyTruoc = string.Format("{0} AND KhuVucId : {1}", whereClauseTiepNhanKyTruoc, doiTacId);
                whereClauseTiepNhanTrongKy = string.Format("{0} AND KhuVucId : {1}", whereClauseTiepNhanTrongKy, doiTacId);
                whereClauseDaDongTrongKy = string.Format("{0} AND KhuVucXuLyId : {1}", whereClauseDaDongTrongKy, doiTacId);
                whereClauseDaDong = string.Format("{0} AND KhuVucXuLyId : {1}", whereClauseDaDong, doiTacId);
                whereClauseQuaHanToanTrinhTrongKy = string.Format("{0} AND KhuVucXuLyId : {1}", whereClauseQuaHanToanTrinhTrongKy, doiTacId);
                whereClauseQuaHanToanTrinh = string.Format("{0} AND KhuVucXuLyId : {1}", whereClauseQuaHanToanTrinh, doiTacId);
            }

            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            solrQuery = new SolrQuery(whereClauseTiepNhanKyTruoc);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            GetCountOfPivot2Level(dt, listColumn, "SLTiepNhanKyTruoc", listKhieuNaiInfo);

            solrQuery = new SolrQuery(whereClauseTiepNhanTrongKy);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            GetCountOfPivot2Level(dt, listColumn, "SLTiepNhanTrongKy", listKhieuNaiInfo);

            solrQuery = new SolrQuery(whereClauseDaDongTrongKy);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            GetCountOfPivot2Level(dt, listColumn, "SLDaDongTrongKy", listKhieuNaiInfo);

            solrQuery = new SolrQuery(whereClauseDaDong);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            GetCountOfPivot2Level(dt, listColumn, "SLDaDong", listKhieuNaiInfo);

            solrQuery = new SolrQuery(whereClauseQuaHanToanTrinhTrongKy);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            GetCountOfPivot2Level(dt, listColumn, "SLQuaHanToanTrinhTrongKy", listKhieuNaiInfo);

            solrQuery = new SolrQuery(whereClauseQuaHanToanTrinh);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            GetCountOfPivot2Level(dt, listColumn, "SLQuaHanToanTrinh", listKhieuNaiInfo);

            listKhieuNaiInfo = null;

            return dt;
        }

        //public DataTable GetTongHopKhieuNaiTheoLoaiKhieuNaiToanMang_Solr(int doiTacId, DateTime fromDate, DateTime toDate, int nguonKhieuNai)
        //{
        //    string sFromDate = fromDate.ToString("yyyyMMdd");
        //    string sToDate = toDate.ToString("yyyyMMdd");
        //    string sNextToDate = toDate.AddDays(1).ToString("yyyyMMdd");
        //    string whereClauseNguonKhieuNai = string.Empty;
        //    if(nguonKhieuNai != -1)
        //    {
        //        whereClauseNguonKhieuNai = string.Format(" AND KhieuNaiFrom:{0}", nguonKhieuNai);
        //    }

        //    DataTable dt = new DataTable();
        //    //List<DoiTacInfo> lstDoiTac = null;
        //    dt.Columns.Add("STT");
        //    dt.Columns.Add("LoaiKhieuNaiId");
        //    dt.Columns.Add("LoaiKhieuNai");
        //    dt.Columns.Add("SLTiepNhan");
        //    dt.Columns.Add("SLDaDongTrongKy");
        //    dt.Columns.Add("SLDaDong");
        //    dt.Columns.Add("SLQuaHanToanTrinh");
        //    dt.Columns.Add("SLQuaHanToanTrinhTrongKy");
        //    dt.Columns.Add("TyLe");

        //    List<LoaiKhieuNaiInfo> listLoaiKhieuNai = new LoaiKhieuNaiImpl().GetListDynamic("*", "ParentId=0", "Name ASC");
        //    if (listLoaiKhieuNai != null)
        //    {
        //        for (int i = 0; i < listLoaiKhieuNai.Count; i++)
        //        {
        //            DataRow row = dt.NewRow();
        //            row["STT"] = i + 1;
        //            row["LoaiKhieuNaiId"] = listLoaiKhieuNai[i].Id;
        //            row["LoaiKhieuNai"] = listLoaiKhieuNai[i].Name;
        //            row["SLTiepNhan"] = 0;
        //            row["SLDaDongTrongKy"] = 0;
        //            row["SLDaDong"] = 0;
        //            row["SLQuaHanToanTrinh"] = 0;
        //            row["SLQuaHanToanTrinhTrongKy"] = 0;
        //            row["TyLe"] = 0;
        //            dt.Rows.Add(row);
        //        }
        //    }
        //    else
        //    {
        //        return null;
        //    }

        //    SolrQuery solrQuery = null;
        //    QueryOptions qoKhieuNai = new QueryOptions();          

        //    //Lấy ra những trường nào
        //    var extraParamLoaiKhieuNai = new Dictionary<string, string>();
        //    extraParamLoaiKhieuNai.Add("fl", @"LoaiKhieuNaiId,LoaiKhieuNai");

        //    qoKhieuNai.ExtraParams = extraParamLoaiKhieuNai;

        //    qoKhieuNai.Start = 0;
        //    qoKhieuNai.Rows = 100;           

        //    FacetParameters fpLoaiKhieuNai = new FacetParameters();
        //    SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("LoaiKhieuNaiId");
        //    fpLoaiKhieuNai.Queries.Add(facetField);
        //    qoKhieuNai.Facet = fpLoaiKhieuNai;          

        //    //Where điều kiện
        //    string whereClauseTiepNhan = string.Format("NgayTiepNhanSort:[{0} TO {1}] {2}", sFromDate, sToDate, whereClauseNguonKhieuNai);
        //    string whereClauseDaDongTrongKy = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND NgayDongKNSort:[{0} TO {1}] {2}", sFromDate, sToDate, whereClauseNguonKhieuNai);
        //    string whereClauseDaDong = string.Format("NgayDongKNSort:[{0} TO {1}] {2}", sFromDate, sToDate, whereClauseNguonKhieuNai);
        //    string whereClauseQuaHanToanTrinhTrongKy = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND (NgayDongKNSort:[{2} TO *] OR NgayDongKNSort : 0) AND NgayQuaHanSort:[* TO {1}] {3}", sFromDate, sToDate, sNextToDate, whereClauseNguonKhieuNai);
        //    string whereClauseQuaHanToanTrinh = string.Format("(NgayDongKNSort:[{0} TO *] OR NgayDongKNSort : 0) AND NgayQuaHanSort:[* TO {1}] {2}", sNextToDate, sToDate, whereClauseNguonKhieuNai);

        //    if(doiTacId != DoiTacInfo.DoiTacIdValue.VNP)
        //    {
        //        whereClauseTiepNhan = string.Format("{0} AND KhuVucId : {1}", whereClauseTiepNhan, doiTacId);
        //        whereClauseDaDongTrongKy = string.Format("{0} AND KhuVucXuLyId : {1}", whereClauseDaDongTrongKy, doiTacId);
        //        whereClauseDaDong = string.Format("{0} AND KhuVucXuLyId : {1}", whereClauseDaDong, doiTacId);
        //        whereClauseQuaHanToanTrinhTrongKy = string.Format("{0} AND KhuVucXuLyId : {1}", whereClauseQuaHanToanTrinhTrongKy, doiTacId);
        //        whereClauseQuaHanToanTrinh = string.Format("{0} AND KhuVucXuLyId : {1}", whereClauseQuaHanToanTrinh, doiTacId);
        //    }

        //    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
        //    solrQuery = new SolrQuery(whereClauseTiepNhan);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
        //    GetCountOfFacet(dt, "LoaiKhieuNaiId", "SLTiepNhan", listKhieuNaiInfo);

        //    solrQuery = new SolrQuery(whereClauseDaDongTrongKy);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
        //    GetCountOfFacet(dt, "LoaiKhieuNaiId", "SLDaDongTrongKy", listKhieuNaiInfo);

        //    solrQuery = new SolrQuery(whereClauseDaDong);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
        //    GetCountOfFacet(dt, "LoaiKhieuNaiId", "SLDaDong", listKhieuNaiInfo);

        //    solrQuery = new SolrQuery(whereClauseQuaHanToanTrinhTrongKy);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
        //    GetCountOfFacet(dt, "LoaiKhieuNaiId", "SLQuaHanToanTrinhTrongKy", listKhieuNaiInfo);

        //    solrQuery = new SolrQuery(whereClauseQuaHanToanTrinh);
        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
        //    GetCountOfFacet(dt, "LoaiKhieuNaiId", "SLQuaHanToanTrinh", listKhieuNaiInfo);

        //    listKhieuNaiInfo = null;

        //    return dt;
        //}

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 08/01/2015
        /// Todo : Lấy báo cáo theo tuần của toàn hệ thống, kết hợp lấy báo cáo trong tháng và năm
        /// </summary>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="nguonKhieuNai">
        ///     -1 : all
        /// </param>
        /// <returns></returns>
        public DataTable GetTongHopKhieuNaiToanMangTheoTuan_Solr(DateTime fromDate, DateTime toDate, int nguonKhieuNai)
        {
            string sFromDate = fromDate.ToString("yyyyMMdd");
            string sToDate = toDate.ToString("yyyyMMdd");
            string sNextToDate = toDate.AddDays(1).ToString("yyyyMMdd");
            string sStartMonth = new DateTime(toDate.Year, toDate.Month, 1).ToString("yyyyMMdd");
            string sStartYear = new DateTime(toDate.Year, 1, 1).ToString("yyyyMMdd");
            string whereClauseNguonKhieuNai = string.Empty;
            if (nguonKhieuNai > -1)
            {
                whereClauseNguonKhieuNai = string.Format(" AND KhieuNaiFrom:{0}", nguonKhieuNai);
            }

            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("SLKhieuNaiTiepNhan");
            dtResult.Columns.Add("SLKNDaGiaiQuyet");
            dtResult.Columns.Add("SLKNQuaHan");
            dtResult.Columns.Add("TyLeQuaHan");
            dtResult.Columns.Add("SLKNDaGiaiQuyetTrongThang");
            dtResult.Columns.Add("SLKNDaGiaiQuyetTuDauNam");

            DataRow row = dtResult.NewRow();

            SolrQuery solrQuery = null;
            QueryOptions qoKhieuNai = new QueryOptions();
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiReportInfo = null;

            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"Id");

            qoKhieuNai.ExtraParams = extraParamLoaiKhieuNai;

            qoKhieuNai.Start = 0;
            qoKhieuNai.Rows = 10;

            //Where điều kiện
            string whereClauseTiepNhan = string.Format("NgayTiepNhanSort:[{0} TO {1}] {2}", sFromDate, sToDate, whereClauseNguonKhieuNai);
            string whereClauseDaDong = string.Format("NgayDongKNSort:[{0} TO {1}] AND TrangThai:3 {2}", sFromDate, sToDate, whereClauseNguonKhieuNai);
            //string whereClauseDaDong = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND NgayDongKNSort:[{0} TO {1}]", sFromDate, sToDate);
            //string whereClauseQuaHan = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND (((NgayDongKNSort:[{2} TO *] OR NgayDongKNSort : 0) AND NgayQuaHanSort:[* TO {1}]) OR (NgayDongKNSort:[* TO {1}] AND IsQuaHanToanTrinh:1))", sFromDate, sToDate, sNextToDate);
            string whereClauseQuaHan = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND (NgayDongKNSort:[{2} TO *] OR NgayDongKNSort : 0) AND NgayQuaHanSort:[* TO {1}] {3}", sFromDate, sToDate, sNextToDate, whereClauseNguonKhieuNai);
            string whereClauseDaDongTrongThang = string.Format("NgayDongKNSort:[{0} TO {1}] AND TrangThai:3 {2}", sStartMonth, sToDate, whereClauseNguonKhieuNai);
            string whereClauseDaDongTuDauNam = string.Format("NgayDongKNSort:[{0} TO {1}] AND TrangThai:3 {2}", sStartYear, sToDate, whereClauseNguonKhieuNai);

            solrQuery = new SolrQuery(whereClauseTiepNhan);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            row["SLKhieuNaiTiepNhan"] = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;

            solrQuery = new SolrQuery(whereClauseDaDong);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            row["SLKNDaGiaiQuyet"] = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;

            solrQuery = new SolrQuery(whereClauseQuaHan);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            row["SLKNQuaHan"] = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;

            if (Convert.ToDecimal(row["SLKhieuNaiTiepNhan"]) > 0)
            {
                row["TyLeQuaHan"] = ((Convert.ToDecimal(row["SLKNQuaHan"]) / Convert.ToDecimal(row["SLKhieuNaiTiepNhan"])) * 100).ToString("0.00");
            }

            solrQuery = new SolrQuery(whereClauseDaDongTrongThang);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            row["SLKNDaGiaiQuyetTrongThang"] = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;

            solrQuery = new SolrQuery(whereClauseDaDongTuDauNam);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            row["SLKNDaGiaiQuyetTuDauNam"] = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;

            dtResult.Rows.Add(row);

            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 08/01/2015
        /// Todo : Báo cáo tổng hợp theo tháng
        /// </summary>
        /// <param name="toDate"></param>
        /// <param name="nguonKhieuNai">
        ///     -1 : all
        /// </param>
        /// <returns></returns>
        public DataTable GetTongHopKhieuNaiToanMangTheoThang_Solr(DateTime toDate, int nguonKhieuNai)
        {
            string sFromDate = new DateTime(toDate.Year, toDate.Month, 1).ToString("yyyyMMdd");
            string sToDate = new DateTime(toDate.Year, toDate.Month, DateTime.DaysInMonth(toDate.Year, toDate.Month)).ToString("yyyyMMdd");

            DateTime nextToDate = toDate.AddMonths(1);
            string sNextToDate = new DateTime(nextToDate.Year, nextToDate.Month, 1).ToString("yyyyMMdd");

            DateTime previousDate = toDate.AddMonths(-1);
            string sPreviousFromDate = new DateTime(previousDate.Year, previousDate.Month, 1).ToString("yyyyMMdd");
            string sPreviousToDate = new DateTime(previousDate.Year, previousDate.Month, DateTime.DaysInMonth(previousDate.Year, previousDate.Month)).ToString("yyyyMMdd");

            string sFromYear = new DateTime(toDate.Year, 1, 1).ToString("yyyyMMdd");
            string sToYear = new DateTime(toDate.Year, toDate.Month, DateTime.DaysInMonth(toDate.Year, toDate.Month)).ToString("yyyyMMdd");

            string whereClauseNguonKhieuNai = string.Empty;
            if (nguonKhieuNai > -1)
            {
                whereClauseNguonKhieuNai = string.Format(" AND KhieuNaiFrom:{0}", nguonKhieuNai);
            }

            decimal soLuongDaGiaiQuyetThangNay = 0;
            decimal soLuongDaGiaiQuyetThangTruoc = 0;
            decimal soLuongQuaHanThangNay = 0;
            decimal soLuongQuaHanThangTruoc = 0;
            decimal soLuongTiepNhanThangNay = 0;
            decimal soLuongTiepNhanThangTruoc = 0;

            string colGiaiQuyetThangNay = "SLDaGiaiQuyetThangNay";
            string colGiaiQuyetThangTruoc = "SLDaGiaiQuyetThangTruoc";
            string colTyLeGiaiQuyet = "TyLeGiaiQuyet";
            string colSLQuaHanThangNay = "SLQuaHanThangNay";
            string colSLQuaHanThangTruocTruoc = "SLQuaHanThangTruoc";
            string colTyLeQuaHanThangNay = "TyLeQuaHanThangNay";
            string colTyLeQuaHanThangTruoc = "TyLeQuaHanThangTruoc";
            string colLuyKeGiaiQuyetTuDauNam = "LuyKeGiaiQuyetTuDauNam";

            DataTable dtResult = new DataTable();
            dtResult.Columns.Add(colGiaiQuyetThangNay);
            dtResult.Columns.Add(colGiaiQuyetThangTruoc);
            dtResult.Columns.Add(colTyLeGiaiQuyet);
            dtResult.Columns.Add(colSLQuaHanThangNay);
            dtResult.Columns.Add(colSLQuaHanThangTruocTruoc);
            dtResult.Columns.Add(colTyLeQuaHanThangNay);
            dtResult.Columns.Add(colTyLeQuaHanThangTruoc);
            dtResult.Columns.Add(colLuyKeGiaiQuyetTuDauNam);

            DataRow row = dtResult.NewRow();


            SolrQuery solrQuery = null;
            QueryOptions qoKhieuNai = new QueryOptions();
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiReportInfo = null;

            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"Id");

            qoKhieuNai.ExtraParams = extraParamLoaiKhieuNai;

            qoKhieuNai.Start = 0;
            qoKhieuNai.Rows = 10;

            //Where điều kiện
            string whereClauseSLDaGiaiQuyetThangNay = string.Format("NgayDongKNSort:[{0} TO {1}] AND TrangThai:3 {2}", sFromDate, sToDate, whereClauseNguonKhieuNai);
            string whereClauseSLDaGiaiQuyetThangTruoc = string.Format("NgayDongKNSort:[{0} TO {1}] AND TrangThai:3 {2}", sPreviousFromDate, sPreviousToDate, whereClauseNguonKhieuNai);
            //string whereClauseQuaHanThangNay = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND (((NgayDongKNSort:[{2} TO *] OR NgayDongKNSort : 0) AND NgayQuaHanSort:[* TO {1}]) OR (NgayDongKNSort:[* TO {1}] AND IsQuaHanToanTrinh:1))", sFromDate, sToDate, sNextToDate);
            //string whereClauseQuaHanThangTruoc = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND (((NgayDongKNSort:[{2} TO *] OR NgayDongKNSort : 0) AND NgayQuaHanSort:[* TO {1}]) OR (NgayDongKNSort:[* TO {1}] AND IsQuaHanToanTrinh:1))", sPreviousFromDate, sPreviousToDate, sFromDate);            
            string whereClauseQuaHanThangNay = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND (NgayDongKNSort:[{2} TO *] OR NgayDongKNSort : 0) AND NgayQuaHanSort:[* TO {1}] {3}", sFromDate, sToDate, sNextToDate, whereClauseNguonKhieuNai);
            string whereClauseQuaHanThangTruoc = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND (NgayDongKNSort:[{2} TO *] OR NgayDongKNSort : 0) AND NgayQuaHanSort:[* TO {1}] {3}", sPreviousFromDate, sPreviousToDate, sFromDate, whereClauseNguonKhieuNai);
            string whereClauseDaDongTuDauNam = string.Format("NgayDongKNSort:[{0} TO {1}] AND TrangThai:3 {2}", sFromYear, sToYear, whereClauseNguonKhieuNai);
            string whereClauseSLTiepNhanThangNay = string.Format("NgayTiepNhanSort:[{0} TO {1}] {2}", sFromDate, sToDate, whereClauseNguonKhieuNai);
            string whereClauseSLTiepNhanThangTruoc = string.Format("NgayTiepNhanSort:[{0} TO {1}] {2}", sPreviousFromDate, sPreviousToDate, whereClauseNguonKhieuNai);

            solrQuery = new SolrQuery(whereClauseSLDaGiaiQuyetThangNay);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            row[colGiaiQuyetThangNay] = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;
            soLuongDaGiaiQuyetThangNay = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;

            solrQuery = new SolrQuery(whereClauseSLDaGiaiQuyetThangTruoc);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            row[colGiaiQuyetThangTruoc] = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;
            soLuongDaGiaiQuyetThangTruoc = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;

            solrQuery = new SolrQuery(whereClauseQuaHanThangNay);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            row[colSLQuaHanThangNay] = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;
            soLuongQuaHanThangNay = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;

            solrQuery = new SolrQuery(whereClauseQuaHanThangTruoc);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            row[colSLQuaHanThangTruocTruoc] = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;
            soLuongQuaHanThangTruoc = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;

            solrQuery = new SolrQuery(whereClauseDaDongTuDauNam);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            row[colLuyKeGiaiQuyetTuDauNam] = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;

            solrQuery = new SolrQuery(whereClauseSLTiepNhanThangNay);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            soLuongTiepNhanThangNay = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;

            solrQuery = new SolrQuery(whereClauseSLTiepNhanThangTruoc);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            soLuongTiepNhanThangTruoc = listKhieuNaiReportInfo != null ? listKhieuNaiReportInfo.NumFound : 0;

            row[colTyLeGiaiQuyet] = soLuongDaGiaiQuyetThangTruoc == 0 ? "0" : ((soLuongDaGiaiQuyetThangNay - soLuongDaGiaiQuyetThangTruoc) * 100 / soLuongDaGiaiQuyetThangTruoc).ToString("0.00");
            row[colTyLeQuaHanThangNay] = soLuongTiepNhanThangNay == 0 ? "0" : (soLuongQuaHanThangNay * 100 / soLuongTiepNhanThangNay).ToString("0.00");
            row[colTyLeQuaHanThangTruoc] = soLuongTiepNhanThangTruoc == 0 ? "0" : (soLuongQuaHanThangTruoc * 100 / soLuongTiepNhanThangTruoc).ToString("0.00");

            dtResult.Rows.Add(row);

            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 17/01/2015
        /// Todo : BÁ
        /// </summary>
        /// <param name="khuVucId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopGiamTruToanMang_Solr(DateTime fromDate, DateTime toDate)
        {
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("KhuVucId");
            dtResult.Columns.Add("TenKhuVuc");
            dtResult.Columns.Add("SoTienGiamTru");

            DataRow row = dtResult.NewRow();
            row["KhuVucId"] = DoiTacInfo.DoiTacIdValue.VNP1;
            row["TenKhuVuc"] = "Khu vực 1";
            row["SoTienGiamTru"] = 0;
            dtResult.Rows.Add(row);

            row = dtResult.NewRow();
            row["KhuVucId"] = DoiTacInfo.DoiTacIdValue.VNP2;
            row["TenKhuVuc"] = "Khu vực 2";
            row["SoTienGiamTru"] = 0;
            dtResult.Rows.Add(row);

            row = dtResult.NewRow();
            row["KhuVucId"] = DoiTacInfo.DoiTacIdValue.VNP3;
            row["TenKhuVuc"] = "Khu vực 3";
            row["SoTienGiamTru"] = 0;
            dtResult.Rows.Add(row);

            string whereClause = string.Format("NgayDongKNSort:[{0} TO {1}] AND -LoaiTien:5", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            QueryOptions queryOptionPost = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamPost = new Dictionary<string, string>();
            extraParamPost.Add("fl", @"");

            queryOptionPost.ExtraParams = extraParamPost;

            queryOptionPost.Start = 0;
            queryOptionPost.Rows = LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count;

            FacetParameters fpPost = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("DoiTacXuLyId");
            fpPost.Queries.Add(facetField);
            queryOptionPost.Facet = fpPost;

            StatsParameters spPost = new StatsParameters();
            spPost.AddFacet("DoiTacXuLyId");
            spPost.AddField("SoTienFinal");
            queryOptionPost.Stats = spPost;

            SolrQuery solrQuery = new SolrQuery(whereClause);
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOptionPost);

            List<string> listKhieuNaiId = new List<string>();
            List<KhieuNai_ReportInfo> listKhieuNaiMoney = new List<KhieuNai_ReportInfo>();

            foreach (var kv in listKhieuNaiInfo.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Data, SoTienKhauTru_Khac
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        int fvKey = ConvertUtility.ToInt32(fv.Key);
                        KhieuNai_ReportInfo reportInfo = new KhieuNai_ReportInfo();

                        if (!listKhieuNaiId.Contains(fv.Key))
                        {

                            int doiTacXuLyId = ConvertUtility.ToInt32(fv.Key);
                            reportInfo.DoiTacXuLyId = doiTacXuLyId;
                            reportInfo.SoLuongGiamTru = ConvertUtility.ToInt32(fv.Value.Count);
                            reportInfo.SoTienFinal = (decimal)fv.Value.Sum;

                            listKhieuNaiId.Add(fv.Key);
                            listKhieuNaiMoney.Add(reportInfo);
                        } // end if (!listKhieuNaiId.Contains(fv.Key))
                        else
                        {
                            for (int i = 0; i < listKhieuNaiMoney.Count; i++)
                            {
                                if (listKhieuNaiMoney[i].DoiTacXuLyId.ToString() == fv.Key)
                                {
                                    listKhieuNaiMoney[i].SoTienFinal = (decimal)fv.Value.Sum;
                                }
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)               

            if (listKhieuNaiMoney != null && listKhieuNaiMoney.Count > 0)
            {
                foreach (DataRow curRow in dtResult.Rows)
                {
                    for (int i = 0; i < DoiTacImpl.ListDoiTac.Count; i++)
                    {
                        if (curRow["KhuVucId"].ToString() == DoiTacImpl.ListDoiTac[i].DonViTrucThuoc.ToString())
                        {
                            for (int j = 0; j < listKhieuNaiMoney.Count; j++)
                            {
                                if (DoiTacImpl.ListDoiTac[i].Id == listKhieuNaiMoney[j].DoiTacXuLyId)
                                {
                                    curRow["SoTienGiamTru"] = ConvertUtility.ToDecimal(curRow["SoTienGiamTru"]) + listKhieuNaiMoney[j].SoTienFinal;
                                }
                            }
                        }
                    }

                }

            }

            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date  : 27/05/2015
        /// </summary>
        /// <param name="khuVucId"></param>
        /// <param name="doiTacId"></param>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="nguonKhieuNai"></param>
        /// <param name="listLoaiKhieuNaiId"></param>
        /// <returns></returns>
        public DataTable ThongKeKNTheoLoaiKhieuNaiVaNguyenNhanLoi_PCL_Solr(int khuVucId, int doiTacId, int phongBanXuLyId, DateTime fromDate, DateTime toDate, int nguonKhieuNai, List<int> listLoaiKhieuNaiId)
        {
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("LoaiKhieuNaiId");
            dtResult.Columns.Add("LoaiKhieuNai");
            dtResult.Columns.Add("SLTiepNhan");
            dtResult.Columns.Add("SLDaDong");

            List<LoiKhieuNaiInfo> listLoiKhieuNaiInfo = new LoiKhieuNaiImpl().GetListSortHierarchy();
            for (int i = 0; i < listLoiKhieuNaiInfo.Count; i++)
            {
                if (listLoiKhieuNaiInfo[i].Cap == 1)
                {
                    dtResult.Columns.Add(listLoiKhieuNaiInfo[i].Id.ToString());
                    List<LoiKhieuNaiInfo> listLoiKhieuNaiCap2 = listLoiKhieuNaiInfo.FindAll(delegate (LoiKhieuNaiInfo obj)
                    { return obj.ParentId == listLoiKhieuNaiInfo[i].Id; });
                    if (listLoiKhieuNaiCap2 != null && listLoiKhieuNaiCap2.Count > 0)
                    {
                        // Chi tiết lỗi khác
                        dtResult.Columns.Add(listLoiKhieuNaiInfo[i].Id.ToString() + "_0");

                        for (int j = 0; j < listLoiKhieuNaiCap2.Count; j++)
                        {
                            dtResult.Columns.Add(listLoiKhieuNaiCap2[j].Id.ToString());
                        }
                    } // end if (listLoiKhieuNaiCap2 != null && listLoiKhieuNaiCap2.Count > 0)
                } // end if(listLoiKhieuNaiInfo[i].Cap == 1)                
            }


            List<DoiTacInfo> listDoiTac = null;
            string whereClauseDonViTiepNhan = string.Empty;
            string whereClauseDonViXuLy = string.Empty;
            string whereClauseNguonKhieuNai = string.Empty;

            if (phongBanXuLyId > 0)
            {
                whereClauseDonViTiepNhan = string.Format(" AND PhongBanId : {0}", phongBanXuLyId);
                whereClauseDonViXuLy = string.Format(" AND PhongBanXuLyId : {0}", phongBanXuLyId);
            }
            else if (doiTacId > 0)
            {
                whereClauseDonViTiepNhan = string.Format(" AND DoiTacId : {0}", doiTacId);
                whereClauseDonViXuLy = string.Format(" AND DoiTacXuLyId : {0}", doiTacId);
            }
            else if (khuVucId != DoiTacInfo.DoiTacIdValue.VNP)
            {
                listDoiTac = new DoiTacImpl().GetListByDonViTrucThuoc(khuVucId);
                if (listDoiTac != null && listDoiTac.Count > 0)
                {
                    whereClauseDonViTiepNhan = listDoiTac[0].Id.ToString();
                    for (int i = 1; i < listDoiTac.Count; i++)
                    {
                        whereClauseDonViTiepNhan = string.Format("{0} {1}", whereClauseDonViTiepNhan, listDoiTac[i].Id);
                    }

                    whereClauseDonViXuLy = whereClauseDonViTiepNhan;

                    whereClauseDonViTiepNhan = string.Format(" AND DoiTacId : ({0})", whereClauseDonViTiepNhan);
                    whereClauseDonViXuLy = string.Format(" AND DoiTacXuLyId : ({0})", whereClauseDonViXuLy);
                }
            }

            if (nguonKhieuNai > -1)
            {
                whereClauseNguonKhieuNai = string.Format(" AND KhieuNaiFrom:{0}", nguonKhieuNai);
            }

            string sFromDate = ConvertUtility.ConvertDateTimeToSolr(fromDate);
            string sToDate = ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999);

            string whereClauseLoaiKhieuNai = string.Empty;
            //if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
            //{
            //    whereClauseLoaiKhieuNai = listLoaiKhieuNaiId[0].ToString();
            //    for (int i = 1; i < listLoaiKhieuNaiId.Count; i++)
            //    {
            //        whereClauseLoaiKhieuNai = string.Format("{0} {1}", whereClauseLoaiKhieuNai, listLoaiKhieuNaiId[i]);
            //    }                

            //    whereClauseLoaiKhieuNai = string.Format(" AND LoaiKhieuNaiId : ({0})", whereClauseLoaiKhieuNai);

            //}

            List<LoaiKhieuNaiInfo> listLoaiKhieuNaiInfo = new LoaiKhieuNaiImpl().GetListDynamic("*", "ParentId=0", "Name ASC");
            if (listLoaiKhieuNaiInfo != null)
            {
                if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
                {
                    for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
                    {
                        if (listLoaiKhieuNaiId.Contains(listLoaiKhieuNaiInfo[i].Id))
                        {
                            DataRow row = dtResult.NewRow();
                            row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
                            row["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;

                            dtResult.Rows.Add(row);
                        }
                    }
                } // end  if(listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
                else
                {
                    for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
                    {
                        DataRow row = dtResult.NewRow();
                        row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
                        row["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;

                        dtResult.Rows.Add(row);
                    }
                }
            } // end if (listLoaiKhieuNaiInfo != null)

            // listKhieuNaiIdTiepNhan : Danh sách KhieuNaiId được tiếp nhận
            List<int> listKhieuNaiIdTiepNhan = new List<int>();

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] {2} {3} {4}", sFromDate, sToDate, whereClauseLoaiKhieuNai, whereClauseDonViTiepNhan, whereClauseNguonKhieuNai);
            solrQuery = new SolrQuery(whereClauseTiepNhan);
            QueryOptions qoTiepNhan = new QueryOptions();
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"Id, LoaiKhieuNaiId");
            qoTiepNhan.ExtraParams = extraParamTiepNhan;
            qoTiepNhan.Start = 0;
            qoTiepNhan.Rows = int.MaxValue;

            string facetFieldQuery = "LoaiKhieuNaiId";
            FacetParameters facetParam = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery(facetFieldQuery);
            facetParam.Queries.Add(facetField);
            qoTiepNhan.Facet = facetParam;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                GetCountOfFacet(dtResult, "LoaiKhieuNaiId", "SLTiepNhan", listKhieuNaiInfo);
            }

            // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
            string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NgayTiepNhan : [{0} TO {1}] AND TrangThai:3 {2} {3}", sFromDate, sToDate, whereClauseDonViXuLy, whereClauseNguonKhieuNai);
            solrQuery = new SolrQuery(whereClauseDaDong);
            QueryOptions qoDongKN = new QueryOptions();
            var extraParamDongKN = new Dictionary<string, string>();
            extraParamDongKN.Add("fl", @"Id, LoaiKhieuNaiId");
            qoDongKN.ExtraParams = extraParamDongKN;
            qoDongKN.Start = 0;
            qoDongKN.Rows = int.MaxValue;

            facetParam = new FacetParameters();
            SolrFacetPivotQuery facetPivotQuery = new SolrFacetPivotQuery();
            List<string> listPivot = new List<string>();
            listPivot.Add("LoaiKhieuNaiId,LyDoGiamTru,ChiTietLoiId");
            facetPivotQuery.Fields = listPivot;
            facetParam.Queries.Add(facetPivotQuery);
            qoDongKN.Facet = facetParam;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoDongKN);
            if (listKhieuNaiInfo != null)
            {
                foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
                {
                    foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
                    {
                        foreach (DataRow row in dtResult.Rows)
                        {
                            if (row["LoaiKhieuNaiId"].ToString() == itemLoaiKhieuNai.Value)
                            {
                                //if(itemLoaiKhieuNai.Value == "71")
                                //{

                                //}

                                row["SLDaDong"] = itemLoaiKhieuNai.Count;

                                if (itemLoaiKhieuNai.HasChildPivots)
                                {
                                    foreach (var itemLyDoGiamTru in itemLoaiKhieuNai.ChildPivots)
                                    {
                                        if (itemLyDoGiamTru.Value == "0")
                                        {
                                            row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()] = ConvertUtility.ToInt32(row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()], 0) + itemLyDoGiamTru.Count;
                                        }
                                        else if (itemLyDoGiamTru.HasChildPivots)
                                        {
                                            if (itemLyDoGiamTru.Value == LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString())
                                            {
                                                row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()] = ConvertUtility.ToInt32(row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()], 0) + itemLyDoGiamTru.Count;
                                            }
                                            else
                                            {
                                                row[itemLyDoGiamTru.Value] = itemLyDoGiamTru.Count;
                                            }

                                            foreach (var itemChiTietLoi in itemLyDoGiamTru.ChildPivots)
                                            {
                                                if (itemChiTietLoi.Value == "-1")
                                                {
                                                    if (itemLyDoGiamTru.Value != "0")
                                                    {
                                                        row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()] = ConvertUtility.ToInt32(row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()], 0) + itemChiTietLoi.Count;
                                                    }
                                                    continue;
                                                }

                                                if (itemChiTietLoi.Value == "0")
                                                {
                                                    if (dtResult.Columns.Contains(itemLyDoGiamTru.Value + "_0"))
                                                    {
                                                        row[itemLyDoGiamTru.Value + "_0"] = itemChiTietLoi.Count;
                                                    }
                                                }
                                                else
                                                {
                                                    row[itemChiTietLoi.Value] = itemChiTietLoi.Count;
                                                }
                                            } // end foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)

                                        } // end if (itemLinhVucChung.HasChildPivots)
                                    } // end foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                                } // end if (itemLoaiKhieuNai.HasChildPivots)

                                break;
                            } // end if(row["LoaiKhieuNaiId"].ToString() == itemLoaiKhieuNai.Value)

                        } // end foreach(DataRow row in dtResult.Rows)    
                    } // end foreach (var itemLoaiKhieuNai in pivot.Value)

                } // end foreach (var pivot in listKhieuNaiInfo.FacetPivots)
            }

            DataRow rowTotal = dtResult.NewRow();
            foreach (DataColumn col in dtResult.Columns)
            {
                int total = 0;
                foreach (DataRow row in dtResult.Rows)
                {
                    total = total + ConvertUtility.ToInt32(row[col], 0);
                }

                rowTotal[col] = total;
            }

            dtResult.Rows.InsertAt(rowTotal, 0);

            dtResult.ImportRow(rowTotal);
            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 27/06/2015
        /// </summary>
        /// <param name="khuVucId"></param>
        /// <param name="doiTacId"></param>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="nguonKhieuNai"></param>
        /// <param name="listLoaiKhieuNaiId"></param>
        /// <param name="listLinhVucChungId"></param>
        /// <returns></returns>
        public DataTable ThongKeKNTheoLoaiKhieuNaiVaNguyenNhanLoi_PCL_Solr(int khuVucId, int doiTacId, int phongBanXuLyId, DateTime fromDate, DateTime toDate, int nguonKhieuNai, List<int> listLoaiKhieuNaiId, List<int> listLinhVucChungId)
        {
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("LoaiKhieuNaiId");
            dtResult.Columns.Add("LoaiKhieuNai");
            dtResult.Columns.Add("LinhVucChungId");
            dtResult.Columns.Add("LinhVucChung");
            dtResult.Columns.Add("SLTiepNhan");
            dtResult.Columns.Add("SLDaDong");

            List<LoiKhieuNaiInfo> listLoiKhieuNaiInfo = new LoiKhieuNaiImpl().GetListSortHierarchy();
            for (int i = 0; i < listLoiKhieuNaiInfo.Count; i++)
            {
                if (listLoiKhieuNaiInfo[i].Cap == 1)
                {
                    dtResult.Columns.Add(listLoiKhieuNaiInfo[i].Id.ToString());
                    List<LoiKhieuNaiInfo> listLoiKhieuNaiCap2 = listLoiKhieuNaiInfo.FindAll(delegate (LoiKhieuNaiInfo obj)
                    { return obj.ParentId == listLoiKhieuNaiInfo[i].Id; });
                    if (listLoiKhieuNaiCap2 != null && listLoiKhieuNaiCap2.Count > 0)
                    {
                        // Chi tiết lỗi khác
                        dtResult.Columns.Add(listLoiKhieuNaiInfo[i].Id.ToString() + "_0");

                        for (int j = 0; j < listLoiKhieuNaiCap2.Count; j++)
                        {
                            dtResult.Columns.Add(listLoiKhieuNaiCap2[j].Id.ToString());
                        }
                    } // end if (listLoiKhieuNaiCap2 != null && listLoiKhieuNaiCap2.Count > 0)
                } // end if(listLoiKhieuNaiInfo[i].Cap == 1)                
            }


            List<DoiTacInfo> listDoiTac = null;
            string whereClauseDonViTiepNhan = string.Empty;
            string whereClauseDonViXuLy = string.Empty;
            string whereClauseNguonKhieuNai = string.Empty;

            if (phongBanXuLyId > 0)
            {
                whereClauseDonViTiepNhan = string.Format(" AND PhongBanId : {0}", phongBanXuLyId);
                whereClauseDonViXuLy = string.Format(" AND PhongBanXuLyId : {0}", phongBanXuLyId);
            }
            else if (doiTacId > 0)
            {
                whereClauseDonViTiepNhan = string.Format(" AND DoiTacId : {0}", doiTacId);
                whereClauseDonViXuLy = string.Format(" AND DoiTacXuLyId : {0}", doiTacId);
            }
            else if (khuVucId != DoiTacInfo.DoiTacIdValue.VNP)
            {
                listDoiTac = new DoiTacImpl().GetListByDonViTrucThuoc(khuVucId);
                if (listDoiTac != null && listDoiTac.Count > 0)
                {
                    whereClauseDonViTiepNhan = listDoiTac[0].Id.ToString();
                    for (int i = 1; i < listDoiTac.Count; i++)
                    {
                        whereClauseDonViTiepNhan = string.Format("{0} {1}", whereClauseDonViTiepNhan, listDoiTac[i].Id);
                    }

                    whereClauseDonViXuLy = whereClauseDonViTiepNhan;

                    whereClauseDonViTiepNhan = string.Format(" AND DoiTacId : ({0})", whereClauseDonViTiepNhan);
                    whereClauseDonViXuLy = string.Format(" AND DoiTacXuLyId : ({0})", whereClauseDonViXuLy);
                }
            }

            if (nguonKhieuNai > -1)
            {
                whereClauseNguonKhieuNai = string.Format(" AND KhieuNaiFrom:{0}", nguonKhieuNai);
            }

            string sFromDate = ConvertUtility.ConvertDateTimeToSolr(fromDate);
            string sToDate = ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999);

            List<LoaiKhieuNaiInfo> listLoaiKhieuNaiInfo = new LoaiKhieuNaiImpl().GetListDynamic("*", "(Status=1 or Status=2) AND Cap IN (1, 2)", "Sort ASC");
            if (listLoaiKhieuNaiInfo != null && listLoaiKhieuNaiInfo.Count > 0)
            {
                // 
                for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
                {
                    if (listLoaiKhieuNaiInfo[i].Cap == 1)
                    {
                        if (listLoaiKhieuNaiId.Count > 0 && !listLoaiKhieuNaiId.Contains(listLoaiKhieuNaiInfo[i].Id))
                        {
                            listLoaiKhieuNaiInfo.RemoveAt(i);
                            i--;
                        }
                    }
                    else if (listLoaiKhieuNaiInfo[i].Cap == 2)
                    {
                        if (listLinhVucChungId.Count > 0 && !listLinhVucChungId.Contains(listLoaiKhieuNaiInfo[i].Id))
                        {
                            listLoaiKhieuNaiInfo.RemoveAt(i);
                            i--;
                        }
                    }
                }

                for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
                {
                    if (listLoaiKhieuNaiInfo[i].Cap == 1)
                    {
                        DataRow row = dtResult.NewRow();

                        row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
                        row["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;
                        row["LinhVucChungId"] = 0;
                        row["LinhVucChung"] = "";
                        dtResult.Rows.Add(row);

                        for (int j = 0; j < listLoaiKhieuNaiInfo.Count; j++)
                        {
                            if (listLoaiKhieuNaiInfo[j].ParentId == listLoaiKhieuNaiInfo[i].Id)
                            {
                                row = dtResult.NewRow();
                                row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
                                row["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;
                                row["LinhVucChungId"] = listLoaiKhieuNaiInfo[j].Id;
                                row["LinhVucChung"] = listLoaiKhieuNaiInfo[j].Name;
                                dtResult.Rows.Add(row);
                            }
                        }
                    }
                } // end for(int i=0;i<listLoaiKhieuNaiInfo.Count;i++)
            } // end if(listLoaiKhieuNaiInfo != null && listLoaiKhieuNaiInfo.Count > 0)          

            // listKhieuNaiIdTiepNhan : Danh sách KhieuNaiId được tiếp nhận
            List<int> listKhieuNaiIdTiepNhan = new List<int>();

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] {2} {3}", sFromDate, sToDate, whereClauseDonViTiepNhan, whereClauseNguonKhieuNai);
            solrQuery = new SolrQuery(whereClauseTiepNhan);
            QueryOptions qoTiepNhan = new QueryOptions();
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"Id, LoaiKhieuNaiId");
            qoTiepNhan.ExtraParams = extraParamTiepNhan;
            qoTiepNhan.Start = 0;
            qoTiepNhan.Rows = 0;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetPivotQuery facetPivotQuery = new SolrFacetPivotQuery();
            List<string> listPivot = new List<string>();
            listPivot.Add("LoaiKhieuNaiId,LinhVucChungId");
            facetPivotQuery.Fields = listPivot;
            facetParam.Queries.Add(facetPivotQuery);
            qoTiepNhan.Facet = facetParam;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
                {
                    foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
                    {
                        if (itemLoaiKhieuNai.HasChildPivots)
                        {
                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                            {
                                foreach (DataRow row in dtResult.Rows)
                                {
                                    if (row["LoaiKhieuNaiId"].ToString() == itemLoaiKhieuNai.Value && row["LinhVucChungId"].ToString() == itemLinhVucChung.Value)
                                    {
                                        row["SLTiepNhan"] = itemLinhVucChung.Count;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
            string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NgayTiepNhan : [{0} TO {1}] AND TrangThai:3 {2} {3}", sFromDate, sToDate, whereClauseDonViXuLy, whereClauseNguonKhieuNai);
            solrQuery = new SolrQuery(whereClauseDaDong);
            QueryOptions qoDongKN = new QueryOptions();
            var extraParamDongKN = new Dictionary<string, string>();
            extraParamDongKN.Add("fl", @"Id, LoaiKhieuNaiId");
            qoDongKN.ExtraParams = extraParamDongKN;
            qoDongKN.Start = 0;
            qoDongKN.Rows = 0;

            facetParam = new FacetParameters();
            facetPivotQuery = new SolrFacetPivotQuery();
            listPivot = new List<string>();
            listPivot.Add("LoaiKhieuNaiId,LinhVucChungId,LyDoGiamTru,ChiTietLoiId");
            facetPivotQuery.Fields = listPivot;
            facetParam.Queries.Add(facetPivotQuery);
            qoDongKN.Facet = facetParam;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoDongKN);
            if (listKhieuNaiInfo != null)
            {
                foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
                {
                    foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
                    {
                        if (itemLoaiKhieuNai.HasChildPivots)
                        {
                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                            {
                                foreach (DataRow row in dtResult.Rows)
                                {
                                    //if (itemLoaiKhieuNai.Value == "71")
                                    //{

                                    //}

                                    if (row["LoaiKhieuNaiId"].ToString() == itemLoaiKhieuNai.Value && row["LinhVucChungId"].ToString() == itemLinhVucChung.Value)
                                    {
                                        row["SLDaDong"] = itemLinhVucChung.Count;

                                        foreach (var itemLyDoGiamTru in itemLinhVucChung.ChildPivots)
                                        {
                                            if (itemLyDoGiamTru.Value == "0")
                                            {
                                                row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()] = ConvertUtility.ToInt32(row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()], 0) + itemLyDoGiamTru.Count;
                                            }
                                            else if (itemLyDoGiamTru.HasChildPivots)
                                            {
                                                if (itemLyDoGiamTru.Value == LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString())
                                                {
                                                    row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()] = ConvertUtility.ToInt32(row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()], 0) + itemLyDoGiamTru.Count;
                                                }
                                                else
                                                {
                                                    row[itemLyDoGiamTru.Value] = itemLyDoGiamTru.Count;
                                                }

                                                foreach (var itemChiTietLoi in itemLyDoGiamTru.ChildPivots)
                                                {
                                                    if (itemChiTietLoi.Value == "-1")
                                                    {
                                                        if (itemLyDoGiamTru.Value != "0")
                                                        {
                                                            row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()] = ConvertUtility.ToInt32(row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()], 0) + itemChiTietLoi.Count;
                                                        }
                                                        continue;
                                                    }

                                                    if (itemChiTietLoi.Value == "0")
                                                    {
                                                        if (dtResult.Columns.Contains(itemLyDoGiamTru.Value + "_0"))
                                                        {
                                                            row[itemLyDoGiamTru.Value + "_0"] = itemChiTietLoi.Count;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        row[itemChiTietLoi.Value] = itemChiTietLoi.Count;
                                                    }
                                                } // end foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)

                                            } // end if (itemLinhVucChung.HasChildPivots)
                                        } // end foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                                    }
                                }
                            }// end foreach(var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)                                    
                        } // end if (itemLoaiKhieuNai.HasChildPivots)

                        //break;                          
                    } // end foreach (var itemLoaiKhieuNai in pivot.Value)

                } // end foreach (var pivot in listKhieuNaiInfo.FacetPivots)
            }

            DataRow rowTotal = dtResult.NewRow();
            foreach (DataColumn col in dtResult.Columns)
            {
                int total = 0;
                foreach (DataRow row in dtResult.Rows)
                {
                    total = total + ConvertUtility.ToInt32(row[col], 0);
                }

                rowTotal[col] = total;
            }

            dtResult.Rows.InsertAt(rowTotal, 0);

            dtResult.ImportRow(rowTotal);
            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 27/06/2015
        /// </summary>
        /// <param name="khuVucId"></param>
        /// <param name="doiTacId"></param>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="nguonKhieuNai"></param>
        /// <param name="listLoaiKhieuNaiId"></param>
        /// <param name="listLinhVucChungId"></param>
        /// <param name="linhVucConId"></param>
        /// <returns></returns>
        public DataTable ThongKeKNTheoLoaiKhieuNaiVaNguyenNhanLoi_PCL_Solr(int khuVucId, int doiTacId, int phongBanXuLyId, DateTime fromDate, DateTime toDate, int nguonKhieuNai, List<int> listLoaiKhieuNaiId, List<int> listLinhVucChungId, List<int> listLinhVucConId)
        {
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("LoaiKhieuNaiId");
            dtResult.Columns.Add("LoaiKhieuNai");
            dtResult.Columns.Add("LinhVucChungId");
            dtResult.Columns.Add("LinhVucChung");
            dtResult.Columns.Add("LinhVucConId");
            dtResult.Columns.Add("LinhVucCon");
            dtResult.Columns.Add("SLTiepNhan");
            dtResult.Columns.Add("SLDaDong");

            List<LoiKhieuNaiInfo> listLoiKhieuNaiInfo = new LoiKhieuNaiImpl().GetListSortHierarchy();
            for (int i = 0; i < listLoiKhieuNaiInfo.Count; i++)
            {
                if (listLoiKhieuNaiInfo[i].Cap == 1)
                {
                    dtResult.Columns.Add(listLoiKhieuNaiInfo[i].Id.ToString());
                    List<LoiKhieuNaiInfo> listLoiKhieuNaiCap2 = listLoiKhieuNaiInfo.FindAll(delegate (LoiKhieuNaiInfo obj)
                    { return obj.ParentId == listLoiKhieuNaiInfo[i].Id; });
                    if (listLoiKhieuNaiCap2 != null && listLoiKhieuNaiCap2.Count > 0)
                    {
                        // Chi tiết lỗi khác
                        dtResult.Columns.Add(listLoiKhieuNaiInfo[i].Id.ToString() + "_0");

                        for (int j = 0; j < listLoiKhieuNaiCap2.Count; j++)
                        {
                            dtResult.Columns.Add(listLoiKhieuNaiCap2[j].Id.ToString());
                        }
                    } // end if (listLoiKhieuNaiCap2 != null && listLoiKhieuNaiCap2.Count > 0)
                } // end if(listLoiKhieuNaiInfo[i].Cap == 1)                
            }


            List<DoiTacInfo> listDoiTac = null;
            string whereClauseDonViTiepNhan = string.Empty;
            string whereClauseDonViXuLy = string.Empty;
            string whereClauseNguonKhieuNai = string.Empty;

            if (phongBanXuLyId > 0)
            {
                whereClauseDonViTiepNhan = string.Format(" AND PhongBanId : {0}", phongBanXuLyId);
                whereClauseDonViXuLy = string.Format(" AND PhongBanXuLyId : {0}", phongBanXuLyId);
            }
            else if (doiTacId > 0)
            {
                whereClauseDonViTiepNhan = string.Format(" AND DoiTacId : {0}", doiTacId);
                whereClauseDonViXuLy = string.Format(" AND DoiTacXuLyId : {0}", doiTacId);
            }
            else if (khuVucId != DoiTacInfo.DoiTacIdValue.VNP)
            {
                listDoiTac = new DoiTacImpl().GetListByDonViTrucThuoc(khuVucId);
                if (listDoiTac != null && listDoiTac.Count > 0)
                {
                    whereClauseDonViTiepNhan = listDoiTac[0].Id.ToString();
                    for (int i = 1; i < listDoiTac.Count; i++)
                    {
                        whereClauseDonViTiepNhan = string.Format("{0} {1}", whereClauseDonViTiepNhan, listDoiTac[i].Id);
                    }

                    whereClauseDonViXuLy = whereClauseDonViTiepNhan;

                    whereClauseDonViTiepNhan = string.Format(" AND DoiTacId : ({0})", whereClauseDonViTiepNhan);
                    whereClauseDonViXuLy = string.Format(" AND DoiTacXuLyId : ({0})", whereClauseDonViXuLy);
                }
            }

            if (nguonKhieuNai > -1)
            {
                whereClauseNguonKhieuNai = string.Format(" AND KhieuNaiFrom:{0}", nguonKhieuNai);
            }

            string sFromDate = ConvertUtility.ConvertDateTimeToSolr(fromDate);
            string sToDate = ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999);

            List<LoaiKhieuNaiInfo> listLoaiKhieuNaiInfo = new LoaiKhieuNaiImpl().GetListDynamic("*", "(Status=1 or Status=2) AND Cap IN (1, 2, 3)", "Sort ASC");
            if (listLoaiKhieuNaiInfo != null && listLoaiKhieuNaiInfo.Count > 0)
            {
                // 
                for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
                {
                    if (listLoaiKhieuNaiInfo[i].Cap == 1)
                    {
                        if (!listLoaiKhieuNaiId.Contains(listLoaiKhieuNaiInfo[i].Id))
                        {
                            listLoaiKhieuNaiInfo.RemoveAt(i);
                            i--;
                        }
                    }
                    else if (listLoaiKhieuNaiInfo[i].Cap == 2)
                    {
                        if (!listLinhVucChungId.Contains(listLoaiKhieuNaiInfo[i].Id))
                        {
                            listLoaiKhieuNaiInfo.RemoveAt(i);
                            i--;
                        }
                    }
                    else if (listLoaiKhieuNaiInfo[i].Cap == 3)
                    {
                        if (!listLinhVucConId.Contains(listLoaiKhieuNaiInfo[i].Id))
                        {
                            listLoaiKhieuNaiInfo.RemoveAt(i);
                            i--;
                        }
                    }
                }

                for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
                {
                    if (listLoaiKhieuNaiInfo[i].Cap == 1)
                    {
                        DataRow row = dtResult.NewRow();

                        row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
                        row["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;
                        row["LinhVucChungId"] = 0;
                        row["LinhVucChung"] = "";
                        row["LinhVucConId"] = 0;
                        row["LinhVucCon"] = "";
                        dtResult.Rows.Add(row);

                        for (int j = 0; j < listLoaiKhieuNaiInfo.Count; j++)
                        {
                            if (listLoaiKhieuNaiInfo[j].ParentId == listLoaiKhieuNaiInfo[i].Id)
                            {
                                row = dtResult.NewRow();
                                row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
                                row["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;
                                row["LinhVucChungId"] = listLoaiKhieuNaiInfo[j].Id;
                                row["LinhVucChung"] = listLoaiKhieuNaiInfo[j].Name;
                                row["LinhVucConId"] = 0;
                                row["LinhVucCon"] = "";
                                dtResult.Rows.Add(row);

                                for (int k = 0; k < listLoaiKhieuNaiInfo.Count; k++)
                                {
                                    if (listLoaiKhieuNaiInfo[k].ParentId == listLoaiKhieuNaiInfo[j].Id)
                                    {
                                        row = dtResult.NewRow();
                                        row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
                                        row["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;
                                        row["LinhVucChungId"] = listLoaiKhieuNaiInfo[j].Id;
                                        row["LinhVucChung"] = listLoaiKhieuNaiInfo[j].Name;
                                        row["LinhVucConId"] = listLoaiKhieuNaiInfo[k].Id;
                                        row["LinhVucCon"] = listLoaiKhieuNaiInfo[k].Name;
                                        dtResult.Rows.Add(row);
                                    }
                                }
                            }
                        }
                    }
                } // end for(int i=0;i<listLoaiKhieuNaiInfo.Count;i++)
            } // end if(listLoaiKhieuNaiInfo != null && listLoaiKhieuNaiInfo.Count > 0)          

            // listKhieuNaiIdTiepNhan : Danh sách KhieuNaiId được tiếp nhận
            List<int> listKhieuNaiIdTiepNhan = new List<int>();

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] {2} {3}", sFromDate, sToDate, whereClauseDonViTiepNhan, whereClauseNguonKhieuNai);
            solrQuery = new SolrQuery(whereClauseTiepNhan);
            QueryOptions qoTiepNhan = new QueryOptions();
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"Id, LoaiKhieuNaiId");
            qoTiepNhan.ExtraParams = extraParamTiepNhan;
            qoTiepNhan.Start = 0;
            qoTiepNhan.Rows = int.MaxValue;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetPivotQuery facetPivotQuery = new SolrFacetPivotQuery();
            List<string> listPivot = new List<string>();
            listPivot.Add("LoaiKhieuNaiId,LinhVucChungId,LinhVucConId");
            facetPivotQuery.Fields = listPivot;
            facetParam.Queries.Add(facetPivotQuery);
            qoTiepNhan.Facet = facetParam;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
                {
                    foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
                    {
                        if (itemLoaiKhieuNai.HasChildPivots)
                        {
                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                            {
                                if (itemLinhVucChung.HasChildPivots)
                                {
                                    foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                                    {
                                        foreach (DataRow row in dtResult.Rows)
                                        {
                                            if (row["LoaiKhieuNaiId"].ToString() == itemLoaiKhieuNai.Value && row["LinhVucChungId"].ToString() == itemLinhVucChung.Value
                                                && row["LinhVucConId"].ToString() == itemLinhVucCon.Value)
                                            {
                                                row["SLTiepNhan"] = itemLinhVucCon.Count;
                                            }
                                        } // end foreach (DataRow row in dtResult.Rows)
                                    } // end foreach(var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                                } // end if(itemLinhVucChung.HasChildPivots)                                
                            } // end foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                        } // end if (itemLoaiKhieuNai.HasChildPivots)
                    } // end foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
                } // end foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
            } // end if (listKhieuNaiInfo != null)

            // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
            string whereClauseDaDong = string.Format("NgayDongKN:[{0} TO {1}] AND NgayTiepNhan : [{0} TO {1}] AND TrangThai:3 {2} {3}", sFromDate, sToDate, whereClauseDonViXuLy, whereClauseNguonKhieuNai);
            solrQuery = new SolrQuery(whereClauseDaDong);
            QueryOptions qoDongKN = new QueryOptions();
            var extraParamDongKN = new Dictionary<string, string>();
            extraParamDongKN.Add("fl", @"Id, LoaiKhieuNaiId");
            qoDongKN.ExtraParams = extraParamDongKN;
            qoDongKN.Start = 0;
            qoDongKN.Rows = int.MaxValue;

            facetParam = new FacetParameters();
            facetPivotQuery = new SolrFacetPivotQuery();
            listPivot = new List<string>();
            listPivot.Add("LoaiKhieuNaiId,LinhVucChungId,LinhVucConId,LyDoGiamTru,ChiTietLoiId");
            facetPivotQuery.Fields = listPivot;
            facetParam.Queries.Add(facetPivotQuery);
            qoDongKN.Facet = facetParam;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoDongKN);
            if (listKhieuNaiInfo != null)
            {
                foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
                {
                    foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
                    {
                        if (itemLoaiKhieuNai.HasChildPivots)
                        {
                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                            {
                                if (itemLinhVucChung.HasChildPivots)
                                {
                                    foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                                    {
                                        foreach (DataRow row in dtResult.Rows)
                                        {
                                            if (row["LoaiKhieuNaiId"].ToString() == itemLoaiKhieuNai.Value && row["LinhVucChungId"].ToString() == itemLinhVucChung.Value
                                                && row["LinhVucConId"].ToString() == itemLinhVucCon.Value)
                                            {
                                                row["SLDaDong"] = itemLinhVucCon.Count;

                                                foreach (var itemLyDoGiamTru in itemLinhVucCon.ChildPivots)
                                                {
                                                    if (itemLyDoGiamTru.Value == "0")
                                                    {
                                                        row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()] = ConvertUtility.ToInt32(row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()], 0) + itemLyDoGiamTru.Count;
                                                    }
                                                    else if (itemLyDoGiamTru.HasChildPivots)
                                                    {
                                                        if (itemLyDoGiamTru.Value == LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString())
                                                        {
                                                            row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()] = ConvertUtility.ToInt32(row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()], 0) + itemLyDoGiamTru.Count;
                                                        }
                                                        else
                                                        {
                                                            row[itemLyDoGiamTru.Value] = itemLyDoGiamTru.Count;
                                                        }

                                                        foreach (var itemChiTietLoi in itemLyDoGiamTru.ChildPivots)
                                                        {
                                                            if (itemChiTietLoi.Value == "-1")
                                                            {
                                                                if (itemLyDoGiamTru.Value != "0")
                                                                {
                                                                    row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()] = ConvertUtility.ToInt32(row[LoiKhieuNaiInfo.LoiKhieuNaiValue.NGUYEN_NHAN_LOI_ID_KHAC.ToString()], 0) + itemChiTietLoi.Count;
                                                                }
                                                                continue;
                                                            }

                                                            if (itemChiTietLoi.Value == "0")
                                                            {
                                                                if (dtResult.Columns.Contains(itemLyDoGiamTru.Value + "_0"))
                                                                {
                                                                    row[itemLyDoGiamTru.Value + "_0"] = itemChiTietLoi.Count;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                row[itemChiTietLoi.Value] = itemChiTietLoi.Count;
                                                            }
                                                        } // end foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)

                                                    } // end if (itemLinhVucChung.HasChildPivots)
                                                } // end foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                                            }
                                        } // end foreach (DataRow row in dtResult.Rows)
                                    } // end foreach(var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                                } // end if(itemLinhVucChung.HasChildPivots)                                
                            }// end foreach(var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)                                    
                        } // end if (itemLoaiKhieuNai.HasChildPivots)

                        //break;
                    } // end foreach (var itemLoaiKhieuNai in pivot.Value)

                } // end foreach (var pivot in listKhieuNaiInfo.FacetPivots)
            }

            DataRow rowTotal = dtResult.NewRow();
            foreach (DataColumn col in dtResult.Columns)
            {
                int total = 0;
                foreach (DataRow row in dtResult.Rows)
                {
                    total = total + ConvertUtility.ToInt32(row[col], 0);
                }

                rowTotal[col] = total;
            }

            dtResult.Rows.InsertAt(rowTotal, 0);

            dtResult.ImportRow(rowTotal);
            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 17/05/2015
        /// </summary>
        /// <param name="khuVucId"></param>
        /// <param name="listLoaiKhieuNaiId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        //public DataTable ThongKeKNTheoLoaiKhieuNaiVaNguyenNhanLoi_PCL_Solr(int khuVucId, List<int> listLoaiKhieuNaiId, List<int> listNguyenNhanLoiId, DateTime fromDate, DateTime toDate)
        //{
        //    DataTable dtResult = new DataTable();
        //    dtResult.Columns.Add("LoaiKhieuNaiId");
        //    dtResult.Columns.Add("LoaiKhieuNai");
        //    dtResult.Columns.Add("LinhVucChungId");
        //    dtResult.Columns.Add("LinhVucChung");
        //    dtResult.Columns.Add("LinhVucConId");
        //    dtResult.Columns.Add("LinhVucCon");
        //    dtResult.Columns.Add("SLTiepNhan");
        //    dtResult.Columns.Add("SLDaDong");

        //    List<LoiKhieuNaiInfo> listLoiKhieuNaiInfo = new LoiKhieuNaiImpl().GetList();
        //    for (int i = 0; i < listNguyenNhanLoiId.Count;i++ )
        //    {
        //        dtResult.Columns.Add(listNguyenNhanLoiId[i].ToString());
        //        List<LoiKhieuNaiInfo> listLoiKhieuNaiCap2 = listLoiKhieuNaiInfo.FindAll(delegate(LoiKhieuNaiInfo obj) { return obj.ParentId == listNguyenNhanLoiId[i]; });
        //        if(listLoiKhieuNaiCap2 != null && listLoiKhieuNaiCap2.Count > 0)
        //        {
        //            for(int j=0;j<listLoiKhieuNaiCap2.Count;j++)
        //            {
        //                dtResult.Columns.Add(listLoiKhieuNaiCap2[j].Id.ToString());
        //            }

        //            // Chi tiết lỗi khác
        //            dtResult.Columns.Add(listNguyenNhanLoiId[i].ToString() + "_0");
        //        }
        //    }


        //    List<DoiTacInfo> listDoiTac = null;
        //    string whereClauseDoiTacTiepNhan = string.Empty;
        //    string whereClauseDoiTacXuLy = string.Empty;

        //    if (khuVucId != DoiTacInfo.DoiTacIdValue.VNP)
        //    {
        //        listDoiTac = new DoiTacImpl().GetListByDonViTrucThuoc(khuVucId);
        //        if (listDoiTac != null && listDoiTac.Count > 0)
        //        {
        //            whereClauseDoiTacTiepNhan = listDoiTac[0].Id.ToString();
        //            for (int i = 1; i < listDoiTac.Count; i++)
        //            {
        //                whereClauseDoiTacTiepNhan = string.Format("{0} {1}", whereClauseDoiTacTiepNhan, listDoiTac[i].Id);
        //            }

        //            whereClauseDoiTacXuLy = whereClauseDoiTacTiepNhan;

        //            whereClauseDoiTacTiepNhan = string.Format(" AND DoiTacId : ({0})", whereClauseDoiTacTiepNhan);
        //            whereClauseDoiTacXuLy = string.Format(" AND DoiTacXuLyId : ({0})", whereClauseDoiTacXuLy);
        //        }
        //    }

        //    string sFromDate = ConvertUtility.ConvertDateTimeToSolr(fromDate);
        //    string sToDate = ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999);

        //    string whereClauseLoaiKhieuNai = string.Empty;
        //    //string whereClauseLoaiKhieuNaiSql = string.Empty;
        //    if (listLoaiKhieuNaiId != null && listLoaiKhieuNaiId.Count > 0)
        //    {
        //        whereClauseLoaiKhieuNai = listLoaiKhieuNaiId[0].ToString();
        //        for (int i = 1; i < listLoaiKhieuNaiId.Count; i++)
        //        {
        //            whereClauseLoaiKhieuNai = string.Format("{0} {1}", whereClauseLoaiKhieuNai, listLoaiKhieuNaiId[i]);
        //        }

        //        //whereClauseLoaiKhieuNaiSql = string.Format("Id IN ({0}) OR ParentId IN ({0}) OR ParentLoaiKhieuNaiId IN ({0})", whereClauseLoaiKhieuNai.Replace(" ", ","));

        //        whereClauseLoaiKhieuNai = string.Format(" AND LoaiKhieuNaiId : ({0})", whereClauseLoaiKhieuNai);

        //    }

        //    List<LoaiKhieuNaiInfo> listLoaiKhieuNaiInfo = new LoaiKhieuNaiImpl().GetListSortHierarchyByLoaiKhieuNaiId(listLoaiKhieuNaiId);            
        //    if (listLoaiKhieuNaiInfo != null)
        //    {
        //        for (int i = 0; i < listLoaiKhieuNaiInfo.Count;i++ )
        //        {
        //            if(listLoaiKhieuNaiInfo[i].Cap ==1)
        //            {

        //            }
        //        }
        //            for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
        //            {
        //                DataRow row = dtResult.NewRow();
        //                if (listLoaiKhieuNaiInfo[i].Cap == 1)
        //                {
        //                    row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
        //                    row["LinhVucChungId"] = 0;
        //                    row["LinhVucConId"] = 0;
        //                }
        //                else if (listLoaiKhieuNaiInfo[i].Cap == 2)
        //                {
        //                    row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].ParentId;
        //                    row["LinhVucChungId"] = listLoaiKhieuNaiInfo[i].Id;
        //                    row["LinhVucConId"] = 0;
        //                }
        //                else if (listLoaiKhieuNaiInfo[i].Cap == 3)
        //                {
        //                    row["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].ParentLoaiKhieuNaiId;
        //                    row["LinhVucChungId"] = listLoaiKhieuNaiInfo[i].ParentId;
        //                    row["LinhVucConId"] = listLoaiKhieuNaiInfo[i].Id;
        //                }

        //                dtResult.Rows.Add(row);
        //            }
        //    }

        //    // listKhieuNaiIdTiepNhan : Danh sách KhieuNaiId được tiếp nhận
        //    List<int> listKhieuNaiIdTiepNhan = new List<int>();

        //    SolrQuery solrQuery = null;
        //    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

        //    // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
        //    string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] {2} {3}", sFromDate, sToDate, whereClauseLoaiKhieuNai, whereClauseDoiTacTiepNhan);
        //    solrQuery = new SolrQuery(whereClauseTiepNhan);
        //    QueryOptions qoTiepNhan = new QueryOptions();
        //    var extraParamTiepNhan = new Dictionary<string, string>();
        //    extraParamTiepNhan.Add("fl", @"Id, LoaiKhieuNaiId, LinhVucChungId, LinhVucConId");
        //    qoTiepNhan.ExtraParams = extraParamTiepNhan;
        //    qoTiepNhan.Start = 0;
        //    qoTiepNhan.Rows = int.MaxValue;

        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);
        //    if (listKhieuNaiInfo != null)
        //    {
        //        foreach (DataRow row in dtResult.Rows)
        //        {
        //            int soLuongTiepNhan = 0;
        //            for (int i = 0; i < listKhieuNaiInfo.Count; i++)
        //            {
        //                if (row["LoaiKhieuNaiId"].ToString() != listKhieuNaiInfo[i].LoaiKhieuNaiId.ToString()
        //                        || row["LinhVucChungId"].ToString() != listKhieuNaiInfo[i].LinhVucChungId.ToString()
        //                        || row["LinhVucConId"].ToString() != listKhieuNaiInfo[i].LinhVucConId.ToString())
        //                {
        //                    continue;
        //                }

        //                soLuongTiepNhan++;
        //            }

        //            row["SLTiepNhan"] = soLuongTiepNhan;
        //        } // end foreach (DataRow row in dtResult.Rows)
        //    }

        //    // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
        //    string whereClauseDaDong = string.Format("NgayTiepNhan:[{0} TO {1}] AND NgayDongKN:[{0} TO {1}] {2} {3}", sFromDate, sToDate, whereClauseLoaiKhieuNai, whereClauseDoiTacXuLy);
        //    solrQuery = new SolrQuery(whereClauseDaDong);
        //    QueryOptions qoDongKN = new QueryOptions();
        //    var extraParamDongKN = new Dictionary<string, string>();
        //    extraParamDongKN.Add("fl", @"Id, LoaiKhieuNaiId, LinhVucChungId, LinhVucConId, LyDoGiamTru, ChiTietLoiId");
        //    qoDongKN.ExtraParams = extraParamDongKN;
        //    qoDongKN.Start = 0;
        //    qoDongKN.Rows = int.MaxValue;

        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);           
        //    if (listKhieuNaiInfo != null)
        //    {
        //        foreach (DataRow row in dtResult.Rows)
        //        {
        //            int soLuongDaDong = 0;
        //            for (int i = 0; i < listKhieuNaiInfo.Count; i++)
        //            {
        //                if (row["LoaiKhieuNaiId"].ToString() != listKhieuNaiInfo[i].LoaiKhieuNaiId.ToString()
        //                        || row["LinhVucChungId"].ToString() != listKhieuNaiInfo[i].LinhVucChungId.ToString()
        //                        || row["LinhVucConId"].ToString() != listKhieuNaiInfo[i].LinhVucConId.ToString())
        //                {
        //                    continue;
        //                }

        //                soLuongDaDong++;
        //                //string nameChiTietLoi = string.Empty;
        //                //if(listKhieuNaiInfo[i].ChiTietLoiId > 0)
        //                //{
        //                //    nameChiTietLoi = listKhieuNaiInfo[i].ChiTietLoiId.ToString();
        //                //}
        //                //else
        //                //{
        //                //    nameChiTietLoi = string.Format("{0}_{1}", listKhieuNaiInfo[i].LyDoGiamTru, listKhieuNaiInfo[i].ChiTietLoiId);
        //                //}

        //                //foreach(DataColumn col in dtResult.Columns)
        //                //{
        //                //    if(col.ColumnName == listKhieuNaiInfo[i].LyDoGiamTru.ToString())
        //                //    {
        //                //        row[col.ColumnName] = ConvertUtility.ToInt32(row[col.ColumnName], 0) + 1;                                
        //                //    }

        //                //    if(col.ColumnName == nameChiTietLoi)
        //                //    {
        //                //        row[col.ColumnName] = ConvertUtility.ToInt32(row[col.ColumnName], 0) + 1;
        //                //    }
        //                //}
        //            }

        //            row["SLDaDong"] = soLuongDaDong;

        //        } // end foreach (DataRow row in dtResult.Rows)
        //    }

        //    //// Xóa các dòng mà 2 cột số lượng đều = 0
        //    //for (int i = 0; i < dtResult.Rows.Count; i++)
        //    //{
        //    //    if (dtResult.Rows[i]["SLTiepNhan"].ToString() == "0" && dtResult.Rows[i]["SLDaDong"].ToString() == "0")
        //    //    {
        //    //        dtResult.Rows.RemoveAt(i);
        //    //        i--;
        //    //    }
        //    //} // end for (int i = 0; i < dtResult.Rows.Count;i++ )

        //    List<LoiKhieuNaiInfo> listLoiKhieuNai = new LoiKhieuNaiImpl().GetListDynamic("*", "ParentId=0", "");
        //    if (listLoiKhieuNai == null) listLoiKhieuNai = new List<LoiKhieuNaiInfo>();

        //    foreach (DataRow row in dtResult.Rows)
        //    {
        //        for (int indexLoaiKhieuNai = 0; indexLoaiKhieuNai < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLoaiKhieuNai++)
        //        {
        //            if (row["LoaiKhieuNaiId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLoaiKhieuNai].Id.ToString())
        //            {
        //                row["LoaiKhieuNai"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLoaiKhieuNai].Name;

        //                for (int indexLinhVucChung = 0; indexLinhVucChung < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLinhVucChung++)
        //                {
        //                    if (row["LinhVucChungId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucChung].Id.ToString())
        //                    {
        //                        row["LinhVucChung"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucChung].Name;

        //                        for (int indexLinhVucCon = 0; indexLinhVucCon < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; indexLinhVucCon++)
        //                        {
        //                            if (row["LinhVucConId"].ToString() == LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucCon].Id.ToString())
        //                            {
        //                                row["LinhVucCon"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[indexLinhVucCon].Name;
        //                            }
        //                        }
        //                    }
        //                }
        //            }
        //        }

        //        //for(int i=0;i<listLoiKhieuNai.Count;i++)
        //        //{
        //        //    if(row["NguyenNhanLoiNhieuNhat"].ToString() == listLoiKhieuNai[i].Id.ToString())
        //        //    {
        //        //        row["NguyenNhanLoiNhieuNhat"] = listLoiKhieuNai[i].TenLoi;
        //        //        break;
        //        //    }
        //        //}
        //    } // end foreach (DataRow row in dtResult.Rows)    

        //    return dtResult;
        //}

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 18/05/2015
        /// Todo : 
        /// </summary>
        /// <param name="khuVucId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="listChiTietLoi"></param>
        /// <returns></returns>
        public DataSet BaoCaoTongHopChatLuongPhucVu_Solr(int doiTacId, int loaiKhieuNaiId, int linhVucChungId, int linhVucConId, DateTime fromDate, DateTime toDate, int nguonKhieuNai)
        {
            DataSet dsResult = new DataSet();

            string sFromDate = ConvertUtility.ConvertDateTimeToSolr(fromDate);
            string sToDate = ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999);

            List<int> listIdKhen = new List<int>();
            List<int> listIdChe = new List<int>();

            DataTable dtNhanVien = new DataTable();
            dtNhanVien.Columns.Add("LoaiKhieuNaiId");
            dtNhanVien.Columns.Add("LoaiKhieuNai");
            dtNhanVien.Columns.Add("Khen");
            dtNhanVien.Columns.Add("Che");

            DataTable dtKhuVuc = new DataTable();
            dtKhuVuc.Columns.Add("LoaiKhieuNaiId");
            dtKhuVuc.Columns.Add("LoaiKhieuNai");
            dtKhuVuc.Columns.Add("Khen_" + DoiTacInfo.DoiTacIdValue.VNP1);
            dtKhuVuc.Columns.Add("Khen_" + DoiTacInfo.DoiTacIdValue.VNP2);
            dtKhuVuc.Columns.Add("Khen_" + DoiTacInfo.DoiTacIdValue.VNP3);
            dtKhuVuc.Columns.Add("Che_" + DoiTacInfo.DoiTacIdValue.VNP1);
            dtKhuVuc.Columns.Add("Che_" + DoiTacInfo.DoiTacIdValue.VNP2);
            dtKhuVuc.Columns.Add("Che_" + DoiTacInfo.DoiTacIdValue.VNP3);

            DataTable dtDoiTac = new DataTable();
            dtDoiTac.Columns.Add("DoiTacId");
            dtDoiTac.Columns.Add("DoiTac");
            dtDoiTac.Columns.Add("LoaiKhieuNaiId");
            dtDoiTac.Columns.Add("LoaiKhieuNai");
            dtDoiTac.Columns.Add("Khen");
            dtDoiTac.Columns.Add("Che");

            List<LoaiKhieuNaiInfo> listLoaiKhieuNaiInfo = new LoaiKhieuNaiImpl().GetListDynamic("*", "(Status=1 or Status=2) AND ParentId=0 AND LoaiKhieuNai_NhomId=5 AND Id <> 89", "Name ASC");
            if (listLoaiKhieuNaiInfo == null || listLoaiKhieuNaiInfo.Count == 0)
                return null;

            string whereClauseLoaiKhieuNaiSql = string.Empty;

            for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
            {
                whereClauseLoaiKhieuNaiSql = string.Format("{0}{1},", whereClauseLoaiKhieuNaiSql, listLoaiKhieuNaiInfo[i].Id);
            }

            if (whereClauseLoaiKhieuNaiSql.Length > 0)
            {
                whereClauseLoaiKhieuNaiSql = whereClauseLoaiKhieuNaiSql.TrimEnd(',');
            }

            List<LoaiKhieuNaiInfo> listLinhVucChungInfo = new LoaiKhieuNaiImpl().GetListDynamic("*", "(Status=1 or Status=2) AND ParentId IN (" + whereClauseLoaiKhieuNaiSql + ")", "");
            if (listLinhVucChungInfo != null)
            {
                for (int i = 0; i < listLinhVucChungInfo.Count; i++)
                {
                    if (listLinhVucChungInfo[i].Name.ToLower().Contains("khen"))
                    {
                        listIdKhen.Add(listLinhVucChungInfo[i].Id);
                    }
                    else if (listLinhVucChungInfo[i].Name.ToLower().Contains("chê"))
                    {
                        listIdChe.Add(listLinhVucChungInfo[i].Id);
                    }
                }
            } // end if(listLinhVucChungInfo != null)

            for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
            {
                DataRow rowNhanVien = dtNhanVien.NewRow();
                rowNhanVien["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
                rowNhanVien["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;

                dtNhanVien.Rows.Add(rowNhanVien);

                DataRow rowKhuVuc = dtKhuVuc.NewRow();
                rowKhuVuc["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
                rowKhuVuc["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;

                dtKhuVuc.Rows.Add(rowKhuVuc);
            }

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            string whereClauseDoiTac = string.Empty;
            if (doiTacId == DoiTacInfo.DoiTacIdValue.VNP1 || doiTacId == DoiTacInfo.DoiTacIdValue.VNP2 || doiTacId == DoiTacInfo.DoiTacIdValue.VNP3)
            {
                whereClauseDoiTac = string.Format(" AND KhuVucId:({0})", doiTacId);
            }
            else if (doiTacId > DoiTacInfo.DoiTacIdValue.VNP)
            {
                whereClauseDoiTac = string.Format(" AND DoiTacId:({0})", doiTacId);
            }

            string whereClauseLoaiKhieuNaiSolr = string.Empty;
            if (loaiKhieuNaiId > 0)
            {
                whereClauseLoaiKhieuNaiSolr = string.Format(" AND LoaiKhieuNaiId : ({0})", loaiKhieuNaiId);
            }
            else
            {
                whereClauseLoaiKhieuNaiSolr = string.Format(" AND LoaiKhieuNaiId : ({0})", whereClauseLoaiKhieuNaiSql.Replace(",", " "));
            }

            if (linhVucChungId > 0)
            {
                whereClauseLoaiKhieuNaiSolr = string.Format("{0} AND LinhVucChungId:({1})", whereClauseLoaiKhieuNaiSolr, linhVucChungId);
            }

            if (linhVucConId > 0)
            {
                whereClauseLoaiKhieuNaiSolr = string.Format("{0} AND LinhVucConId:({1})", whereClauseLoaiKhieuNaiSolr, linhVucConId);
            }

            string whereClauseNguonKhieuNai = string.Empty;
            if (nguonKhieuNai != -1)
            {
                whereClauseNguonKhieuNai = string.Format(" AND KhieuNaiFrom:{0}", nguonKhieuNai);
            }

            // Tổng hợp theo nhân viên
            string whereClauseToanMang = string.Format("NgayTiepNhan : [{0} TO {1}] {2} {3} {4}", sFromDate, sToDate, whereClauseLoaiKhieuNaiSolr, whereClauseNguonKhieuNai, whereClauseDoiTac);
            solrQuery = new SolrQuery(whereClauseToanMang);
            QueryOptions qoToanMang = new QueryOptions();
            var extraParamDongKN = new Dictionary<string, string>();
            extraParamDongKN.Add("fl", @"Id, LoaiKhieuNaiId");
            qoToanMang.ExtraParams = extraParamDongKN;
            qoToanMang.Start = 0;
            qoToanMang.Rows = int.MaxValue;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetPivotQuery facetPivotQuery = new SolrFacetPivotQuery();
            List<string> listPivot = new List<string>();
            listPivot.Add("LoaiKhieuNaiId,LinhVucChungId");
            facetPivotQuery.Fields = listPivot;
            facetParam.Queries.Add(facetPivotQuery);
            qoToanMang.Facet = facetParam;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoToanMang);
            if (listKhieuNaiInfo != null)
            {
                foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
                {
                    foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
                    {
                        foreach (DataRow row in dtNhanVien.Rows)
                        {
                            if (row["LoaiKhieuNaiId"].ToString() == itemLoaiKhieuNai.Value)
                            {
                                if (itemLoaiKhieuNai.HasChildPivots)
                                {
                                    foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                                    {
                                        if (listIdKhen.Contains(ConvertUtility.ToInt32(itemLinhVucChung.Value)))
                                        {
                                            row["Khen"] = itemLinhVucChung.Count;
                                        }
                                        else if (listIdChe.Contains(ConvertUtility.ToInt32(itemLinhVucChung.Value)))
                                        {
                                            row["Che"] = itemLinhVucChung.Count;
                                        }
                                    }
                                }
                            }
                        } // end foreach (DataRow row in dtNhanVien.Rows)
                    } // end foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
                } // end foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
            } // end if (listKhieuNaiInfo != null)

            // Tổng hợp theo khu vực
            solrQuery = new SolrQuery(whereClauseToanMang);
            QueryOptions qoKhuVuc = new QueryOptions();
            var extraParamKhuVuc = new Dictionary<string, string>();
            extraParamKhuVuc.Add("fl", @"Id, LoaiKhieuNaiId");
            qoKhuVuc.ExtraParams = extraParamKhuVuc;
            qoKhuVuc.Start = 0;
            qoKhuVuc.Rows = int.MaxValue;

            facetParam = new FacetParameters();
            facetPivotQuery = new SolrFacetPivotQuery();
            listPivot = new List<string>();
            listPivot.Add("LoaiKhieuNaiId,LinhVucChungId,KhuVucId");
            facetPivotQuery.Fields = listPivot;
            facetParam.Queries.Add(facetPivotQuery);
            qoKhuVuc.Facet = facetParam;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhuVuc);
            if (listKhieuNaiInfo != null)
            {
                foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
                {
                    foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
                    {
                        foreach (DataRow row in dtKhuVuc.Rows)
                        {
                            if (row["LoaiKhieuNaiId"].ToString() == itemLoaiKhieuNai.Value)
                            {
                                if (itemLoaiKhieuNai.HasChildPivots)
                                {
                                    foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                                    {
                                        if (itemLinhVucChung.HasChildPivots)
                                        {
                                            foreach (var itemKhuVuc in itemLinhVucChung.ChildPivots)
                                            {
                                                if (!dtKhuVuc.Columns.Contains("Khen_" + itemKhuVuc.Value)
                                                    && !dtKhuVuc.Columns.Contains("Che_" + itemKhuVuc.Value))
                                                {
                                                    continue;
                                                }

                                                if (listIdKhen.Contains(ConvertUtility.ToInt32(itemLinhVucChung.Value)))
                                                {
                                                    row["Khen_" + itemKhuVuc.Value] = itemKhuVuc.Count;
                                                }
                                                else if (listIdChe.Contains(ConvertUtility.ToInt32(itemLinhVucChung.Value)))
                                                {
                                                    row["Che_" + itemKhuVuc.Value] = itemKhuVuc.Count;
                                                }
                                            } // end foreach(var itemKhuVuc in itemLinhVucChung.ChildPivots)
                                        } // end if(itemLinhVucChung.HasChildPivots)

                                    } // end foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                                } // end if (itemLoaiKhieuNai.HasChildPivots)
                            }
                        } // end foreach (DataRow row in dtNhanVien.Rows)
                    } // end foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
                } // end foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
            } // end if (listKhieuNaiInfo != null)

            // Tổng hợp theo đối tác
            string whereClauseDoiTacSql = string.Empty;
            if (doiTacId == DoiTacInfo.DoiTacIdValue.VNP)
            {
                whereClauseDoiTacSql = string.Format("DoiTacType=5");
            }
            else if (doiTacId == DoiTacInfo.DoiTacIdValue.VNP1 || doiTacId == DoiTacInfo.DoiTacIdValue.VNP2 || doiTacId == DoiTacInfo.DoiTacIdValue.VNP3)
            {
                whereClauseDoiTacSql = string.Format("DoiTacType=5 AND DonViTrucThuoc={0}", doiTacId);
            }
            else
            {
                whereClauseDoiTacSql = string.Format("Id={0}", doiTacId);
            }

            List<DoiTacInfo> listDoiTacInfo = new DoiTacImpl().GetListDynamic("*", whereClauseDoiTacSql, "");
            solrQuery = new SolrQuery(whereClauseToanMang);
            QueryOptions qoDoiTac = new QueryOptions();
            var extraParamDoiTac = new Dictionary<string, string>();
            extraParamDoiTac.Add("fl", @"Id, LoaiKhieuNaiId");
            qoDoiTac.ExtraParams = extraParamDoiTac;
            qoDoiTac.Start = 0;
            qoDoiTac.Rows = int.MaxValue;

            facetParam = new FacetParameters();
            facetPivotQuery = new SolrFacetPivotQuery();
            listPivot = new List<string>();
            listPivot.Add("DoiTacId,LoaiKhieuNaiId,LinhVucChungId");
            facetPivotQuery.Fields = listPivot;
            facetParam.Queries.Add(facetPivotQuery);
            qoDoiTac.Facet = facetParam;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoDoiTac);
            if (listKhieuNaiInfo != null)
            {
                foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
                {
                    foreach (var itemDoiTac in pivotLoaiKhieuNai.Value)
                    {
                        string tenDoiTac = string.Empty;
                        bool isExists = false;
                        for (int i = 0; i < listDoiTacInfo.Count; i++)
                        {
                            if (listDoiTacInfo[i].Id.ToString() == itemDoiTac.Value)
                            {
                                tenDoiTac = listDoiTacInfo[i].TenDoiTac;
                                isExists = true;
                                break;
                            }
                        }

                        if (!isExists)
                        {
                            continue;
                        }

                        if (itemDoiTac.HasChildPivots)
                        {
                            foreach (var itemLoaiKhieuNai in itemDoiTac.ChildPivots)
                            {
                                DataRow rowDoiTac = dtDoiTac.NewRow();
                                rowDoiTac["DoiTacId"] = itemDoiTac.Value;
                                rowDoiTac["DoiTac"] = tenDoiTac;
                                rowDoiTac["LoaiKhieuNaiId"] = itemLoaiKhieuNai.Value;

                                for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
                                {
                                    if (listLoaiKhieuNaiInfo[i].Id.ToString() == itemLoaiKhieuNai.Value)
                                    {
                                        rowDoiTac["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;
                                        break;
                                    }
                                }

                                if (itemLoaiKhieuNai.HasChildPivots)
                                {
                                    foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                                    {
                                        if (listIdKhen.Contains(ConvertUtility.ToInt32(itemLinhVucChung.Value)))
                                        {
                                            rowDoiTac["Khen"] = itemLinhVucChung.Count;
                                        }
                                        else if (listIdChe.Contains(ConvertUtility.ToInt32(itemLinhVucChung.Value)))
                                        {
                                            rowDoiTac["Che"] = itemLinhVucChung.Count;
                                        }
                                    } // end foreach(var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                                } // end if(itemLoaiKhieuNai.HasChildPivots)

                                dtDoiTac.Rows.Add(rowDoiTac);
                            } // end foreach (var itemLoaiKhieuNai in itemDoiTac.ChildPivots)
                        } // end if(itemDoiTac.HasChildPivots)

                    } // end foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
                } // end foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
            } // end if (listKhieuNaiInfo != null)

            dsResult.Tables.Add(dtNhanVien);
            dsResult.Tables.Add(dtKhuVuc);
            dsResult.Tables.Add(dtDoiTac);

            return dsResult;
        }

        //public DataSet BaoCaoTongHopChatLuongPhucVu_Solr(int doiTacId, List<int> listLoaiKhieuNaiId, int khenChe, DateTime fromDate, DateTime toDate, int nguonKhieuNai)
        //{
        //    DataSet dsResult = new DataSet();

        //    string sFromDate = ConvertUtility.ConvertDateTimeToSolr(fromDate);
        //    string sToDate = ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999);

        //    List<int> listIdKhen = new List<int>();
        //    List<int> listIdChe = new List<int>();

        //    DataTable dtNhanVien = new DataTable();
        //    dtNhanVien.Columns.Add("LoaiKhieuNaiId");
        //    dtNhanVien.Columns.Add("LoaiKhieuNai");
        //    dtNhanVien.Columns.Add("Khen");
        //    dtNhanVien.Columns.Add("Che");

        //    DataTable dtKhuVuc = new DataTable();
        //    dtKhuVuc.Columns.Add("LoaiKhieuNaiId");
        //    dtKhuVuc.Columns.Add("LoaiKhieuNai");
        //    dtKhuVuc.Columns.Add("Khen_" + DoiTacInfo.DoiTacIdValue.VNP1);
        //    dtKhuVuc.Columns.Add("Khen_" + DoiTacInfo.DoiTacIdValue.VNP2);
        //    dtKhuVuc.Columns.Add("Khen_" + DoiTacInfo.DoiTacIdValue.VNP3);
        //    dtKhuVuc.Columns.Add("Che_" + DoiTacInfo.DoiTacIdValue.VNP1);
        //    dtKhuVuc.Columns.Add("Che_" + DoiTacInfo.DoiTacIdValue.VNP2);
        //    dtKhuVuc.Columns.Add("Che_" + DoiTacInfo.DoiTacIdValue.VNP3);

        //    DataTable dtDoiTac = new DataTable();
        //    dtDoiTac.Columns.Add("DoiTacId");
        //    dtDoiTac.Columns.Add("DoiTac");
        //    dtDoiTac.Columns.Add("LoaiKhieuNaiId");
        //    dtDoiTac.Columns.Add("LoaiKhieuNai");
        //    dtDoiTac.Columns.Add("Khen");
        //    dtDoiTac.Columns.Add("Che");

        //    List<LoaiKhieuNaiInfo> listLoaiKhieuNaiInfo = new LoaiKhieuNaiImpl().GetListDynamic("*", "Status=1 AND ParentId=0 AND LoaiKhieuNai_NhomId=5", "Name ASC");
        //    if (listLoaiKhieuNaiInfo == null || listLoaiKhieuNaiInfo.Count == 0) return null;

        //    string whereClauseLoaiKhieuNaiSql = string.Empty;           

        //    for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
        //    {
        //        if(!listLoaiKhieuNaiId.Contains(listLoaiKhieuNaiInfo[i].Id))                    
        //        {
        //            listLoaiKhieuNaiInfo.RemoveAt(i);
        //            i--;
        //        }                
        //        else
        //        {
        //            whereClauseLoaiKhieuNaiSql = string.Format("{0}{1},", whereClauseLoaiKhieuNaiSql, listLoaiKhieuNaiInfo[i].Id);                    
        //        }
        //    }

        //    if(whereClauseLoaiKhieuNaiSql.Length > 0)
        //    {
        //        whereClauseLoaiKhieuNaiSql = whereClauseLoaiKhieuNaiSql.TrimEnd(',');
        //    }

        //    List<LoaiKhieuNaiInfo> listLinhVucChungInfo = new LoaiKhieuNaiImpl().GetListDynamic("*", "Status=1 AND ParentId IN (" + whereClauseLoaiKhieuNaiSql + ")", "");
        //    if(listLinhVucChungInfo != null)
        //    {
        //        for(int i=0;i<listLinhVucChungInfo.Count;i++)
        //        {
        //            if(listLinhVucChungInfo[i].Name.ToLower().Contains("khen"))
        //            {
        //                listIdKhen.Add(listLinhVucChungInfo[i].Id);
        //            }
        //            else if(listLinhVucChungInfo[i].Name.ToLower().Contains("chê"))
        //            {
        //                listIdChe.Add(listLinhVucChungInfo[i].Id);
        //            }
        //        }
        //    } // end if(listLinhVucChungInfo != null)

        //    for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
        //    {
        //        DataRow rowNhanVien = dtNhanVien.NewRow();
        //        rowNhanVien["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
        //        rowNhanVien["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;

        //        dtNhanVien.Rows.Add(rowNhanVien);

        //        DataRow rowKhuVuc = dtKhuVuc.NewRow();
        //        rowKhuVuc["LoaiKhieuNaiId"] = listLoaiKhieuNaiInfo[i].Id;
        //        rowKhuVuc["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;

        //        dtKhuVuc.Rows.Add(rowKhuVuc);
        //    }

        //    SolrQuery solrQuery = null;
        //    SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

        //    string whereClauseLoaiKhieuNaiSolr = string.Format(" AND LoaiKhieuNaiId : ({0})", whereClauseLoaiKhieuNaiSql.Replace(","," "));
        //    string whereClauseNguonKhieuNai = string.Empty;
        //    if(nguonKhieuNai != -1)
        //    {
        //        whereClauseNguonKhieuNai = string.Format(" AND KhieuNaiFrom:{0}", nguonKhieuNai);
        //    }

        //    // Tổng hợp theo nhân viên
        //    string whereClauseToanMang = string.Format("NgayTiepNhan : [{0} TO {1}] {2} {3}", sFromDate, sToDate, whereClauseLoaiKhieuNaiSolr, whereClauseNguonKhieuNai);            
        //    solrQuery = new SolrQuery(whereClauseToanMang);
        //    QueryOptions qoToanMang = new QueryOptions();
        //    var extraParamDongKN = new Dictionary<string, string>();
        //    extraParamDongKN.Add("fl", @"Id, LoaiKhieuNaiId");
        //    qoToanMang.ExtraParams = extraParamDongKN;
        //    qoToanMang.Start = 0;
        //    qoToanMang.Rows = int.MaxValue;

        //    FacetParameters facetParam = new FacetParameters();           
        //    SolrFacetPivotQuery facetPivotQuery = new SolrFacetPivotQuery();
        //    List<string> listPivot = new List<string>();
        //    listPivot.Add("LoaiKhieuNaiId,LinhVucChungId");           
        //    facetPivotQuery.Fields = listPivot;
        //    facetParam.Queries.Add(facetPivotQuery);
        //    qoToanMang.Facet = facetParam;

        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoToanMang);
        //    if (listKhieuNaiInfo != null)
        //    {
        //        foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
        //        {
        //            foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
        //            {
        //                foreach (DataRow row in dtNhanVien.Rows)
        //                {
        //                    if (row["LoaiKhieuNaiId"].ToString() == itemLoaiKhieuNai.Value)
        //                    {
        //                        if (itemLoaiKhieuNai.HasChildPivots)
        //                        {
        //                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
        //                            {
        //                                if (listIdKhen.Contains(ConvertUtility.ToInt32(itemLinhVucChung.Value)))
        //                                {
        //                                    row["Khen"] = itemLinhVucChung.Count;
        //                                }
        //                                else if (listIdChe.Contains(ConvertUtility.ToInt32(itemLinhVucChung.Value)))
        //                                {
        //                                    row["Che"] = itemLinhVucChung.Count;
        //                                }
        //                            }
        //                        }
        //                    }
        //                } // end foreach (DataRow row in dtNhanVien.Rows)
        //            } // end foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
        //        } // end foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
        //    } // end if (listKhieuNaiInfo != null)

        //    // Tổng hợp theo khu vực
        //    solrQuery = new SolrQuery(whereClauseToanMang);
        //    QueryOptions qoKhuVuc = new QueryOptions();
        //    var extraParamKhuVuc = new Dictionary<string, string>();
        //    extraParamKhuVuc.Add("fl", @"Id, LoaiKhieuNaiId");
        //    qoKhuVuc.ExtraParams = extraParamKhuVuc;
        //    qoKhuVuc.Start = 0;
        //    qoKhuVuc.Rows = int.MaxValue;

        //    facetParam = new FacetParameters();
        //    facetPivotQuery = new SolrFacetPivotQuery();
        //    listPivot = new List<string>();
        //    listPivot.Add("LoaiKhieuNaiId,LinhVucChungId,KhuVucId");
        //    facetPivotQuery.Fields = listPivot;
        //    facetParam.Queries.Add(facetPivotQuery);
        //    qoKhuVuc.Facet = facetParam;

        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhuVuc);
        //    if (listKhieuNaiInfo != null)
        //    {
        //        foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
        //        {
        //            foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
        //            {
        //                foreach (DataRow row in dtKhuVuc.Rows)
        //                {
        //                    if (row["LoaiKhieuNaiId"].ToString() == itemLoaiKhieuNai.Value)
        //                    {
        //                        if (itemLoaiKhieuNai.HasChildPivots)
        //                        {
        //                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
        //                            {
        //                                if(itemLinhVucChung.HasChildPivots)
        //                                {
        //                                    foreach(var itemKhuVuc in itemLinhVucChung.ChildPivots)
        //                                    {
        //                                        if(!dtKhuVuc.Columns.Contains("Khen_" + itemKhuVuc.Value) 
        //                                            && !dtKhuVuc.Columns.Contains("Che_" + itemKhuVuc.Value))
        //                                        {
        //                                            continue;
        //                                        }

        //                                        if (listIdKhen.Contains(ConvertUtility.ToInt32(itemLinhVucChung.Value)))
        //                                        {
        //                                            row["Khen_" + itemKhuVuc.Value] = itemKhuVuc.Count;
        //                                        }
        //                                        else if (listIdChe.Contains(ConvertUtility.ToInt32(itemLinhVucChung.Value)))
        //                                        {
        //                                            row["Che_" + itemKhuVuc.Value] = itemKhuVuc.Count;
        //                                        }
        //                                    } // end foreach(var itemKhuVuc in itemLinhVucChung.ChildPivots)
        //                                } // end if(itemLinhVucChung.HasChildPivots)

        //                            } // end foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
        //                        } // end if (itemLoaiKhieuNai.HasChildPivots)
        //                    }
        //                } // end foreach (DataRow row in dtNhanVien.Rows)
        //            } // end foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
        //        } // end foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
        //    } // end if (listKhieuNaiInfo != null)

        //    // Tổng hợp theo đối tác
        //    string whereClauseDoiTac = string.Empty;
        //    if(doiTacId == DoiTacInfo.DoiTacIdValue.VNP)
        //    {
        //        whereClauseDoiTac = string.Format("DoiTacType=5");
        //    }
        //    else
        //    {
        //        whereClauseDoiTac = string.Format("DoiTacType=5 AND ParentId={0}", doiTacId);
        //    }

        //    List<DoiTacInfo> listDoiTacInfo = new DoiTacImpl().GetListDynamic("*", whereClauseDoiTac, "");
        //    solrQuery = new SolrQuery(whereClauseToanMang);
        //    QueryOptions qoDoiTac = new QueryOptions();
        //    var extraParamDoiTac = new Dictionary<string, string>();
        //    extraParamDoiTac.Add("fl", @"Id, LoaiKhieuNaiId");
        //    qoDoiTac.ExtraParams = extraParamDoiTac;
        //    qoDoiTac.Start = 0;
        //    qoDoiTac.Rows = int.MaxValue;

        //    facetParam = new FacetParameters();
        //    facetPivotQuery = new SolrFacetPivotQuery();
        //    listPivot = new List<string>();
        //    listPivot.Add("DoiTacId,LoaiKhieuNaiId,LinhVucChungId");
        //    facetPivotQuery.Fields = listPivot;
        //    facetParam.Queries.Add(facetPivotQuery);
        //    qoDoiTac.Facet = facetParam;

        //    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoDoiTac);
        //    if (listKhieuNaiInfo != null)
        //    {
        //        foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
        //        {
        //            foreach (var itemDoiTac in pivotLoaiKhieuNai.Value)
        //            {
        //                string tenDoiTac = string.Empty;
        //                bool isExists = false;
        //                for (int i = 0; i < listDoiTacInfo.Count; i++)
        //                {
        //                    if (listDoiTacInfo[i].Id.ToString() == itemDoiTac.Value)
        //                    {
        //                        tenDoiTac = listDoiTacInfo[i].TenDoiTac;
        //                        isExists = true;
        //                        break;
        //                    }
        //                }

        //                if (!isExists)
        //                {
        //                    continue;
        //                }

        //                if(itemDoiTac.HasChildPivots)
        //                {
        //                    foreach (var itemLoaiKhieuNai in itemDoiTac.ChildPivots)
        //                    {                                
        //                        DataRow rowDoiTac = dtDoiTac.NewRow();
        //                        rowDoiTac["DoiTacId"] = itemDoiTac.Value;
        //                        rowDoiTac["DoiTac"] = tenDoiTac;
        //                        rowDoiTac["LoaiKhieuNaiId"] = itemLoaiKhieuNai.Value;                                

        //                        for (int i = 0; i < listLoaiKhieuNaiInfo.Count;i++ )
        //                        {
        //                            if(listLoaiKhieuNaiInfo[i].Id.ToString() == itemLoaiKhieuNai.Value)
        //                            {
        //                                rowDoiTac["LoaiKhieuNai"] = listLoaiKhieuNaiInfo[i].Name;
        //                                break;
        //                            }
        //                        }

        //                        if (itemLoaiKhieuNai.HasChildPivots)
        //                        {
        //                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
        //                            {
        //                                if (listIdKhen.Contains(ConvertUtility.ToInt32(itemLinhVucChung.Value)))
        //                                {
        //                                    rowDoiTac["Khen"] = itemLinhVucChung.Count;
        //                                }
        //                                else if (listIdChe.Contains(ConvertUtility.ToInt32(itemLinhVucChung.Value)))
        //                                {
        //                                    rowDoiTac["Che"] = itemLinhVucChung.Count;
        //                                }
        //                            } // end foreach(var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
        //                        } // end if(itemLoaiKhieuNai.HasChildPivots)

        //                        dtDoiTac.Rows.Add(rowDoiTac);
        //                    } // end foreach (var itemLoaiKhieuNai in itemDoiTac.ChildPivots)
        //                } // end if(itemDoiTac.HasChildPivots)

        //            } // end foreach (var itemLoaiKhieuNai in pivotLoaiKhieuNai.Value)
        //        } // end foreach (var pivotLoaiKhieuNai in listKhieuNaiInfo.FacetPivots)
        //    } // end if (listKhieuNaiInfo != null)

        //    dsResult.Tables.Add(dtNhanVien);
        //    dsResult.Tables.Add(dtKhuVuc);
        //    dsResult.Tables.Add(dtDoiTac);

        //    return dsResult;
        //}

        /// <summary>
        /// Author : Phi Hoang Hai
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="loaiKhieuNaiId"></param>
        /// <param name="linhVucChungId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoChiTietChatLuongPhucVu(int doiTacId, int loaiKhieuNaiId, int linhVucChungId, int linhVucConId, int nguonKhieuNai, DateTime fromDate, DateTime toDate)
        {
            List<KhieuNai_ReportInfo> listKhieuNaiReportInfo = null;
            string sFromDate = ConvertUtility.ConvertDateTimeToSolr(fromDate);
            string sToDate = ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999);

            string whereClause = string.Format("NgayTiepNhan:[{0} TO {1}]", sFromDate, sToDate);

            if (doiTacId == DoiTacInfo.DoiTacIdValue.VNP1 || doiTacId == DoiTacInfo.DoiTacIdValue.VNP2 || doiTacId == DoiTacInfo.DoiTacIdValue.VNP3)
            {
                whereClause = string.Format("{0} AND KhuVucId:{1}", whereClause, doiTacId);
            }
            else if (doiTacId > DoiTacInfo.DoiTacIdValue.VNP)
            {
                whereClause = string.Format("{0} AND DoiTacId:{1}", whereClause, doiTacId);
            }

            if (nguonKhieuNai != -1)
            {
                whereClause = string.Format("{0} AND KhieuNaiFrom:{1}", whereClause, nguonKhieuNai);
            }

            if (loaiKhieuNaiId > 0)
            {
                whereClause = string.Format("{0} AND LoaiKhieuNaiId:({1})", whereClause, loaiKhieuNaiId);
            }
            else
            {
                List<LoaiKhieuNaiInfo> listLoaiKhieuNai = new LoaiKhieuNaiImpl().GetListDynamic("*", "ParentId=0 AND (Status=1 or Status=2) AND Id <> 89 AND LoaiKhieuNai_NhomId=5", "");
                if (listLoaiKhieuNai != null && listLoaiKhieuNai.Count > 0)
                {
                    whereClause = string.Format("{0} AND LoaiKhieuNaiId:({1}", whereClause, listLoaiKhieuNai[0].Id);
                    for (int i = 1; i < listLoaiKhieuNai.Count; i++)
                    {
                        whereClause = string.Format("{0} {1}", whereClause, listLoaiKhieuNai[i].Id);
                    }

                    whereClause = string.Format("{0})", whereClause);
                }

            }

            if (linhVucChungId > 0)
            {
                whereClause = string.Format("{0} AND LinhVucChungId:({1})", whereClause, linhVucChungId);
            }

            if (linhVucConId > 0)
            {
                whereClause = string.Format("{0} AND LinhVucConId:({1})", whereClause, linhVucConId);
            }

            SolrQuery solrQuery = new SolrQuery(whereClause);
            QueryOptions qoKhieuNai = new QueryOptions();
            var extraParamKhuVuc = new Dictionary<string, string>();
            extraParamKhuVuc.Add("fl", @"Id, SoThueBao, LoaiKhieuNaiId, LinhVucChung, LinhVucChungId, LinhVucConId, LinhVucCon, DoiTacId, NguoiTiepNhan, NgayTiepNhan");
            qoKhieuNai.ExtraParams = extraParamKhuVuc;
            qoKhieuNai.Start = 0;
            qoKhieuNai.Rows = int.MaxValue;

            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
            return listKhieuNaiReportInfo;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 10/07/2015
        /// </summary>
        /// <param name="khuVucId"></param>
        /// <param name="nguonKhieuNai"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopChatLuongMang_Solr_old(int khuVucId, int nguonKhieuNai, DateTime fromDate, DateTime toDate)
        {
            string sFromDate = ConvertUtility.ConvertDateTimeToSolr(fromDate);
            string sToDate = ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999);

            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("KhuVucId");
            dtResult.Columns.Add("MaTinh");
            dtResult.Columns.Add("TenTinh");
            dtResult.Columns.Add("TongKN");
            dtResult.Columns.Add("71_0");
            dtResult.Columns.Add("72_0");
            dtResult.Columns.Add("72_73");
            dtResult.Columns.Add("72_74");
            dtResult.Columns.Add("72_75");
            dtResult.Columns.Add("72_76");
            dtResult.Columns.Add("72_77");
            dtResult.Columns.Add("72_1135");
            dtResult.Columns.Add("80_0");
            dtResult.Columns.Add("80_883");
            dtResult.Columns.Add("80_884");
            dtResult.Columns.Add("80_84");
            dtResult.Columns.Add("80_85");
            dtResult.Columns.Add("80_86");
            dtResult.Columns.Add("80_87");

            string whereClauseProvince = "ParentId IS NULL OR ParentId = 0";
            if (khuVucId > DoiTacInfo.DoiTacIdValue.VNP)
            {
                whereClauseProvince = string.Format("({0}) AND KhuVucId={1}", whereClauseProvince, khuVucId);
            }

            List<ProvinceInfo> listProvince = new ProvinceImpl().GetListDynamic("*", whereClauseProvince, "KhuVucId ASC, Name ASC");
            if (listProvince == null)
                return null;
            for (int i = 0; i < listProvince.Count; i++)
            {
                DataRow row = dtResult.NewRow();
                row["KhuVucId"] = listProvince[i].KhuVucId;
                row["MaTinh"] = listProvince[i].Id;
                row["TenTinh"] = listProvince[i].Name;

                dtResult.Rows.Add(row);
            }

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
            string whereClause = string.Format("NgayDongKN:[{0} TO {1}] AND LoaiKhieuNaiId:71", sFromDate, sToDate);
            if (nguonKhieuNai != -1)
            {
                whereClause = string.Format("{0} AND KhieuNaiFrom:{1}", whereClause, nguonKhieuNai);
            }

            solrQuery = new SolrQuery(whereClause);
            QueryOptions qoTiepNhan = new QueryOptions();
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"Id, LoaiKhieuNaiId");
            qoTiepNhan.ExtraParams = extraParamTiepNhan;
            qoTiepNhan.Start = 0;
            qoTiepNhan.Rows = 0;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetPivotQuery facetPivotQuery = new SolrFacetPivotQuery();
            List<string> listPivot = new List<string>();
            listPivot.Add("MaTinhId,LoaiKhieuNaiId,LinhVucChungId,LinhVucConId");
            facetPivotQuery.Fields = listPivot;
            facetParam.Queries.Add(facetPivotQuery);
            qoTiepNhan.Facet = facetParam;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                foreach (var pivotMaTinh in listKhieuNaiInfo.FacetPivots)
                {
                    foreach (var itemMaTinh in pivotMaTinh.Value)
                    {
                        for (int i = 0; i < dtResult.Rows.Count; i++)
                        {
                            if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                            {
                                dtResult.Rows[i]["TongKN"] = itemMaTinh.Count;
                                break;
                            }
                        } // end for(int i=0;i<dtResult.Rows.Count;i++)

                        foreach (var itemLoaiKhieuNai in itemMaTinh.ChildPivots)
                        {
                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                            {
                                // Lấy ra loại khiếu nại không có lĩnh vực chung
                                if (itemLinhVucChung.Value == "0")
                                {
                                    for (int i = 0; i < dtResult.Rows.Count; i++)
                                    {
                                        if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                                        {
                                            dtResult.Rows[i]["71_0"] = itemLinhVucChung.Count;
                                            break;
                                        }
                                    } // end for(int i=0;i<dtResult.Rows.Count;i++)
                                }

                                foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                                {
                                    string colName = itemLinhVucChung.Value + "_" + itemLinhVucCon.Value;
                                    // Lấy ra lĩnh vực chung không có lĩnh vực con
                                    if (itemLinhVucChung.Value != "0" && itemLinhVucCon.Value == "0")
                                    {
                                        for (int i = 0; i < dtResult.Rows.Count; i++)
                                        {
                                            if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                                            {
                                                dtResult.Rows[i][itemLinhVucChung.Value + "_0"] = itemLinhVucCon.Count;
                                                break;
                                            }
                                        } // end for(int i=0;i<dtResult.Rows.Count;i++)
                                    }
                                    else
                                    {
                                        for (int i = 0; i < dtResult.Rows.Count; i++)
                                        {
                                            if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                                            {
                                                foreach (DataColumn col in dtResult.Columns)
                                                {
                                                    if (col.ColumnName == colName)
                                                    {
                                                        dtResult.Rows[i][col.ColumnName] = itemLinhVucCon.Count;
                                                    }
                                                }

                                                break;
                                            }
                                        } // end for(int i=0;i<dtResult.Rows.Count;i++)
                                    }
                                } // end foreach(var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                            } // end foreach(var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                        } // end foreach (var itemLoaiKhieuNai in itemMaTinh.ChildPivots)
                    } // end  foreach (var itemMaTinh in pivotMaTinh.Value)
                } // end foreach (var pivotMaTinh in listKhieuNaiInfo.FacetPivots)
            }

            return dtResult;
        }
        /// <summary>
        /// Author : Vu Van Truong
        /// Created date : 14/04/2016
        /// </summary>
        /// <param name="khuVucId"></param>
        /// <param name="nguonKhieuNai"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTongHopChatLuongMang_Solr(int khuVucId, int nguonKhieuNai, DateTime fromDate, DateTime toDate)
        {
            string sFromDate = ConvertUtility.ConvertDateTimeToSolr(fromDate);
            string sToDate = ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999);

            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("KhuVucId");
            dtResult.Columns.Add("MaTinh");
            dtResult.Columns.Add("TenTinh");
            dtResult.Columns.Add("TongKN");
            dtResult.Columns.Add("71_0");    // 71:   chất lượng mạng

            dtResult.Columns.Add("72_0");    // 72:   sóng 2G
            dtResult.Columns.Add("72_0_TIEP_N");
            dtResult.Columns.Add("72_0_TON");
            dtResult.Columns.Add("72_0_QUA_H");

            dtResult.Columns.Add("72_73");   // 73:   Sóng kém hoặc chập chờn (cả indoor và outdoor)
            dtResult.Columns.Add("72_73_TIEP_N");
            dtResult.Columns.Add("72_73_TON");
            dtResult.Columns.Add("72_73_QUA_H");

            dtResult.Columns.Add("72_74");   // 74:   Có sóng nhưng gọi đi hoặc gọi đến không được
            dtResult.Columns.Add("72_74_TIEP_N");
            dtResult.Columns.Add("72_74_TON");
            dtResult.Columns.Add("72_74_QUA_H");

            dtResult.Columns.Add("72_75");   // 75:   Đang đàm thoại rớt cuộc ( mất tín hiệu, báo gián đoạn..)
            dtResult.Columns.Add("72_75_TIEP_N");
            dtResult.Columns.Add("72_75_TON");
            dtResult.Columns.Add("72_75_QUA_H");

            dtResult.Columns.Add("72_76");   // 76:   Cuộc gọi nhiễu,nghe xen, tiếng vọng
            dtResult.Columns.Add("72_76_TIEP_N");
            dtResult.Columns.Add("72_76_TON");
            dtResult.Columns.Add("72_76_QUA_H");

            dtResult.Columns.Add("72_77");   // 77:   Không có sóng Indoor
            dtResult.Columns.Add("72_77_TIEP_N");
            dtResult.Columns.Add("72_77_TON");
            dtResult.Columns.Add("72_77_QUA_H");

            dtResult.Columns.Add("72_1135"); // 1135: Mất sóng hoàn toàn
            dtResult.Columns.Add("72_1135_TIEP_N");
            dtResult.Columns.Add("72_1135_TON");
            dtResult.Columns.Add("72_1135_QUA_H");

            // ===============================

            dtResult.Columns.Add("80_0");    // 80:   sóng 3G
            dtResult.Columns.Add("80_0_TIEP_N");
            dtResult.Columns.Add("80_0_TON");
            dtResult.Columns.Add("80_0_QUA_H");

            dtResult.Columns.Add("80_883");  // 883:  Sóng kém hoặc chập chờn (cả indoor và outdoor)
            dtResult.Columns.Add("80_883_TIEP_N");
            dtResult.Columns.Add("80_883_TON");
            dtResult.Columns.Add("80_883_QUA_H");

            dtResult.Columns.Add("80_884");  // 884:  Có sóng nhưng gọi đi hoặc gọi đến không được
            dtResult.Columns.Add("80_884_TIEP_N");
            dtResult.Columns.Add("80_884_TON");
            dtResult.Columns.Add("80_884_QUA_H");

            dtResult.Columns.Add("80_84");   // 84:   Đang đàm thoại rớt cuộc ( mất tín hiệu, báo gián đoạn..)
            dtResult.Columns.Add("80_84_TIEP_N");
            dtResult.Columns.Add("80_84_TON");
            dtResult.Columns.Add("80_84_QUA_H");

            dtResult.Columns.Add("80_85");   // 85:   Cuộc gọi nhiễu,nghe xen, tiếng vọng
            dtResult.Columns.Add("80_85_TIEP_N");
            dtResult.Columns.Add("80_85_TON");
            dtResult.Columns.Add("80_85_QUA_H");

            dtResult.Columns.Add("80_86");   // 86:   Không có sóng Indoor
            dtResult.Columns.Add("80_86_TIEP_N");
            dtResult.Columns.Add("80_86_TON");
            dtResult.Columns.Add("80_86_QUA_H");

            dtResult.Columns.Add("80_87");   // 87:   Mất sóng hoàn toàn
            dtResult.Columns.Add("80_87_TIEP_N");
            dtResult.Columns.Add("80_87_TON");
            dtResult.Columns.Add("80_87_QUA_H");

            string whereClauseProvince = "ParentId IS NULL OR ParentId = 0";
            if (khuVucId > DoiTacInfo.DoiTacIdValue.VNP)    // lấy những khu vực VNP2, VNP3, VNP5 (KV1,2,3)
            {
                whereClauseProvince = string.Format("({0}) AND KhuVucId={1}", whereClauseProvince, khuVucId);
            }

            List<ProvinceInfo> listProvince = new ProvinceImpl().GetListDynamic("*", whereClauseProvince, "KhuVucId ASC, Name ASC");
            if (listProvince == null)
                return null;
            for (int i = 0; i < listProvince.Count; i++)   // gán danh sách các tỉnh thành ứng với khu vực lựa chọn
            {
                DataRow row = dtResult.NewRow();
                row["KhuVucId"] = listProvince[i].KhuVucId;
                row["MaTinh"] = listProvince[i].Id;
                row["TenTinh"] = listProvince[i].Name;

                dtResult.Rows.Add(row);
            }

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            // Lấy ra loại khiếu nại/lĩnh vực chung/lĩnh vực con để đưa vào từng nhóm riêng
            // Phân nhóm khiếu nại ở đây là thuộc về chất lượng mạng, lọc lấy danh sách khiếu nại (id là 71)
            string whereClause = string.Format("NgayDongKN:[{0} TO {1}] AND LoaiKhieuNaiId:71", sFromDate, sToDate);
            if (nguonKhieuNai != -1)
            {
                whereClause = string.Format("{0} AND KhieuNaiFrom:{1}", whereClause, nguonKhieuNai);
            }

            solrQuery = new SolrQuery(whereClause);
            QueryOptions qoTiepNhan = new QueryOptions();
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"Id, LoaiKhieuNaiId");
            qoTiepNhan.ExtraParams = extraParamTiepNhan;
            qoTiepNhan.Start = 0;
            qoTiepNhan.Rows = 0;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetPivotQuery facetPivotQuery = new SolrFacetPivotQuery();
            List<string> listPivot = new List<string>();
            listPivot.Add("MaTinhId,LoaiKhieuNaiId,LinhVucChungId,LinhVucConId");
            facetPivotQuery.Fields = listPivot;
            facetParam.Queries.Add(facetPivotQuery);
            qoTiepNhan.Facet = facetParam;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                foreach (var pivotMaTinh in listKhieuNaiInfo.FacetPivots)   // Lặp theo MaTinhId (xử lý theo từng tỉnh thành)
                {
                    foreach (var itemMaTinh in pivotMaTinh.Value)
                    {
                        for (int i = 0; i < dtResult.Rows.Count; i++)
                        {
                            if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                            {
                                dtResult.Rows[i]["TongKN"] = itemMaTinh.Count;
                                break;
                            }
                        } // end for(int i=0;i<dtResult.Rows.Count;i++)

                        foreach (var itemLoaiKhieuNai in itemMaTinh.ChildPivots)    // Lặp theo LoaiKhieuNaiId (xử lý theo loại khiếu nại)
                        {
                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)  // Lặp theo LinhVucChungId (xử lý con)
                            {
                                // Lấy ra loại khiếu nại không có lĩnh vực chung
                                if (itemLinhVucChung.Value == "0")
                                {
                                    for (int i = 0; i < dtResult.Rows.Count; i++)
                                    {
                                        if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                                        {
                                            dtResult.Rows[i]["71_0"] = itemLinhVucChung.Count;
                                            break;
                                        }
                                    } // end for(int i=0;i<dtResult.Rows.Count;i++)
                                }

                                foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)  // Lặp theo LinhVucConId (xử lý con nữa)
                                {
                                    string colName = itemLinhVucChung.Value + "_" + itemLinhVucCon.Value;
                                    // Lấy ra lĩnh vực chung không có lĩnh vực con
                                    if (itemLinhVucChung.Value != "0" && itemLinhVucCon.Value == "0")
                                    {
                                        for (int i = 0; i < dtResult.Rows.Count; i++)
                                        {
                                            if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                                            {
                                                dtResult.Rows[i][itemLinhVucChung.Value + "_0"] = itemLinhVucCon.Count;
                                                break;
                                            }
                                        } // end for(int i=0;i<dtResult.Rows.Count;i++)
                                    }
                                    else
                                    {
                                        for (int i = 0; i < dtResult.Rows.Count; i++)
                                        {
                                            if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                                            {
                                                foreach (DataColumn col in dtResult.Columns)
                                                {
                                                    if (col.ColumnName == colName)
                                                    {
                                                        dtResult.Rows[i][col.ColumnName] = itemLinhVucCon.Count;
                                                    }
                                                }

                                                break;
                                            }
                                        } // end for(int i=0;i<dtResult.Rows.Count;i++)
                                    }
                                } // end foreach(var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                            } // end foreach(var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                        } // end foreach (var itemLoaiKhieuNai in itemMaTinh.ChildPivots)
                    } // end  foreach (var itemMaTinh in pivotMaTinh.Value)
                } // end foreach (var pivotMaTinh in listKhieuNaiInfo.FacetPivots)
            }
            // Xử lý số lượng tiếp nhận, tồn, quá hạn của khiếu nại theo từng lĩnh vực

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");
            string whereClauseActivity = string.Empty;

            // 1. Tiếp nhận
            // Số lượng tiếp nhận
            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            //var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            //extraParamLoaiKhieuNai.Add("fl", @"KhieuNaiId");
            //queryOptionTiepNhan.ExtraParams = extraParamLoaiKhieuNai;
            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = int.MaxValue;


            FacetParameters facetParamTiepNhan = new FacetParameters();
            SolrFacetPivotQuery facetPivotQueryTiepNhan = new SolrFacetPivotQuery();
            List<string> listPivotTiepNhan = new List<string>();
            listPivotTiepNhan.Add("MaTinhId,LoaiKhieuNaiId,LinhVucChungId,LinhVucConId,KhieuNaiId");
            facetPivotQueryTiepNhan.Fields = listPivotTiepNhan;
            facetParamTiepNhan.Queries.Add(facetPivotQueryTiepNhan);
            queryOptionTiepNhan.Facet = facetParamTiepNhan;


            SolrNet.SortOrder sortOrderNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.ASC);
            List<SolrNet.SortOrder> listSortOrderNgayTiepNhan = new List<SolrNet.SortOrder>();
            listSortOrderNgayTiepNhan.Add(sortOrderNgayTiepNhan);

            GroupingParameters gpTiepNhan = new GroupingParameters();
            gpTiepNhan.Fields = listGroupField;
            gpTiepNhan.Limit = 1;
            gpTiepNhan.Main = true;
            gpTiepNhan.OrderBy = listSortOrderNgayTiepNhan;
            queryOptionTiepNhan.Grouping = gpTiepNhan;
            string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND LoaiKhieuNaiId:71 AND HanhDong:(0 1 2 3)", sFromDate, sToDate);
            solrQuery = new SolrQuery(whereClauseTiepNhan);
            whereClauseActivity = whereClauseTiepNhan;
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                var slTinh = listKhieuNaiInfo.FacetPivots;
                //if (listKhieuNaiIdTonDongKyTruoc != null && listKhieuNaiIdTonDongKyTruoc.Count > 0)
                //{
                //    int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj) { return listKhieuNaiIdTonDongKyTruoc.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curDoiTacXuLyId)); });
                //}

                //row["SLTiepNhan"] = listKhieuNaiInfo.Count;

                foreach (var pivotMaTinh in listKhieuNaiInfo.FacetPivots)   // Lặp theo MaTinhId (xử lý theo từng tỉnh thành)
                {
                    foreach (var itemMaTinh in pivotMaTinh.Value)
                    {
                        foreach (var itemLoaiKhieuNai in itemMaTinh.ChildPivots)    // Lặp theo LoaiKhieuNaiId (xử lý theo loại khiếu nại)
                        {
                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)  // Lặp theo LinhVucChungId (xử lý con)
                            {
                                foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)  // Lặp theo LinhVucConId (xử lý con nữa)
                                {
                                    string colName_tiepnhan = itemLinhVucChung.Value + "_" + itemLinhVucCon.Value + "_TIEP_N";
                                    //string colName_ton = itemLinhVucChung.Value + "_" + itemLinhVucCon.Value + "_TON";
                                    //string colName_quahan = itemLinhVucChung.Value + "_" + itemLinhVucCon.Value + "_QUA_H";
                                    string whereGetInforKhieuNaiActivitySolr = "WHERE: " + whereClauseActivity + " AND MaTinhId:" + itemMaTinh.Value + " AND LoaiKhieuNaiId:" + itemLoaiKhieuNai.Value + " AND LinhVucChungId:" + itemLinhVucChung.Value + " AND LinhVucConId:" + itemLinhVucCon.Value;
                                    // Lấy ra lĩnh vực chung không có lĩnh vực con
                                    //if (itemLinhVucChung.Value != "0" && itemLinhVucCon.Value == "0")
                                    //{
                                    //for (int i = 0; i < dtResult.Rows.Count; i++)
                                    //{
                                    //    if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                                    //    {
                                    //        dtResult.Rows[i][itemLinhVucChung.Value + "_0"] = itemLinhVucCon.Count;
                                    //        break;
                                    //    }
                                    //} // end for(int i=0;i<dtResult.Rows.Count;i++)
                                    //}
                                    //else
                                    //{
                                    for (int i = 0; i < dtResult.Rows.Count; i++)
                                    {
                                        if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                                        {
                                            foreach (DataColumn col in dtResult.Columns)
                                            {
                                                if (col.ColumnName == colName_tiepnhan)
                                                {
                                                    var lstKhieuNaiId = "";
                                                    foreach (var item in itemLinhVucCon.ChildPivots)
                                                    {
                                                        lstKhieuNaiId += " " + item.Value;
                                                    }
                                                    //dtResult.Rows[i][col.ColumnName] = itemLinhVucCon.ChildPivots.Count +whereGetInforKhieuNaiActivitySolr;
                                                    dtResult.Rows[i][col.ColumnName] = itemLinhVucCon.ChildPivots.Count + "WHERE: " + lstKhieuNaiId;
                                                }
                                            }

                                            break;
                                        }
                                    } // end for(int i=0;i<dtResult.Rows.Count;i++)
                                    //}
                                } // end foreach(var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                            } // end foreach(var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                        } // end foreach (var itemLoaiKhieuNai in itemMaTinh.ChildPivots)
                    } // end  foreach (var itemMaTinh in pivotMaTinh.Value)
                } // end foreach (var pivotMaTinh in listKhieuNaiInfo.FacetPivots)
            }

            // 2. Tồn
            // Số lượng tồn đọng
            // Số lượng tồn đọng quá hạn            
            Dictionary<int, int> listKhieuNaiIdTonDong = new Dictionary<int, int>();

            QueryOptions queryOptionTonDong = new QueryOptions();
            //Lấy ra những trường nào
            //var extraParamTonDong = new Dictionary<string, string>();
            //extraParamTonDong.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, LDate, HanhDong, DoiTacXuLyId");
            //queryOptionTonDong.ExtraParams = extraParamTonDong;
            queryOptionTonDong.Start = 0;
            queryOptionTonDong.Rows = int.MaxValue;


            FacetParameters facetParamTonDong = new FacetParameters();
            SolrFacetPivotQuery facetPivotQueryTonDong = new SolrFacetPivotQuery();
            List<string> listPivotTonDong = new List<string>();
            listPivotTonDong.Add("MaTinhId,LoaiKhieuNaiId,LinhVucChungId,LinhVucConId,KhieuNaiId");
            facetPivotQueryTonDong.Fields = listPivotTonDong;
            facetParamTonDong.Queries.Add(facetPivotQueryTonDong);
            queryOptionTonDong.Facet = facetParamTonDong;


            SolrNet.SortOrder sortOrderTonDongNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDong = new List<SolrNet.SortOrder>();
            listSortOrderTonDong.Add(sortOrderTonDongNgayTiepNhan);
            listSortOrderTonDong.Add(sortOrderTonDongActivityId);

            GroupingParameters gpTonDong = new GroupingParameters();
            gpTonDong.Fields = listGroupField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            gpTonDong.OrderBy = listSortOrderTonDong;
            queryOptionTonDong.Grouping = gpTonDong;

            DateTime nextToDate = toDate.AddDays(1);
            //string whereClauseTonDong = string.Format("LDate:[* TO {0}] OR (NgayTiepNhan : [* TO {0}] AND LDate : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), ConvertDateToSolr(nextToDate.ToString("yyyyMMdd"), true, false));
            string whereClauseTonDong = string.Format("NgayTiepNhan:[* TO {0}] AND KhieuNai_NgayDongKN:[{1} TO *]", sFromDate, sToDate);
            solrQuery = new SolrQuery(whereClauseTonDong);
            whereClauseActivity = whereClauseTonDong;
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTonDong);
            if (listKhieuNaiInfo != null)
            {
                var slTinh = listKhieuNaiInfo.FacetPivots;
                ////List<KhieuNai_ReportInfo> listKhieuNaiTonDong = listKhieuNaiInfo.FindAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN && obj.DoiTacXuLyId == doiTacId; });
                ////listKhieuNaiInfo = null;

                ////int numberDelete = listKhieuNaiInfo.RemoveAll(delegate(KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Đóng_KN || obj.DoiTacXuLyId != doiTacId; });
                ////int numberDelete = listKhieuNaiInfo.RemoveAll(delegate(KhieuNai_ReportInfo obj) { return obj.DoiTacXuLyId != doiTacId; });
                //if (listDoiTacId != null && listDoiTacId.Count > 0)
                //{
                //    int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                //    {
                //        return !listDoiTacId.Contains(obj.DoiTacXuLyId);
                //    });
                //}
                foreach (var pivotMaTinh in listKhieuNaiInfo.FacetPivots)   // Lặp theo MaTinhId (xử lý theo từng tỉnh thành)
                {
                    foreach (var itemMaTinh in pivotMaTinh.Value)
                    {
                        foreach (var itemLoaiKhieuNai in itemMaTinh.ChildPivots)    // Lặp theo LoaiKhieuNaiId (xử lý theo loại khiếu nại)
                        {
                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)  // Lặp theo LinhVucChungId (xử lý con)
                            {
                                foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)  // Lặp theo LinhVucConId (xử lý con nữa)
                                {
                                    //string colName_tiepnhan = itemLinhVucChung.Value + "_" + itemLinhVucCon.Value + "_TIEP_N";
                                    string colName_ton = itemLinhVucChung.Value + "_" + itemLinhVucCon.Value + "_TON";
                                    //string colName_quahan = itemLinhVucChung.Value + "_" + itemLinhVucCon.Value + "_QUA_H";
                                    string whereGetInforKhieuNaiActivitySolr = "WHERE: " + whereClauseActivity + " AND MaTinhId:" + itemMaTinh.Value + " AND LoaiKhieuNaiId:" + itemLoaiKhieuNai.Value + " AND LinhVucChungId:" + itemLinhVucChung.Value + " AND LinhVucConId:" + itemLinhVucCon.Value;
                                    // Lấy ra lĩnh vực chung không có lĩnh vực con
                                    if (itemLinhVucChung.Value != "0" && itemLinhVucCon.Value == "0")
                                    {
                                        //for (int i = 0; i < dtResult.Rows.Count; i++)
                                        //{
                                        //    if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                                        //    {
                                        //        dtResult.Rows[i][itemLinhVucChung.Value + "_0"] = itemLinhVucCon.Count;
                                        //        break;
                                        //    }
                                        //} // end for(int i=0;i<dtResult.Rows.Count;i++)
                                    }
                                    else
                                    {
                                        for (int i = 0; i < dtResult.Rows.Count; i++)
                                        {
                                            if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                                            {
                                                foreach (DataColumn col in dtResult.Columns)
                                                {
                                                    if (col.ColumnName == colName_ton)
                                                    {
                                                        var lstKhieuNaiId = "";
                                                        foreach (var item in itemLinhVucCon.ChildPivots)
                                                        {
                                                            lstKhieuNaiId += " " + item.Value;
                                                        }
                                                        //dtResult.Rows[i][col.ColumnName] = itemLinhVucCon.ChildPivots.Count + whereGetInforKhieuNaiActivitySolr;
                                                        dtResult.Rows[i][col.ColumnName] = itemLinhVucCon.ChildPivots.Count + "WHERE: " + lstKhieuNaiId;
                                                    }
                                                }

                                                break;
                                            }
                                        } // end for(int i=0;i<dtResult.Rows.Count;i++)
                                    }
                                } // end foreach(var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                            } // end foreach(var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                        } // end foreach (var itemLoaiKhieuNai in itemMaTinh.ChildPivots)
                    } // end  foreach (var itemMaTinh in pivotMaTinh.Value)
                } // end foreach (var pivotMaTinh in listKhieuNaiInfo.FacetPivots)
            }

            // 3. Quá hạn
            // Số lượng đã xử lý
            // Số lượng quá hạn đã xử lý
            QueryOptions queryOptionXuLy = new QueryOptions();
            //Lấy ra những trường nào
            //var extraParamXuLy = new Dictionary<string, string>();
            //extraParamXuLy.Add("fl", @"KhieuNaiId, NgayTiepNhan, NgayQuaHan, NgayQuaHan_PhongBanXuLyTruoc, LDate, HanhDong");
            //queryOptionXuLy.ExtraParams = extraParamXuLy;
            queryOptionXuLy.Start = 0;
            queryOptionXuLy.Rows = int.MaxValue;


            FacetParameters facetParamXuLy = new FacetParameters();
            SolrFacetPivotQuery facetPivotQueryXuLy = new SolrFacetPivotQuery();
            List<string> listPivotXuLy = new List<string>();
            listPivotXuLy.Add("MaTinhId,LoaiKhieuNaiId,LinhVucChungId,LinhVucConId,KhieuNaiId");
            facetPivotQueryXuLy.Fields = listPivotXuLy;
            facetParamXuLy.Queries.Add(facetPivotQueryXuLy);
            queryOptionXuLy.Facet = facetParamXuLy;

            SolrNet.SortOrder sortOrderNgayXuLy = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderNgayXuLy = new List<SolrNet.SortOrder>();
            listSortOrderNgayXuLy.Add(sortOrderNgayXuLy);

            GroupingParameters gpXuLy = new GroupingParameters();
            gpXuLy.Fields = listGroupField;
            gpXuLy.Limit = 1;
            gpXuLy.Main = true;
            gpXuLy.OrderBy = listSortOrderNgayXuLy;
            queryOptionXuLy.Grouping = gpXuLy;

            //string whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND ((DoiTacXuLyTruocId: {2} AND -DoiTacXuLyId : {2}) OR (DoiTacXuLyId:{2} AND HanhDong:4))", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), doiTacId);
            string whereClauseXuLy = string.Format("(NgayTiepNhan:[{0} TO {1}] AND LoaiKhieuNaiId:71 AND -HanhDong:4) OR (LDate:[{0} TO {1}] AND LoaiKhieuNaiId:71 AND HanhDong:4)", sFromDate, sToDate);
            solrQuery = new SolrQuery(whereClauseXuLy);
            whereClauseActivity = whereClauseXuLy;
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionXuLy);
            if (listKhieuNaiInfo != null)
            {
                var slTinh = listKhieuNaiInfo.FacetPivots;
                //if (listKhieuNaiIdTonDong != null && listKhieuNaiIdTonDong.Count > 0)
                //{
                //    int numberDeleted = listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj) { return listKhieuNaiIdTonDong.Contains(new KeyValuePair<int, int>(obj.KhieuNaiId, curDoiTacXuLyId)); });
                //}

                //if (listKhieuNaiInfo != null)
                //{
                //    row["SLDaXuLy"] = listKhieuNaiInfo.Count;
                //    row["SLQuaHanDaXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj) { return obj.NgayTiepNhan >= obj.NgayQuaHan_PhongBanXuLyTruoc; }).Count;

                //    row["SLChuyenXuLy"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban; }).Count;
                //    row["SLChuyenPhanHoi"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; }).Count;
                //    row["SLChuyenNgangHang"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj) { return obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Ngang_Hàng; }).Count;
                //}
                foreach (var pivotMaTinh in listKhieuNaiInfo.FacetPivots)   // Lặp theo MaTinhId (xử lý theo từng tỉnh thành)
                {
                    foreach (var itemMaTinh in pivotMaTinh.Value)
                    {
                        foreach (var itemLoaiKhieuNai in itemMaTinh.ChildPivots)    // Lặp theo LoaiKhieuNaiId (xử lý theo loại khiếu nại)
                        {
                            foreach (var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)  // Lặp theo LinhVucChungId (xử lý con)
                            {
                                foreach (var itemLinhVucCon in itemLinhVucChung.ChildPivots)  // Lặp theo LinhVucConId (xử lý con nữa)
                                {
                                    //string colName_tiepnhan = itemLinhVucChung.Value + "_" + itemLinhVucCon.Value + "_TIEP_N";
                                    //string colName_ton = itemLinhVucChung.Value + "_" + itemLinhVucCon.Value + "_TON";
                                    string colName_quahan = itemLinhVucChung.Value + "_" + itemLinhVucCon.Value + "_QUA_H";
                                    string whereGetInforKhieuNaiActivitySolr = "WHERE: " + whereClauseActivity + " AND MaTinhId:" + itemMaTinh.Value + " AND LoaiKhieuNaiId:" + itemLoaiKhieuNai.Value + " AND LinhVucChungId:" + itemLinhVucChung.Value + " AND LinhVucConId:" + itemLinhVucCon.Value;
                                    // Lấy ra lĩnh vực chung không có lĩnh vực con
                                    if (itemLinhVucChung.Value != "0" && itemLinhVucCon.Value == "0")
                                    {
                                        //for (int i = 0; i < dtResult.Rows.Count; i++)
                                        //{
                                        //    if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                                        //    {
                                        //        dtResult.Rows[i][itemLinhVucChung.Value + "_0"] = itemLinhVucCon.Count;
                                        //        break;
                                        //    }
                                        //} // end for(int i=0;i<dtResult.Rows.Count;i++)
                                    }
                                    else
                                    {
                                        for (int i = 0; i < dtResult.Rows.Count; i++)
                                        {
                                            if (dtResult.Rows[i]["MaTinh"].ToString() == itemMaTinh.Value)
                                            {
                                                foreach (DataColumn col in dtResult.Columns)
                                                {
                                                    if (col.ColumnName == colName_quahan)
                                                    {
                                                        var lstKhieuNaiId = "";
                                                        foreach (var item in itemLinhVucCon.ChildPivots)
                                                        {
                                                            lstKhieuNaiId += " " + item.Value;
                                                        }
                                                        //dtResult.Rows[i][col.ColumnName] = itemLinhVucCon.ChildPivots.Count + whereGetInforKhieuNaiActivitySolr;
                                                        dtResult.Rows[i][col.ColumnName] = itemLinhVucCon.ChildPivots.Count + "WHERE: " + lstKhieuNaiId;
                                                    }
                                                }

                                                break;
                                            }
                                        } // end for(int i=0;i<dtResult.Rows.Count;i++)
                                    }
                                } // end foreach(var itemLinhVucCon in itemLinhVucChung.ChildPivots)
                            } // end foreach(var itemLinhVucChung in itemLoaiKhieuNai.ChildPivots)
                        } // end foreach (var itemLoaiKhieuNai in itemMaTinh.ChildPivots)
                    } // end  foreach (var itemMaTinh in pivotMaTinh.Value)
                } // end foreach (var pivotMaTinh in listKhieuNaiInfo.FacetPivots)
            }
            return dtResult;
        }
        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 14/07/2015
        /// </summary>
        /// <param name="listDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoTyLeKNTonDongQuaHanPhongBan_Solr(List<DateTime> listDate)
        {
            if (listDate == null || listDate.Count == 0)
                return null;

            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("DoiTacId");
            dtResult.Columns.Add("DoiTac");

            for (int i = 0; i < listDate.Count; i++)
            {
                dtResult.Columns.Add(listDate[i].ToString("ddMMyyyy"));
            }

            List<DoiTacInfo> listDoiTac = new DoiTacImpl().GetListHierarchy();
            if (listDoiTac == null || listDoiTac.Count == 0)
                return null;

            listDoiTac.RemoveAll(delegate (DoiTacInfo obj)
            { return obj.DoiTacType == (byte)DoiTacInfo.DoiTacTypeValue.VNPTTT || obj.DoiTacType == (byte)DoiTacInfo.DoiTacTypeValue.TDD_VNP; });


            for (int i = 0; i < listDoiTac.Count; i++)
            {
                DataRow row = dtResult.NewRow();
                row["DoiTacId"] = listDoiTac[i].Id;

                string space = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                for (int j = 1; j < listDoiTac[i].Level; j++)
                {
                    space += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                }

                row["DoiTac"] = space + listDoiTac[i].TenDoiTac;

                dtResult.Rows.Add(row);
            }

            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            for (int i = 0; i < listDate.Count; i++)
            {
                DateTime curDate = new DateTime(listDate[i].Year, listDate[i].Month, listDate[i].Day, 23, 59, 59);

                // Số lượng đang xử lý
                QueryOptions qoKhieuNai = new QueryOptions();
                //Lấy ra những trường nào
                var extraParam = new Dictionary<string, string>();
                extraParam.Add("fl", @"Id,KhieuNaiId, HanhDong, DoiTacXuLyId, NgayQuaHan");
                qoKhieuNai.ExtraParams = extraParam;
                qoKhieuNai.Start = 0;
                qoKhieuNai.Rows = int.MaxValue;

                SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
                SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
                List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
                listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
                listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

                GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
                gpTonDongKyTruoc.Fields = listGroupField;
                gpTonDongKyTruoc.Limit = 1;
                gpTonDongKyTruoc.Main = true;
                gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
                qoKhieuNai.Grouping = gpTonDongKyTruoc;

                DateTime nextToDate = curDate.AddDays(1);
                string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND (KhieuNai_NgayDongKN : [{1} TO *])", ConvertUtility.ConvertDateTimeToSolr(curDate, 23, 59, 59, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
                SolrQuery solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
                List<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoKhieuNai);

                if (listKhieuNaiInfo != null)
                {
                    foreach (DataRow row in dtResult.Rows)
                    {
                        int doiTacId = ConvertUtility.ToInt32(row["DoiTacId"]);
                        row[curDate.ToString("ddMMyyyy")] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.DoiTacXuLyId == doiTacId && obj.NgayQuaHan <= curDate; }).Count;
                    }
                }
            } // end for(int i=0;i<listDate.Count;i++)


            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 22/07/2015
        /// </summary>
        /// <param name="listDoiTacXuLyId"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> DanhSachKhieuNaiTonDongQuaHan(List<int> listDoiTacXuLyId, DateTime toDate)
        {
            List<string> listGroupField = new List<string>();
            listGroupField.Add("KhieuNaiId");

            // Số lượng đang xử lý
            QueryOptions qoKhieuNai = new QueryOptions();
            //Lấy ra những trường nào
            var extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", @"Id,KhieuNaiId, SoThueBao, HanhDong, DoiTacXuLyId, NgayQuaHan, LoaiKhieuNai, LinhVucChung, LinhVucCon, PhongBanXuLyTruocId, PhongBanXuLyId, NgayTiepNhan, KhieuNai_NgayTiepNhan, NgayTiepNhan_NguoiXuLy, NguoiXuLy, NoiDungPA");
            qoKhieuNai.ExtraParams = extraParam;
            qoKhieuNai.Start = 0;
            qoKhieuNai.Rows = int.MaxValue;

            SolrNet.SortOrder sortOrderTonDongTruocKyNgayTiepNhan = new SolrNet.SortOrder("NgayTiepNhan", Order.DESC);
            SolrNet.SortOrder sortOrderTonDongTruocKyActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrderTonDongTruocKy = new List<SolrNet.SortOrder>();
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyNgayTiepNhan);
            listSortOrderTonDongTruocKy.Add(sortOrderTonDongTruocKyActivityId);

            GroupingParameters gpTonDongKyTruoc = new GroupingParameters();
            gpTonDongKyTruoc.Fields = listGroupField;
            gpTonDongKyTruoc.Limit = 1;
            gpTonDongKyTruoc.Main = true;
            gpTonDongKyTruoc.OrderBy = listSortOrderTonDongTruocKy;
            qoKhieuNai.Grouping = gpTonDongKyTruoc;

            DateTime nextToDate = toDate.AddMinutes(1);
            string whereClauseTonDongKyTruoc = string.Format("NgayTiepNhan:[* TO {0}] AND (KhieuNai_NgayDongKN : [{1} TO *])", ConvertUtility.ConvertDateTimeToSolr(toDate, toDate.Hour, toDate.Minute, toDate.Second, 999), ConvertUtility.ConvertDateTimeToSolr(nextToDate));
            SolrQuery solrQuery = new SolrQuery(whereClauseTonDongKyTruoc);
            List<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoKhieuNai);

            if (listKhieuNaiInfo != null)
            {
                listKhieuNaiInfo.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                { return !listDoiTacXuLyId.Contains(obj.DoiTacXuLyId) || obj.NgayQuaHan > toDate; });
            }

            return listKhieuNaiInfo;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 20/08/2015
        /// </summary>
        /// <param name="khuVucId"></param>
        /// <param name="doiTacId"></param>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="nguonKhieuNai"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> DanhSachKhieuNaiGiamTru_Solr(int khuVucId, int doiTacId, int phongBanXuLyId, DateTime fromDate, DateTime toDate, int nguonKhieuNai)
        {
            List<KhieuNai_ReportInfo> listKhieuNai = new List<KhieuNai_ReportInfo>();

            var queryOption = new QueryOptions();

            //Lấy ra những trường nào
            var extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", @"Id, SoThueBao, NoiDungPA, LinhVucCon, NgayDongKN, KQXuLy_SHCV, NoiDungXuLy, SoTienKhauTru_TKC
                                                , SoTienKhauTru_KN, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_Khac
                                                , SoTienKhauTru_TS_GPRS, SoTienKhauTru_TS_CP, SoTienKhauTru_TS_Thoai
                                                , SoTienKhauTru_TS_SMS, SoTienKhauTru_TS_IR, SoTienKhauTru_TS_Khac, NoiDungXuLyDongKN, DoiTacXuLyId");

            //extraParam.Add("fl", @"Id");

            queryOption.ExtraParams = extraParam;

            queryOption.Start = 0;
            queryOption.Rows = int.MaxValue;

            // Danh sách nội dung công việc
            //Where điều kiện
            string whereClause = string.Empty;

            whereClause = string.Format("NgayDongKN:[{1} TO {2}] {0}", whereClause, ConvertUtility.ConvertDateTimeToSolr(fromDate), ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999));

            if (nguonKhieuNai != -1)
            {
                whereClause = string.Format(" AND KhieuNaiFrom:{0}", nguonKhieuNai);
            }

            if (phongBanXuLyId > 0)
            {
                whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, phongBanXuLyId);
            }

            if (doiTacId > 0)
            {
                whereClause = string.Format("{0} AND DoiTacXuLyId : {1}", whereClause, doiTacId);
            }

            if (khuVucId > 0)
            {
                whereClause = string.Format("{0} AND KhuVucXuLyId : {1}", whereClause, khuVucId);
            }


            var solrQuery = new SolrQuery(whereClause);

            //listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_KETQUAXULY, solrQuery, queryOption);
            listKhieuNai = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOption);
            if (listKhieuNai != null)
            {
                listKhieuNai.RemoveAll(delegate (KhieuNai_ReportInfo obj)
                {
                    return obj.SoTienKhauTru_Data + obj.SoTienKhauTru_Khac + obj.SoTienKhauTru_KM
                     + obj.SoTienKhauTru_KM1 + obj.SoTienKhauTru_KM2 + obj.SoTienKhauTru_TKC
                     + obj.SoTienKhauTru_TS_CP + obj.SoTienKhauTru_TS_GPRS + obj.SoTienKhauTru_TS_IR
                     + obj.SoTienKhauTru_TS_Khac + obj.SoTienKhauTru_TS_SMS + obj.SoTienKhauTru_TS_Thoai == 0;
                });
            }

            return listKhieuNai;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 24/11/2015
        /// Todo : Lấy dữ liệu khiếu nại dịch vụ giá trị gia tăng của tập đoàn
        /// </summary>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoKhieuNaiDichVuGTGTTapDoan_Solr(DateTime fromDate, DateTime toDate)
        {
            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("LinhVucConId");
            dtResult.Columns.Add("TenLinhVucCon");
            dtResult.Columns.Add("SLTiepNhan");
            dtResult.Columns.Add("SLDaDong");

            // xu ly lấy lỗi thuộc về khiếu nại
            var dsLoiKn = string.Empty;
            List<LoiKhieuNaiInfo> lstLoiKN = new LoiKhieuNaiImpl().GetListDynamic("", "Loai=2 AND HoatDong=1 AND cap=2", "");
            if (lstLoiKN != null && lstLoiKN.Count > 0)
            {
                foreach (var item in lstLoiKN)
                {
                    dsLoiKn += item.Id + " ";
                }
                dsLoiKn = string.Format("AND ChiTietLoiId: ({0})", dsLoiKn);
            }


            // Duong DV
            // Thay đổi chi tiết lỗi cũ vào đây
            // Ngày 2016 07 18
            string dsLoiKNCu = "8, 9 ,10 ,11 ,12 ,13 ,14 ,16 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,34 ,35 ,48 ,49 ,50 ,51 ,52 ,53 ,55 ,57 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,68 ,70 ,73 ,76 ,78 ,80 ,81 ,83 ,84 ,85 ,86 ,87 ,89 ,90 ,91 ,92 ,94 ,96 ,97 ,99 ,100 ,102 ,106 ,107 ,108 ,109 ,110 ,114 ,117 ,118 ,119 ,127 ,128 ,130 ,136 ,137 ,144 ,145 ,150 ,152 ,155 ,158 ,160 ,161 ,163 ,164 ,165 ,166 ,170 ,172 ,175 ,176 ,178";
            string[] dsLoiKNCuTemp = dsLoiKNCu.Split(',');
            List<string> newDS = new List<string>();
            foreach (string tmp in dsLoiKNCuTemp)
                newDS.Add(tmp.Trim());
            dsLoiKn = string.Format("AND ChiTietLoiId: ({0})", string.Join(" ", newDS));

            //string whereClauseTiepNhan = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND LoaiKhieuNaiId:(1265 1339 1467 1537 1661 1726) AND LinhVucConId:[1 TO *]", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            //string whereClauseDaXuLy = string.Format("NgayDongKNSort:[{0} TO {1}] AND LoaiKhieuNaiId:(1265 1339 1467 1537 1661 1726) AND ChiTietLoiId:(8 9 10 11 12 13 14 16 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 34 35 48 49 50 51 52 53 55 57 59 60 61 62 63 64 65 66 68 70 73 76 78 80 81 83 84 85 86 87 89 90 91 92 94 96 97 99 100 102 106 107 108 109 110 114 117 118 119 127 128 130 136 137 144 145 150 152 155 158 160 161 163 164 165 166 170 172 175 176 178) AND LinhVucConId:[1 TO *]", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));

            string whereClauseTiepNhan = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND LoaiKhieuNaiId:(1265 1339 1467 1537 1661 1726) AND LinhVucConId:[1 TO *]", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            string whereClauseDaXuLy = string.Format("NgayDongKNSort:[{0} TO {1}] AND LoaiKhieuNaiId:(1265 1339 1467 1537 1661 1726) {2} AND LinhVucConId:[1 TO *]", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), dsLoiKn);

            List<LoaiKhieuNaiInfo> listLoaiKhieuNaiInfo = new LoaiKhieuNaiImpl().GetListDynamic("*", "Cap = 3 AND ParentLoaiKHieuNaiId IN (1265, 1339)", "");
            if (listLoaiKhieuNaiInfo == null || listLoaiKhieuNaiInfo.Count == 0)
                return null;

            for (int i = 0; i < listLoaiKhieuNaiInfo.Count; i++)
            {
                DataRow row = dtResult.NewRow();
                row["LinhVucConId"] = listLoaiKhieuNaiInfo[i].Id;
                row["TenLinhVucCon"] = listLoaiKhieuNaiInfo[i].Name;
                row["SLTiepNhan"] = 0;
                row["SLDaDong"] = 0;
                dtResult.Rows.Add(row);
            }

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            solrQuery = new SolrQuery(whereClauseTiepNhan);
            QueryOptions qoTiepNhan = new QueryOptions();
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"Id");
            qoTiepNhan.ExtraParams = extraParamTiepNhan;
            qoTiepNhan.Start = 0;
            qoTiepNhan.Rows = 0;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetFieldQuery sffq = new SolrFacetFieldQuery("LinhVucConId");
            facetParam.Queries.Add(sffq);
            qoTiepNhan.Facet = facetParam;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);
            if (listKhieuNaiInfo != null)
            {
                GetCountOfFacet(dtResult, "LinhVucConId", "SLTiepNhan", listKhieuNaiInfo);
            }

            solrQuery = new SolrQuery(whereClauseDaXuLy);
            QueryOptions qoDaXuLy = new QueryOptions();
            var extraParamDaXuLy = new Dictionary<string, string>();
            extraParamDaXuLy.Add("fl", @"Id");
            qoDaXuLy.ExtraParams = extraParamDaXuLy;
            qoDaXuLy.Start = 0;
            qoDaXuLy.Rows = 0;

            facetParam = new FacetParameters();
            sffq = new SolrFacetFieldQuery("LinhVucConId");
            facetParam.Queries.Add(sffq);
            qoDaXuLy.Facet = facetParam;
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoDaXuLy);
            if (listKhieuNaiInfo != null)
            {
                GetCountOfFacet(dtResult, "LinhVucConId", "SLDaDong", listKhieuNaiInfo);
            }

            return dtResult;
        }

        /// <summary>
        /// Dev: Đào Van Dương
        /// </summary>
        public DataTable BaoCaoKhieuNaiDoanhThuDichVuGTGTTapDoan_Solr_Tu201605(int month, int year, DataTable tblReport)
        {

            DateTime fromDate = new DateTime(year, month, 1);
            DateTime toDate = (new DateTime(year, month + 1, 1)).AddSeconds(-1);

            string dsLoiKn = string.Empty;

            // DateTime dtBaoCao = new DateTime(2016, 9, 1).EndOfMonth();

            if (year <= 2016 && month <= 9) // <= 2016-09-31
            {
                List<LoiKhieuNaiInfo> lstLoiKN = new LoiKhieuNaiImpl().GetListDynamic(string.Empty, "Loai = 2 AND HoatDong = 1 AND Cap = 2", string.Empty);
                if (lstLoiKN != null && lstLoiKN.Count > 0)
                {
                    foreach (LoiKhieuNaiInfo item in lstLoiKN)
                    {
                        dsLoiKn += item.Id + " ";
                    }
                    dsLoiKn = string.Format("AND ChiTietLoiId: ({0})", dsLoiKn);
                }
            }
            else // Từ tháng 10 năm 2016
            {
                DateTime dtBaoCao = new DateTime(year, month, 1).EndOfMonth();


                // Điều kiện chọn ra Khiếu lại có nguyên nhân là lỗi
                string whereClause = string.Format("Loai >= 2 AND HoatDong = 1 AND Cap = 2 AND TuNgay <= {0} AND DenNgay >= {1}", dtBaoCao.StartOfMonth().ToString("yyyyMMdd"), dtBaoCao.EndOfMonth().ToString("yyyyMMdd"));

                Helper.GhiLogs(whereClause);

                List<LoiKhieuNaiInfo> lstLoiKN = new LoiKhieuNaiImpl().GetListDynamic(string.Empty, whereClause, string.Empty);
                if (lstLoiKN != null && lstLoiKN.Count > 0)
                {
                    foreach (LoiKhieuNaiInfo item in lstLoiKN)
                    {
                        dsLoiKn += item.Id + " ";
                    }
                    dsLoiKn = string.Format("AND ChiTietLoiId: ({0})", dsLoiKn);
                }
            }
            #region ChiTietLoiId: Tháng 5, 6 năm 2016 chạy theo điều kiện cũ

            // Chỉ tháng 5, 6 năm 2016
            if ((year == 2016) && (month == 5 || month == 6))
            {
                string dsLoiKNCu = "8, 9 ,10 ,11 ,12 ,13 ,14 ,16 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,34 ,35 ,48 ,49 ,50 ,51 ,52 ,53 ,55 ,57 ,59 ,60 ,61 ,62 ,63 ,64 ,65 ,66 ,68 ,70 ,73 ,76 ,78 ,80 ,81 ,83 ,84 ,85 ,86 ,87 ,89 ,90 ,91 ,92 ,94 ,96 ,97 ,99 ,100 ,102 ,106 ,107 ,108 ,109 ,110 ,114 ,117 ,118 ,119 ,127 ,128 ,130 ,136 ,137 ,144 ,145 ,150 ,152 ,155 ,158 ,160 ,161 ,163 ,164 ,165 ,166 ,170 ,172 ,175 ,176 ,178";
                string[] dsLoiKNCuTemp = dsLoiKNCu.Split(',');
                List<string> newDS = new List<string>();
                foreach (string tmp in dsLoiKNCuTemp)
                    newDS.Add(tmp.Trim());
                dsLoiKn = string.Format("AND ChiTietLoiId: ({0})", string.Join(" ", newDS));
            }
            #endregion

            foreach (DataRow row in tblReport.Rows)
            {
                try
                {
                    // Lần thử 1
                    GetData(fromDate, toDate, dsLoiKn, row);
                }
                catch (Exception ex1)
                {
                    try
                    {
                        // Thử lại lần 2
                        Helper.GhiLogs(ex1);
                        GetData(fromDate, toDate, dsLoiKn, row);
                    }
                    catch (Exception ex2)
                    {
                        try
                        {
                            // Thử lại lần 3
                            Helper.GhiLogs(ex2);
                            GetData(fromDate, toDate, dsLoiKn, row);
                        }
                        catch (System.Exception ex3)
                        {
                            // Thử lại lần 4
                            Helper.GhiLogs(ex3);
                            GetData(fromDate, toDate, dsLoiKn, row);
                        }
                    }

                }
            }
            return tblReport;
        }

        private void GetData(DateTime fromDate, DateTime toDate, string dsLoiKn, DataRow row)
        {
            string whereSolr = string.Empty;
            whereSolr += string.Format("NgayDongKNSort:[{0} TO {1}]", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            whereSolr += string.Format(" {0}", dsLoiKn);
            whereSolr += string.Format(" AND LinhVucConId: ({0})", row["LinhVucConIds"].ToString().Replace(",", " "));

            SolrQuery solrQuery = new SolrQuery(whereSolr);
            QueryOptions qoDaXuLy = new QueryOptions();
            var extraParamDaXuLy = new Dictionary<string, string>();
            extraParamDaXuLy.Add("fl", @"Id");
            qoDaXuLy.ExtraParams = extraParamDaXuLy;
            qoDaXuLy.Start = 0;
            qoDaXuLy.Rows = 0;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetFieldQuery sffq = new SolrFacetFieldQuery("LinhVucConId");
            facetParam.Queries.Add(sffq);
            qoDaXuLy.Facet = facetParam;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoDaXuLy);

            int soLuong = listKhieuNaiInfo.NumFound;
            if (soLuong > 0)
                row["TongSoKhieuNai"] = soLuong;
        }

        #region nvhung 04/11/2014 Báo cáo tổng hợp KN theo loại KN toàn mạng vnp

        #region Func dùng chung cho solr query

        private List<KhieuNai_ReportInfo> GetDataFromSolr(string fieldList, Dictionary<string, Order> sortOrders, string swhereClause)
        {
            List<KhieuNai_ReportInfo> lstKhieuNaiInfo = null;
            List<string> listGroupField = new List<string>();
            listGroupField.Add("Id");

            SolrQuery solrQuery = null;

            //Các đối tượng dùng chung cho Solr query 
            //Add SortOrder
            Dictionary<string, string> extParams = new Dictionary<string, string>();
            extParams.Add("fl", fieldList);
            QueryOptions qo = new QueryOptions();
            qo.ExtraParams = extParams;
            qo.Start = 0;
            qo.Rows = int.MaxValue;

            List<SolrNet.SortOrder> lstRangeSortOrder = new List<SolrNet.SortOrder>();

            if (sortOrders.Count > 0)
            {
                foreach (var obj in sortOrders)
                {
                    lstRangeSortOrder.Add(new SolrNet.SortOrder(obj.Key, obj.Value));
                }
            }
            GroupingParameters gp = new GroupingParameters();
            gp.Fields = listGroupField;
            gp.Main = true;
            gp.OrderBy = lstRangeSortOrder;
            qo.Grouping = gp;
            solrQuery = new SolrQuery(swhereClause);
            lstKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qo);
            return lstKhieuNaiInfo;
        }

        #endregion

        //public DataTable GetTongHopKhieuNaiTheoLoaiKhieuNaiToanMang_Solr(int doiTacId, DateTime fromDate, DateTime toDate)
        //{
        //    int VNP = 1;
        //    DataTable dt = new DataTable();
        //    List<DoiTacInfo> lstDoiTac = null;
        //    dt.Columns.Add("STT");
        //    dt.Columns.Add("LoaiKhieuNai");
        //    dt.Columns.Add("LoaiKhieuNaiID");
        //    dt.Columns.Add("SLTiepNhan");
        //    dt.Columns.Add("SLDaDongTrongKy");
        //    dt.Columns.Add("SLDaDong");
        //    dt.Columns.Add("SLQuaHanToanTrinh");
        //    dt.Columns.Add("SLQuaHanToanTrinhTrongKy");

        //    //Danh sách loại khiếu nại cấp 1
        //    List<KhieuNai_ReportInfo> lstKhieuNaiInfo = null;
        //    List<LoaiKhieuNaiInfo> lstLoaiKhieuNai = new List<LoaiKhieuNaiInfo>();
        //    lstLoaiKhieuNai = new LoaiKhieuNaiImpl().LoaiKhieuNai_GetAllByParams("Id,Name", "ParentId=0 AND [Status]=1", "Sort ASC");
        //    //lấy danh sách doitac có donvitructhuoc thuộc khuvucID
        //    string sKhuVucId = string.Empty;
        //    string sKhuVucXuLyId = string.Empty;
        //    if (doiTacId != VNP)//neu don vi lay bao cao =VNP (toàn mạng)
        //    {
        //        sKhuVucId = "AND KhuVucId:" + doiTacId.ToString();
        //        sKhuVucXuLyId = "AND KhuVucXuLyId:" + doiTacId.ToString();
        //    }          

        //    string sFromDate = fromDate.ToString("yyyyMMdd");
        //    string sToDate = toDate.ToString("yyyyMMdd");
        //    toDate = toDate.AddDays(1);
        //    string sNgayQuaHanTK = toDate.ToString("yyyyMMdd");

        //    if (lstLoaiKhieuNai != null && lstLoaiKhieuNai.Count > 0)
        //    {
        //        for (int i = 0; i < lstLoaiKhieuNai.Count; i++)
        //        {
        //            DataRow dr = dt.NewRow();
        //            dr["SLTiepNhan"] = 0;
        //            dr["SLDaDongTrongKy"] = 0;
        //            dr["SLDaDong"] = 0;
        //            dr["SLQuaHanToanTrinh"] = 0;
        //            dr["SLQuaHanToanTrinhTrongKy"] = 0;

        //            dr["STT"] = i + 1;
        //            dr["LoaiKhieuNai"] = lstLoaiKhieuNai[i].Name;
        //            dr["LoaiKhieuNaiID"] = lstLoaiKhieuNai[i].Id;
        //            ///lay du lieu tu SOLR
        //            Dictionary<string, Order> dSortOrders = new Dictionary<string, Order>();
        //            dSortOrders.Add("NgayTiepNhan", Order.DESC);
        //            dSortOrders.Add("Id", Order.DESC);
        //            //Số lượng tiếp nhận
        //            string fList = "Id,LoaiKhieuNaiId,TrangThai,NgayTiepNhanSort,NgayDongKNSort";
        //            string sWhere = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND LoaiKhieuNaiId:({2}) {3}", sFromDate, sToDate, lstLoaiKhieuNai[i].Id.ToString(),sKhuVucId);
        //            lstKhieuNaiInfo = GetDataFromSolr(fList, dSortOrders, sWhere);
        //            if (lstKhieuNaiInfo != null && lstKhieuNaiInfo.Count > 0)
        //            {
        //                dr["SLTiepNhan"] = lstKhieuNaiInfo.Count();
        //            }
        //            //Số lượng đã đóng trong kỳ
        //            string sWhereDaDongTK = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND NgayDongKNSort:[{0} TO {1}] AND LoaiKhieuNaiId:{2} {3}", sFromDate, sToDate, lstLoaiKhieuNai[i].Id.ToString(),sKhuVucXuLyId);
        //            lstKhieuNaiInfo = GetDataFromSolr(fList, dSortOrders, sWhereDaDongTK);
        //            if (lstKhieuNaiInfo != null && lstKhieuNaiInfo.Count > 0)
        //            {
        //                dr["SLDaDongTrongKy"] = lstKhieuNaiInfo.Count();
        //            }
        //            //Số lượng đã đóng (bao gom ton ky truoc)                    
        //            string sWhereDaDong = string.Format("NgayDongKNSort:[{0} TO {1}] AND LoaiKhieuNaiId:{2} {3}", sFromDate, sToDate, lstLoaiKhieuNai[i].Id.ToString(),sKhuVucXuLyId);
        //            lstKhieuNaiInfo = GetDataFromSolr(fList, dSortOrders, sWhereDaDong);
        //            if (lstKhieuNaiInfo != null && lstKhieuNaiInfo.Count > 0)
        //            {
        //                dr["SLDaDong"] = lstKhieuNaiInfo.Count();
        //            }

        //            //Số lượng toàn trình quá hạn trong kỳ
        //            string fListQHToanTrinh = "Id,LoaiKhieuNaiId,TrangThai,NgayQuaHan";
        //            string sWhereQHToanTrinh = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND (NgayDongKNSort:[{2} TO *] OR NgayDongKNSort : 0) AND NgayQuaHanSort:[* TO {1}] AND LoaiKhieuNaiId:{3} {4}", sFromDate, sToDate, sNgayQuaHanTK, lstLoaiKhieuNai[i].Id.ToString(),sKhuVucXuLyId);
        //            lstKhieuNaiInfo = GetDataFromSolr(fListQHToanTrinh, dSortOrders, sWhereQHToanTrinh);
        //            dr["SLQuaHanToanTrinh"] = lstKhieuNaiInfo.Count();

        //            //So luong qua han toan trinh trong ky(bao gom ton ky truoc)                    
        //            string sWhereQHAndTTK = string.Format("(NgayDongKNSort:[{2} TO *] OR NgayDongKNSort : 0) AND NgayQuaHanSort:[* TO {1}] AND LoaiKhieuNaiId:{2} {3}", sNgayQuaHanTK, sToDate, lstLoaiKhieuNai[i].Id.ToString(), sKhuVucXuLyId);
        //            lstKhieuNaiInfo = GetDataFromSolr(fListQHToanTrinh, dSortOrders, sWhereQHAndTTK);
        //            dr["SLQuaHanToanTrinhTrongKy"] = lstKhieuNaiInfo.Count();

        //            dt.Rows.Add(dr);
        //        }
        //    }
        //    //Free memories            
        //    lstKhieuNaiInfo = null;

        //    return dt;
        //}

        #endregion
        #endregion

        #region Báo cáo đối tác VNP

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 06/07/2015
        /// </summary>
        /// <param name="doiTacId"></param>
        /// <param name="phongBanId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoSoLuongChuyenXuLyVNPTheoNguoiDung(int doiTacId, int phongBanId, DateTime fromDate, DateTime toDate)
        {
            string sFromDate = ConvertUtility.ConvertDateTimeToSolr(fromDate);
            string sToDate = ConvertUtility.ConvertDateTimeToSolr(toDate, 23, 59, 59, 999);

            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("NguoiXuLy");
            dtResult.Columns.Add("SoLuong");

            List<NguoiSuDungInfo> listNguoiSuDung = new NguoiSuDungImpl().GetListDynamicJoin("a.*", " INNER JOIN PhongBan_User b ON a.Id = b.NguoiSuDungId", "b.PhongBanId=" + phongBanId, "TenTruyCap ASC");
            if (listNguoiSuDung != null)
            {
                for (int i = 0; i < listNguoiSuDung.Count; i++)
                {
                    DataRow row = dtResult.NewRow();
                    row["NguoiXuLy"] = listNguoiSuDung[i].TenTruyCap;
                    row["SoLuong"] = 0;
                    dtResult.Rows.Add(row);
                }
            }

            string whereClause = string.Format("NgayTiepNhan : [{0} TO {1}] AND HanhDong:2 AND DoiTacXuLyTruocId:{2} AND DoiTacXuLyId:({3} {4} {5})", sFromDate, sToDate, doiTacId, DoiTacInfo.DoiTacIdValue.DKT1, DoiTacInfo.DoiTacIdValue.DKT2, DoiTacInfo.DoiTacIdValue.DKT3);
            SolrQuery solrQuery = new SolrQuery(whereClause);
            QueryOptions qoToanMang = new QueryOptions();
            var extraParamDongKN = new Dictionary<string, string>();
            extraParamDongKN.Add("fl", @"Id, KhieuNaiId, SoThueBao, NguoiXuLyTruoc, NgayTiepNhan, TenPhongBanXuLy");
            qoToanMang.ExtraParams = extraParamDongKN;
            qoToanMang.Start = 0;
            qoToanMang.Rows = int.MaxValue;

            List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            listSortOrder.Add(new SolrNet.SortOrder("Id", Order.DESC));

            List<string> listField = new List<string>();
            listField.Add("KhieuNaiId");
            GroupingParameters gp = new GroupingParameters();
            gp.Fields = listField;
            gp.Limit = 1;
            gp.Main = true;
            gp.OrderBy = listSortOrder;
            qoToanMang.Grouping = gp;

            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoToanMang);
            if (listKhieuNaiInfo != null)
            {
                foreach (DataRow row in dtResult.Rows)
                {
                    row["SoLuong"] = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                    { return obj.NguoiXuLyTruoc.ToLower() == row["NguoiXuLy"].ToString().ToString(); }).Count;
                }
            }

            return dtResult;
        }

        #endregion

        #region Báo cáo dạng biểu đồ

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 30/10/2013
        /// Todo : Lấy dữ liệu cho báo cáo dạng biểu đồ
        /// </summary>
        /// <param name="typeReport">
        /// Lĩnh vực thống kê
        ///     = 1 : Loại khiếu nại
        ///     = 2 : Lĩnh vực chung
        ///     = 3 : Lĩnh vực con
        /// </param>
        /// <param name="listLoaiKhieuNaiId"></param>
        /// <param name="listLinhVucChungId"></param>
        /// <param name="listLinhVucConId"></param>
        /// <param name="listDate"></param>
        /// <returns>
        ///     Trả về datatable
        ///     - Cột : LoaiKhieuNaiId, Tên loại khiếu nại, các khoảng thời gian
        ///     - Dòng : Số lượng loại khiếu nại tiếp nhận theo từng khoảng thời gian
        /// </returns>
        public DataTable BaoCaoBieuDoSoLuongKhieuNai_Solr(int doiTacTiepNhanId, int phongBanTiepNhanId, byte reportType, string listLoaiKhieuNaiId, string listLinhVucChungId, string listLinhVucConId, string listDate)
        {
            if (listDate == null || listDate.Length == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            string facetFieldQuery = string.Empty;
            string whereClauseLoaiKhieuNai = string.Empty;
            string sLinhVucChungId = string.Empty;
            string sLinhVucConId = string.Empty;

            if (listLinhVucChungId.Length > 0)
            {
                sLinhVucChungId = listLinhVucChungId.Replace(",", " ");
            }

            if (listLinhVucConId.Length > 0)
            {
                sLinhVucConId = listLinhVucConId.Replace(",", " ");
            }

            DataTable dtReport = new DataTable();
            dtReport.Columns.Add("LoaiKhieuNaiId");
            dtReport.Columns.Add("Name");

            string[] arrLoaiKhieuNaiId = listLoaiKhieuNaiId.Split(',');
            string[] arrLinhVucChungId = listLinhVucChungId.Split(',');
            string[] arrLinhVucConId = listLinhVucConId.Split(',');
            string[] arryDate = listDate.Split(',');
            for (int i = 0; i < arryDate.Length; i++)
            {
                dtReport.Columns.Add(arryDate[i]);
            }

            switch (reportType)
            {
                case 1:
                    facetFieldQuery = "LoaiKhieuNaiId";
                    for (int i = 0; i < arrLoaiKhieuNaiId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLoaiKhieuNaiId[i];

                        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                        {
                            if (arrLoaiKhieuNaiId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                            {
                                row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                break;
                            }
                        }

                        dtReport.Rows.Add(row);
                    } // end for(int i=0;i<listLoaiKhieuNaiId.Count;i++)

                    if (sLinhVucChungId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format(" AND LinhVucChungId : ({0})", sLinhVucChungId);
                    } // end if (sLinhVucChungId.Length > 0)

                    if (sLinhVucConId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format(" AND LinhVucConId : ({0})", sLinhVucConId);
                    } // end if (sLinhVucConId.Length > 0)


                    break;
                case 2:
                    facetFieldQuery = "LinhVucChungId";
                    for (int i = 0; i < arrLinhVucChungId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLinhVucChungId[i];

                        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                        {
                            if (arrLinhVucChungId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                            {
                                row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                break;
                            }
                        }

                        dtReport.Rows.Add(row);
                    }

                    if (sLinhVucConId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format(" AND LinhVucConId : ({0})", sLinhVucConId);
                    } // end if (sLinhVucConId.Length > 0)

                    break;

                default:
                    facetFieldQuery = "LinhVucConId";
                    for (int i = 0; i < arrLinhVucConId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLinhVucConId[i];

                        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                        {
                            if (arrLinhVucConId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                            {
                                row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                break;
                            }
                        }

                        dtReport.Rows.Add(row);
                    }

                    break;
            }

            QueryOptions queryOption = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"");
            queryOption.ExtraParams = extraParamLoaiKhieuNai;

            queryOption.Start = 0;
            queryOption.Rows = 0;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery(facetFieldQuery);
            facetParam.Queries.Add(facetField);
            queryOption.Facet = facetParam;

            string whereClause = string.Empty;
            string whereClauseDoiTacTiepNhanId = doiTacTiepNhanId != -1 ? " AND DoiTacId:" + doiTacTiepNhanId.ToString() : string.Empty;
            string whereClausePhongBanTiepNhanId = phongBanTiepNhanId != -1 ? " AND PhongBanTiepNhanId:" + phongBanTiepNhanId.ToString() : string.Empty;

            DateTime nullDateTime = new DateTime(1900, 01, 01);
            for (int i = 0; i < arryDate.Length; i++)
            {
                string fromDate = arryDate[i].Split('-')[0];
                string toDate = arryDate[i].Split('-')[1];

                DateTime date = ConvertUtility.ToDateTime(fromDate, "dd/MM/yyyy", nullDateTime);
                fromDate = date.ToString("yyyyMMdd");

                date = ConvertUtility.ToDateTime(toDate, "dd/MM/yyyy", nullDateTime);
                toDate = date.ToString("yyyyMMdd");

                whereClause = string.Format("NgayTiepNhanSort : [{0} TO {1}] {2} {3} {4}", fromDate, toDate, whereClauseDoiTacTiepNhanId, whereClausePhongBanTiepNhanId, whereClauseLoaiKhieuNai);
                solrQuery = new SolrQuery(whereClause);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOption);
                GetCountOfFacet(dtReport, "LoaiKhieuNaiId", arryDate[i], listKhieuNaiInfo);
            }

            return dtReport;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 30/10/2013
        /// Todo : Lấy dữ liệu cho báo cáo dạng biểu đồ
        /// </summary>
        /// <param name="typeReport">
        /// Lĩnh vực thống kê
        ///     = 1 : Loại khiếu nại
        ///     = 2 : Lĩnh vực chung
        ///     = 3 : Lĩnh vực con
        /// </param>
        /// <param name="listLoaiKhieuNaiId"></param>
        /// <param name="listLinhVucChungId"></param>
        /// <param name="listLinhVucConId"></param>
        /// <param name="listDate"></param>
        /// <returns>
        ///     Trả về datatable
        ///     - Cột : LoaiKhieuNaiId, Tên loại khiếu nại, các khoảng thời gian
        ///     - Dòng : Số lượng loại khiếu nại tiếp nhận theo từng khoảng thời gian
        /// </returns>
        public DataTable BaoCaoBieuDoSoLuongKhieuNaiChoXuLy_Solr(byte reportType, int phongBanXuLyId, string listLoaiKhieuNaiId, string listLinhVucChungId, string listLinhVucConId)
        {
            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            string facetFieldQuery = string.Empty;
            string whereClauseLoaiKhieuNai = string.Empty;
            string sLoaiKhieuNaiId = string.Empty;
            string sLinhVucChungId = string.Empty;
            string sLinhVucConId = string.Empty;

            if (listLoaiKhieuNaiId.Length > 0)
            {
                sLoaiKhieuNaiId = listLoaiKhieuNaiId.Replace(",", " ");
            }

            if (listLinhVucChungId.Length > 0)
            {
                sLinhVucChungId = listLinhVucChungId.Replace(",", " ");
            }

            if (listLinhVucConId.Length > 0)
            {
                sLinhVucConId = listLinhVucConId.Replace(",", " ");
            }

            DataTable dtReport = new DataTable();
            dtReport.Columns.Add("LoaiKhieuNaiId");
            dtReport.Columns.Add("Name");
            dtReport.Columns.Add("SoLuongKNChoXuLy");

            string[] arrLoaiKhieuNaiId = listLoaiKhieuNaiId.Split(',');
            string[] arrLinhVucChungId = listLinhVucChungId.Split(',');
            string[] arrLinhVucConId = listLinhVucConId.Split(',');

            switch (reportType)
            {
                case 1:
                    facetFieldQuery = "LoaiKhieuNaiId";
                    for (int i = 0; i < arrLoaiKhieuNaiId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLoaiKhieuNaiId[i];

                        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                        {
                            if (arrLoaiKhieuNaiId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                            {
                                row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                break;
                            }
                        }

                        dtReport.Rows.Add(row);
                    } // end for(int i=0;i<listLoaiKhieuNaiId.Count;i++)

                    if (sLinhVucChungId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucChungId : ({1})", whereClauseLoaiKhieuNai, sLinhVucChungId);
                    } // end if (sLinhVucChungId.Length > 0)

                    if (sLinhVucConId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucConId : ({1})", whereClauseLoaiKhieuNai, sLinhVucConId);
                    } // end if (sLinhVucConId.Length > 0)


                    break;
                case 2:
                    facetFieldQuery = "LinhVucChungId";
                    for (int i = 0; i < arrLinhVucChungId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLinhVucChungId[i];

                        if (arrLinhVucChungId[i] != "0")
                        {
                            for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                            {
                                if (arrLinhVucChungId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                                {
                                    row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            row["Name"] = "Lĩnh vực chung khác";
                        }


                        dtReport.Rows.Add(row);
                    }

                    if (sLoaiKhieuNaiId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LoaiKhieuNaiId : ({1})", whereClauseLoaiKhieuNai, sLoaiKhieuNaiId);
                    }

                    if (sLinhVucConId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucConId : ({1})", whereClauseLoaiKhieuNai, sLinhVucConId);
                    } // end if (sLinhVucConId.Length > 0)

                    break;

                default:
                    facetFieldQuery = "LinhVucConId";
                    for (int i = 0; i < arrLinhVucConId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLinhVucConId[i];

                        if (arrLinhVucConId[i] != "0")
                        {
                            for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                            {
                                if (arrLinhVucConId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                                {
                                    row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            row["Name"] = "Lĩnh vực con khác";
                        }


                        dtReport.Rows.Add(row);
                    }

                    if (sLoaiKhieuNaiId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LoaiKhieuNaiId : ({1})", whereClauseLoaiKhieuNai, sLoaiKhieuNaiId);
                    }

                    if (sLinhVucChungId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucChungId : ({1})", whereClauseLoaiKhieuNai, sLinhVucChungId);
                    } // end if (sLinhVucConId.Length > 0)

                    break;
            }

            if (phongBanXuLyId > 0)
            {
                whereClauseLoaiKhieuNai = string.Format("{0} AND PhongBanXuLyId : {1}", whereClauseLoaiKhieuNai, phongBanXuLyId);
            }

            QueryOptions queryOption = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"");
            queryOption.ExtraParams = extraParamLoaiKhieuNai;

            queryOption.Start = 0;
            queryOption.Rows = 0;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery(facetFieldQuery);
            facetParam.Queries.Add(facetField);
            queryOption.Facet = facetParam;

            string whereClause = string.Format("-TrangThai:3 {0}", whereClauseLoaiKhieuNai);
            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOption);
            GetCountOfFacet(dtReport, "LoaiKhieuNaiId", "SoLuongKNChoXuLy", listKhieuNaiInfo);

            return dtReport;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 06/11/2013
        /// Todo : Lấy số lượng khiếu nại trong khoảng thời gian truyền vào
        ///     - Tiếp nhận
        ///     - Đã xử lý xong
        /// </summary>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataSet BieuDoSoLuongKhieuNaiCuaPhongBanTheoThoiGian(int phongBanXuLyId, DateTime fromDate, DateTime toDate)
        {
            DataSet dsSoLuongKhieuNai = null;

            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            DataTable dtSoLuongTiepNhan = new DataTable();
            dtSoLuongTiepNhan.Columns.Add("Date");
            dtSoLuongTiepNhan.Columns.Add("DateSort");
            dtSoLuongTiepNhan.Columns.Add("SLTiepNhan");

            DataTable dtSoLuongKNDong = new DataTable();
            dtSoLuongKNDong.Columns.Add("Date");
            dtSoLuongKNDong.Columns.Add("DateSort");
            dtSoLuongKNDong.Columns.Add("SLKhieuNaiDong");

            int numberDate = toDate.Subtract(fromDate).Days;
            for (int i = 0; i <= numberDate; i++)
            {
                DateTime curDate = fromDate.Add(new TimeSpan(i, 0, 0, 0));

                DataRow row = dtSoLuongTiepNhan.NewRow();
                row["Date"] = curDate;
                row["DateSort"] = curDate.ToString("yyyyMMdd");
                row["SLTiepNhan"] = 0;
                dtSoLuongTiepNhan.Rows.Add(row);

                row = dtSoLuongKNDong.NewRow();
                row["Date"] = curDate;
                row["DateSort"] = curDate.ToString("yyyyMMdd");
                row["SLKhieuNaiDong"] = 0;
                dtSoLuongKNDong.Rows.Add(row);
            }

            // Lấy số lượng khiếu nại tiếp nhận (trong khoảng thời gian được chọn) (tạo mới  hoặc được chuyển xử lý)
            string whereClauseTiepNhan = string.Format("PhongBanXuLyId : {0} AND (HanhDong:0 OR HanhDong:2)", phongBanXuLyId);
            SolrQuery solrQueryTiepNhan = new SolrQuery(whereClauseTiepNhan);
            QueryOptions queryOptionTiepNhan = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"");
            queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;
            queryOptionTiepNhan.Start = 0;
            queryOptionTiepNhan.Rows = 0;

            FacetParameters fpTiepNhan = new FacetParameters();
            SolrFacetDateQuery facetDateTiepNhan = new SolrFacetDateQuery("NgayTiepNhan", fromDate, toDate, "+1DAY");
            fpTiepNhan.Queries.Add(facetDateTiepNhan);
            queryOptionTiepNhan.Facet = fpTiepNhan;
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQueryTiepNhan, queryOptionTiepNhan);
            GetCountOfFacetDate(dtSoLuongTiepNhan, "Date", "SLTiepNhan", listKhieuNaiInfo);

            //SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.ASC);
            //List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            //listSortOrder.Add(sortOrder);

            //GroupingParameters gpTiepNhan = new GroupingParameters();
            //List<string> listField = new List<string>();
            //listField.Add("KhieuNaiId");
            //gpTiepNhan.Fields = listField;
            //gpTiepNhan.Limit = 1;
            //gpTiepNhan.Main = true;
            //gpTiepNhan.OrderBy = listSortOrder;

            //queryOptionTiepNhan.Grouping = gpTiepNhan;

            //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQueryTiepNhan, queryOptionTiepNhan);
            //if(listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
            //{

            //}



            // Lấy số lượng khiếu nại đã xử lý xong (trong khoảng thời gian được chọn)
            string whereClauseDongKN = string.Format("PhongBanXuLyId : {0} AND TrangThai : 3", phongBanXuLyId);
            SolrQuery solrQueryKNDong = new SolrQuery(whereClauseDongKN);
            QueryOptions queryOptionKNDong = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamKNDong = new Dictionary<string, string>();
            extraParamKNDong.Add("fl", @"");
            queryOptionKNDong.ExtraParams = extraParamKNDong;
            queryOptionKNDong.Start = 0;
            queryOptionKNDong.Rows = 0;

            FacetParameters fpKNDong = new FacetParameters();
            //SolrFacetFieldQuery facetFieldKNDong = new SolrFacetFieldQuery("NgayDongKNSort");
            //fpKNDong.Queries.Add(facetFieldKNDong);
            //queryOptionKNDong.Facet = fpKNDong;
            SolrFacetDateQuery facetDateKNDong = new SolrFacetDateQuery("NgayDongKN", fromDate, toDate, "+1DAY");
            fpKNDong.Queries.Add(facetDateKNDong);
            queryOptionKNDong.Facet = fpKNDong;
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQueryKNDong, queryOptionKNDong);
            GetCountOfFacetDate(dtSoLuongKNDong, "Date", "SLKhieuNaiDong", listKhieuNaiInfo);

            dsSoLuongKhieuNai = new DataSet();
            dsSoLuongKhieuNai.Tables.Add(dtSoLuongTiepNhan);
            dsSoLuongKhieuNai.Tables.Add(dtSoLuongKNDong);

            return dsSoLuongKhieuNai;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 04/04/2014
        /// Todo : Thống kê số lượng khiếu nại theo các tiêu chí
        /// </summary>
        /// <param name="reportType">
        ///     1 : Thống kê theo loại khiếu nại
        ///     2 : Thống kê theo lĩnh vực chung
        ///     3 : Thống kê theo lĩnh vực con
        /// </param>
        /// <param name="listLoaiKhieuNaiId"></param>
        /// <param name="listLinhVucChungId"></param>
        /// <param name="listLinhVucConId"></param>
        /// <param name="doiTacId">
        ///     = -1 : Thống kê toàn bộ VNP
        ///     = 2 : Thống kê theo VNP1
        ///     = 3 : Thống kê theo VNP2
        ///     = 5 : Thống kê theo VNP3
        /// </param>
        /// <param name="loaiThueBao">
        ///     = -1 : Tất cả các loại thuê bao
        ///     = 0 : Thuê bao trả trước
        ///     = 1 : Thuê bao trả sau
        /// </param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoBieuDoSoLuongGQKNTheoMotKhoangThoiGian_Solr(byte reportType, string listLoaiKhieuNaiId, string listLinhVucChungId, string listLinhVucConId, int doiTacId, int loaiThueBao, DateTime fromDate, DateTime toDate)
        {
            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            string facetFieldQuery = string.Empty;
            string whereClauseLoaiKhieuNai = string.Empty;
            string sLoaiKhieuNaiId = string.Empty;
            string sLinhVucChungId = string.Empty;
            string sLinhVucConId = string.Empty;

            if (listLoaiKhieuNaiId.Length > 0)
            {
                sLoaiKhieuNaiId = listLoaiKhieuNaiId.Replace(",", " ");
            }

            if (listLinhVucChungId.Length > 0)
            {
                sLinhVucChungId = listLinhVucChungId.Replace(",", " ");
            }

            if (listLinhVucConId.Length > 0)
            {
                sLinhVucConId = listLinhVucConId.Replace(",", " ");
            }

            DataTable dtReport = new DataTable();
            dtReport.Columns.Add("LoaiKhieuNaiId");
            dtReport.Columns.Add("Name");
            dtReport.Columns.Add("SoLuongKNDaDong");

            string[] arrLoaiKhieuNaiId = listLoaiKhieuNaiId.Split(',');
            string[] arrLinhVucChungId = listLinhVucChungId.Split(',');
            string[] arrLinhVucConId = listLinhVucConId.Split(',');

            switch (reportType)
            {
                case 1:
                    facetFieldQuery = "LoaiKhieuNaiId";
                    for (int i = 0; i < arrLoaiKhieuNaiId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLoaiKhieuNaiId[i];

                        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                        {
                            if (arrLoaiKhieuNaiId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                            {
                                row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                break;
                            }
                        }

                        dtReport.Rows.Add(row);
                    } // end for(int i=0;i<listLoaiKhieuNaiId.Count;i++)

                    if (sLinhVucChungId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucChungId : ({1})", whereClauseLoaiKhieuNai, sLinhVucChungId);
                    } // end if (sLinhVucChungId.Length > 0)

                    if (sLinhVucConId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucConId : ({1})", whereClauseLoaiKhieuNai, sLinhVucConId);
                    } // end if (sLinhVucConId.Length > 0)


                    break;
                case 2:
                    facetFieldQuery = "LinhVucChungId";
                    for (int i = 0; i < arrLinhVucChungId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLinhVucChungId[i];

                        if (arrLinhVucChungId[i] != "0")
                        {
                            for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                            {
                                if (arrLinhVucChungId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                                {
                                    row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            row["Name"] = "Lĩnh vực chung khác";
                        }


                        dtReport.Rows.Add(row);
                    }

                    if (sLoaiKhieuNaiId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LoaiKhieuNaiId : ({1})", whereClauseLoaiKhieuNai, sLoaiKhieuNaiId);
                    }

                    if (sLinhVucConId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucConId : ({1})", whereClauseLoaiKhieuNai, sLinhVucConId);
                    } // end if (sLinhVucConId.Length > 0)

                    break;

                default:
                    facetFieldQuery = "LinhVucConId";
                    for (int i = 0; i < arrLinhVucConId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLinhVucConId[i];

                        if (arrLinhVucConId[i] != "0")
                        {
                            for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                            {
                                if (arrLinhVucConId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                                {
                                    row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            row["Name"] = "Lĩnh vực con khác";
                        }


                        dtReport.Rows.Add(row);
                    }

                    if (sLoaiKhieuNaiId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LoaiKhieuNaiId : ({1})", whereClauseLoaiKhieuNai, sLoaiKhieuNaiId);
                    }

                    if (sLinhVucChungId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucChungId : ({1})", whereClauseLoaiKhieuNai, sLinhVucChungId);
                    } // end if (sLinhVucConId.Length > 0)

                    break;
            }

            QueryOptions queryOption = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"");
            queryOption.ExtraParams = extraParamLoaiKhieuNai;

            queryOption.Start = 0;
            queryOption.Rows = 0;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery(facetFieldQuery);
            facetParam.Queries.Add(facetField);
            queryOption.Facet = facetParam;

            string whereClause = string.Format("TrangThai:3 {0} AND NgayDongKNSort : [{1} TO {2}]", whereClauseLoaiKhieuNai, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            if (doiTacId > DoiTacInfo.DoiTacIdValue.VNP)
            {
                string sListDoiTacXuLy = string.Empty;
                List<DoiTacInfo> listDoiTacXuLy = new DoiTacImpl().GetTreeByDonViTrucThuoc(doiTacId);
                if (listDoiTacXuLy != null)
                {
                    for (int i = 0; i < listDoiTacXuLy.Count; i++)
                    {
                        sListDoiTacXuLy = string.Format("{0}{1} ", sListDoiTacXuLy, listDoiTacXuLy[i].Id);
                    }

                    sListDoiTacXuLy = sListDoiTacXuLy.Trim();

                    whereClause = string.Format("{0} AND DoiTacXuLyId:({1})", whereClause, sListDoiTacXuLy);
                }
            }

            if (loaiThueBao == 0)
            {
                whereClause = string.Format("{0} AND IsTraSau:false", whereClause);
            }
            else if (loaiThueBao == 1)
            {
                whereClause = string.Format("{0} AND IsTraSau:true", whereClause);
            }

            solrQuery = new SolrQuery(whereClause);
            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOption);
            GetCountOfFacet(dtReport, "LoaiKhieuNaiId", "SoLuongKNDaDong", listKhieuNaiInfo);

            return dtReport;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 04/04/2014
        /// Todo : Thống kê số lượng khiếu nại theo các tiêu chí
        /// </summary>
        /// <param name="reportType">
        ///     1 : Thống kê theo loại khiếu nại
        ///     2 : Thống kê theo lĩnh vực chung
        ///     3 : Thống kê theo lĩnh vực con
        /// </param>
        /// <param name="listLoaiKhieuNaiId"></param>
        /// <param name="listLinhVucChungId"></param>
        /// <param name="listLinhVucConId"></param>
        /// <param name="doiTacId">
        ///     = -1 : Thống kê toàn bộ VNP
        ///     = 2 : Thống kê theo VNP1
        ///     = 3 : Thống kê theo VNP2
        ///     = 5 : Thống kê theo VNP3
        /// </param>
        /// <param name="loaiThueBao">
        ///     = -1 : Tất cả các loại thuê bao
        ///     = 0 : Thuê bao trả trước
        ///     = 1 : Thuê bao trả sau
        /// </param>
        /// <param name="fromDate1"></param>
        /// <param name="toDate1"></param>
        /// <param name="fromDate2"></param>
        /// <param name="toDate2"></param>
        /// <returns></returns>
        public DataTable BaoCaoBieuDoSoLuongGQKNTheoHaiKhoangThoiGian_Solr(byte reportType, string listLoaiKhieuNaiId, string listLinhVucChungId, string listLinhVucConId, int doiTacId, int loaiThueBao, string listDate)
        {
            if (listDate == null || listDate.Length == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            string facetFieldQuery = string.Empty;
            string whereClauseLoaiKhieuNai = string.Empty;
            string sLinhVucChungId = string.Empty;
            string sLinhVucConId = string.Empty;

            if (listLinhVucChungId.Length > 0)
            {
                sLinhVucChungId = listLinhVucChungId.Replace(",", " ");
            }

            if (listLinhVucConId.Length > 0)
            {
                sLinhVucConId = listLinhVucConId.Replace(",", " ");
            }

            DataTable dtReport = new DataTable();
            dtReport.Columns.Add("LoaiKhieuNaiId");
            dtReport.Columns.Add("Name");

            string[] arrLoaiKhieuNaiId = listLoaiKhieuNaiId.Split(',');
            string[] arrLinhVucChungId = listLinhVucChungId.Split(',');
            string[] arrLinhVucConId = listLinhVucConId.Split(',');
            string[] arryDate = listDate.Split(',');
            for (int i = 0; i < arryDate.Length; i++)
            {
                dtReport.Columns.Add(arryDate[i]);
            }

            switch (reportType)
            {
                case 1:
                    facetFieldQuery = "LoaiKhieuNaiId";
                    for (int i = 0; i < arrLoaiKhieuNaiId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLoaiKhieuNaiId[i];

                        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                        {
                            if (arrLoaiKhieuNaiId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                            {
                                row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                break;
                            }
                        }

                        dtReport.Rows.Add(row);
                    } // end for(int i=0;i<listLoaiKhieuNaiId.Count;i++)

                    if (sLinhVucChungId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format(" AND LinhVucChungId : ({0})", sLinhVucChungId);
                    } // end if (sLinhVucChungId.Length > 0)

                    if (sLinhVucConId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format(" AND LinhVucConId : ({0})", sLinhVucConId);
                    } // end if (sLinhVucConId.Length > 0)


                    break;
                case 2:
                    facetFieldQuery = "LinhVucChungId";
                    for (int i = 0; i < arrLinhVucChungId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLinhVucChungId[i];

                        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                        {
                            if (arrLinhVucChungId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                            {
                                row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                break;
                            }
                        }

                        dtReport.Rows.Add(row);
                    }

                    if (sLinhVucConId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format(" AND LinhVucConId : ({0})", sLinhVucConId);
                    } // end if (sLinhVucConId.Length > 0)

                    break;

                default:
                    facetFieldQuery = "LinhVucConId";
                    for (int i = 0; i < arrLinhVucConId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLinhVucConId[i];

                        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                        {
                            if (arrLinhVucConId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                            {
                                row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                break;
                            }
                        }

                        dtReport.Rows.Add(row);
                    }

                    break;
            }

            QueryOptions queryOption = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"");
            queryOption.ExtraParams = extraParamLoaiKhieuNai;

            queryOption.Start = 0;
            queryOption.Rows = 0;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery(facetFieldQuery);
            facetParam.Queries.Add(facetField);
            queryOption.Facet = facetParam;

            string whereClause = string.Empty;
            string whereClauseDoiTacXuLy = string.Empty;
            if (doiTacId > DoiTacInfo.DoiTacIdValue.VNP)
            {
                string sListDoiTacXuLy = string.Empty;
                List<DoiTacInfo> listDoiTacXuLy = new DoiTacImpl().GetTreeByDonViTrucThuoc(doiTacId);
                if (listDoiTacXuLy != null)
                {
                    for (int i = 0; i < listDoiTacXuLy.Count; i++)
                    {
                        sListDoiTacXuLy = string.Format("{0}{1} ", sListDoiTacXuLy, listDoiTacXuLy[i].Id);
                    }

                    sListDoiTacXuLy = sListDoiTacXuLy.Trim();

                    whereClauseDoiTacXuLy = string.Format("{0} AND DoiTacXuLyId:({1})", whereClauseDoiTacXuLy, sListDoiTacXuLy);
                }
            }

            DateTime nullDateTime = new DateTime(1900, 01, 01);
            for (int i = 0; i < arryDate.Length; i++)
            {
                string fromDate = arryDate[i].Split('-')[0];
                string toDate = arryDate[i].Split('-')[1];

                DateTime date = ConvertUtility.ToDateTime(fromDate, "dd/MM/yyyy", nullDateTime);
                fromDate = date.ToString("yyyyMMdd");

                date = ConvertUtility.ToDateTime(toDate, "dd/MM/yyyy", nullDateTime);
                toDate = date.ToString("yyyyMMdd");

                whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3}", fromDate, toDate, whereClauseDoiTacXuLy, whereClauseLoaiKhieuNai);
                solrQuery = new SolrQuery(whereClause);
                listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOption);
                GetCountOfFacet(dtReport, "LoaiKhieuNaiId", arryDate[i], listKhieuNaiInfo);
            }

            return dtReport;
        }

        public DataTable BaoCaoBieuDoTongSoTienGiamTruTheoMotKhoangThoiGian_Solr(byte reportType, string listLoaiKhieuNaiId, string listLinhVucChungId, string listLinhVucConId, int doiTacId, int loaiThueBao, DateTime fromDate, DateTime toDate)
        {
            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            string facetFieldQuery = string.Empty;
            string whereClauseLoaiKhieuNai = string.Empty;
            string sLoaiKhieuNaiId = string.Empty;
            string sLinhVucChungId = string.Empty;
            string sLinhVucConId = string.Empty;

            if (listLoaiKhieuNaiId.Length > 0)
            {
                sLoaiKhieuNaiId = listLoaiKhieuNaiId.Replace(",", " ");
            }

            if (listLinhVucChungId.Length > 0)
            {
                sLinhVucChungId = listLinhVucChungId.Replace(",", " ");
            }

            if (listLinhVucConId.Length > 0)
            {
                sLinhVucConId = listLinhVucConId.Replace(",", " ");
            }

            DataTable dtReport = new DataTable();
            dtReport.Columns.Add("LoaiKhieuNaiId");
            dtReport.Columns.Add("Name");
            dtReport.Columns.Add("TongSoTienGiamTru");

            string[] arrLoaiKhieuNaiId = listLoaiKhieuNaiId.Split(',');
            string[] arrLinhVucChungId = listLinhVucChungId.Split(',');
            string[] arrLinhVucConId = listLinhVucConId.Split(',');

            switch (reportType)
            {
                case 1:
                    facetFieldQuery = "LoaiKhieuNaiId";
                    for (int i = 0; i < arrLoaiKhieuNaiId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLoaiKhieuNaiId[i];

                        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                        {
                            if (arrLoaiKhieuNaiId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                            {
                                row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                break;
                            }
                        }

                        dtReport.Rows.Add(row);
                    } // end for(int i=0;i<listLoaiKhieuNaiId.Count;i++)

                    if (sLinhVucChungId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucChungId : ({1})", whereClauseLoaiKhieuNai, sLinhVucChungId);
                    } // end if (sLinhVucChungId.Length > 0)

                    if (sLinhVucConId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucConId : ({1})", whereClauseLoaiKhieuNai, sLinhVucConId);
                    } // end if (sLinhVucConId.Length > 0)


                    break;
                case 2:
                    facetFieldQuery = "LinhVucChungId";
                    for (int i = 0; i < arrLinhVucChungId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLinhVucChungId[i];

                        if (arrLinhVucChungId[i] != "0")
                        {
                            for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                            {
                                if (arrLinhVucChungId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                                {
                                    row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            row["Name"] = "Lĩnh vực chung khác";
                        }


                        dtReport.Rows.Add(row);
                    }

                    if (sLoaiKhieuNaiId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LoaiKhieuNaiId : ({1})", whereClauseLoaiKhieuNai, sLoaiKhieuNaiId);
                    }

                    if (sLinhVucConId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucConId : ({1})", whereClauseLoaiKhieuNai, sLinhVucConId);
                    } // end if (sLinhVucConId.Length > 0)

                    break;

                default:
                    facetFieldQuery = "LinhVucConId";
                    for (int i = 0; i < arrLinhVucConId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLinhVucConId[i];

                        if (arrLinhVucConId[i] != "0")
                        {
                            for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                            {
                                if (arrLinhVucConId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                                {
                                    row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                    break;
                                }
                            }
                        }
                        else
                        {
                            row["Name"] = "Lĩnh vực con khác";
                        }


                        dtReport.Rows.Add(row);
                    }

                    if (sLoaiKhieuNaiId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LoaiKhieuNaiId : ({1})", whereClauseLoaiKhieuNai, sLoaiKhieuNaiId);
                    }

                    if (sLinhVucChungId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format("{0} AND LinhVucChungId : ({1})", whereClauseLoaiKhieuNai, sLinhVucChungId);
                    } // end if (sLinhVucConId.Length > 0)

                    break;
            }

            QueryOptions queryOption = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"");
            queryOption.ExtraParams = extraParamLoaiKhieuNai;

            queryOption.Start = 0;
            queryOption.Rows = 0;

            string whereClause = string.Format("TrangThai:3 {0} AND NgayDongKNSort : [{1} TO {2}]", whereClauseLoaiKhieuNai, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            if (doiTacId > DoiTacInfo.DoiTacIdValue.VNP)
            {
                string sListDoiTacXuLy = string.Empty;
                List<DoiTacInfo> listDoiTacXuLy = new DoiTacImpl().GetTreeByDonViTrucThuoc(doiTacId);
                if (listDoiTacXuLy != null)
                {
                    for (int i = 0; i < listDoiTacXuLy.Count; i++)
                    {
                        sListDoiTacXuLy = string.Format("{0}{1} ", sListDoiTacXuLy, listDoiTacXuLy[i].Id);
                    }

                    sListDoiTacXuLy = sListDoiTacXuLy.Trim();

                    whereClause = string.Format("{0} AND DoiTacXuLyId:({1})", whereClause, sListDoiTacXuLy);
                }
            }

            if (loaiThueBao == 0)
            {
                whereClause = string.Format("{0} AND IsTraSau:false", whereClause);
            }
            else if (loaiThueBao == 1)
            {
                whereClause = string.Format("{0} AND IsTraSau:true", whereClause);
            }

            string whereClauseSoTien = string.Format("{0} AND SoTien_Edit:0 AND IsDaBuTien:true ", whereClause);
            solrQuery = new SolrQuery(whereClauseSoTien);

            StatsParameters spSoTienLoaiKhieuNai = new StatsParameters();
            spSoTienLoaiKhieuNai.AddField("SoTien");
            spSoTienLoaiKhieuNai.AddFacet(facetFieldQuery);

            queryOption.Stats = spSoTienLoaiKhieuNai;

            var listQueryResult = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOption);

            foreach (var kv in listQueryResult.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        foreach (DataRow row in dtReport.Rows)
                        {
                            if (row["LoaiKhieuNaiId"].ToString() == fv.Key)
                            {
                                row["TongSoTienGiamTru"] = fv.Value.Sum;
                                break;
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)
            } // end foreach (var kv in listQueryResult.Stats)  

            var qoSoTienEdit = new QueryOptions();
            //Lấy ra những trường nào
            extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", "");
            qoSoTienEdit.ExtraParams = extraParamLoaiKhieuNai;

            qoSoTienEdit.Start = 0;
            qoSoTienEdit.Rows = 0;// int.MaxValue;

            // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
            StatsParameters spSoTienEdit = new StatsParameters();
            spSoTienEdit.AddField("SoTien_Edit");
            spSoTienEdit.AddFacet(facetFieldQuery);

            qoSoTienEdit.Stats = spSoTienEdit;

            string whereClauseSoTienEdit = string.Format("{0} AND -SoTien_Edit:0 AND IsDaBuTien:true ", whereClause);
            solrQuery = new SolrQuery(whereClauseSoTienEdit);
            listQueryResult = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTienEdit);

            foreach (var kv in listQueryResult.Stats)
            {
                // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                string kvKey = kv.Key;
                var kvValue = kv.Value;

                foreach (var f in kvValue.FacetResults)
                {
                    string fKey = f.Key;
                    foreach (var fv in f.Value)
                    {
                        foreach (DataRow row in dtReport.Rows)
                        {
                            if (row["LoaiKhieuNaiId"].ToString() == fv.Key)
                            {
                                row["TongSoTienGiamTru"] = ConvertUtility.ToDouble(row["TongSoTienGiamTru"], 0) + fv.Value.Sum;
                                break;
                            }
                        }
                    } // end foreach (var fv in f.Value)
                } // end foreach (var f in kvValue.FacetResults)

            } // end foreach (var kv in listQueryResult.Stats)                  

            return dtReport;
        }

        public DataTable BaoCaoBieuDoTongSoTienGiamTruTheoHaiKhoangThoiGian_Solr(byte reportType, string listLoaiKhieuNaiId, string listLinhVucChungId, string listLinhVucConId, int doiTacId, int loaiThueBao, string listDate)
        {
            if (listDate == null || listDate.Length == 0)
                return null;

            SolrQuery solrQuery = null;
            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            string facetFieldQuery = string.Empty;
            string whereClauseLoaiKhieuNai = string.Empty;
            string sLinhVucChungId = string.Empty;
            string sLinhVucConId = string.Empty;

            if (listLinhVucChungId.Length > 0)
            {
                sLinhVucChungId = listLinhVucChungId.Replace(",", " ");
            }

            if (listLinhVucConId.Length > 0)
            {
                sLinhVucConId = listLinhVucConId.Replace(",", " ");
            }

            DataTable dtReport = new DataTable();
            dtReport.Columns.Add("LoaiKhieuNaiId");
            dtReport.Columns.Add("Name");

            string[] arrLoaiKhieuNaiId = listLoaiKhieuNaiId.Split(',');
            string[] arrLinhVucChungId = listLinhVucChungId.Split(',');
            string[] arrLinhVucConId = listLinhVucConId.Split(',');
            string[] arryDate = listDate.Split(',');
            for (int i = 0; i < arryDate.Length; i++)
            {
                dtReport.Columns.Add(arryDate[i]);
            }

            switch (reportType)
            {
                case 1:
                    facetFieldQuery = "LoaiKhieuNaiId";
                    for (int i = 0; i < arrLoaiKhieuNaiId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLoaiKhieuNaiId[i];

                        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                        {
                            if (arrLoaiKhieuNaiId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                            {
                                row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                break;
                            }
                        }

                        dtReport.Rows.Add(row);
                    } // end for(int i=0;i<listLoaiKhieuNaiId.Count;i++)

                    if (sLinhVucChungId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format(" AND LinhVucChungId : ({0})", sLinhVucChungId);
                    } // end if (sLinhVucChungId.Length > 0)

                    if (sLinhVucConId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format(" AND LinhVucConId : ({0})", sLinhVucConId);
                    } // end if (sLinhVucConId.Length > 0)


                    break;
                case 2:
                    facetFieldQuery = "LinhVucChungId";
                    for (int i = 0; i < arrLinhVucChungId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLinhVucChungId[i];

                        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                        {
                            if (arrLinhVucChungId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                            {
                                row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                break;
                            }
                        }

                        dtReport.Rows.Add(row);
                    }

                    if (sLinhVucConId.Length > 0)
                    {
                        whereClauseLoaiKhieuNai = string.Format(" AND LinhVucConId : ({0})", sLinhVucConId);
                    } // end if (sLinhVucConId.Length > 0)

                    break;

                default:
                    facetFieldQuery = "LinhVucConId";
                    for (int i = 0; i < arrLinhVucConId.Length; i++)
                    {
                        DataRow row = dtReport.NewRow();
                        row["LoaiKhieuNaiId"] = arrLinhVucConId[i];

                        for (int j = 0; j < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; j++)
                        {
                            if (arrLinhVucConId[i] == LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Id.ToString())
                            {
                                row["Name"] = LoaiKhieuNaiImpl.ListLoaiKhieuNai[j].Name;
                                break;
                            }
                        }

                        dtReport.Rows.Add(row);
                    }

                    break;
            }

            QueryOptions queryOption = new QueryOptions();
            //Lấy ra những trường nào
            var extraParamLoaiKhieuNai = new Dictionary<string, string>();
            extraParamLoaiKhieuNai.Add("fl", @"");
            queryOption.ExtraParams = extraParamLoaiKhieuNai;

            queryOption.Start = 0;
            queryOption.Rows = 0;

            FacetParameters facetParam = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery(facetFieldQuery);
            facetParam.Queries.Add(facetField);
            queryOption.Facet = facetParam;

            string whereClause = string.Empty;
            //string whereClauseDoiTacXuLy = string.Empty;
            if (doiTacId > DoiTacInfo.DoiTacIdValue.VNP)
            {
                string sListDoiTacXuLy = string.Empty;
                List<DoiTacInfo> listDoiTacXuLy = new DoiTacImpl().GetTreeByDonViTrucThuoc(doiTacId);
                if (listDoiTacXuLy != null)
                {
                    for (int i = 0; i < listDoiTacXuLy.Count; i++)
                    {
                        sListDoiTacXuLy = string.Format("{0}{1} ", sListDoiTacXuLy, listDoiTacXuLy[i].Id);
                    }

                    sListDoiTacXuLy = sListDoiTacXuLy.Trim();

                    whereClause = string.Format("{0} AND DoiTacXuLyId:({1})", whereClause, sListDoiTacXuLy);
                }
            }

            if (loaiThueBao == 0)
            {
                whereClause = string.Format("{0} AND IsTraSau:false", whereClause);
            }
            else if (loaiThueBao == 1)
            {
                whereClause = string.Format("{0} AND IsTraSau:true", whereClause);
            }

            DateTime nullDateTime = new DateTime(1900, 01, 01);
            for (int i = 0; i < arryDate.Length; i++)
            {
                string fromDate = arryDate[i].Split('-')[0];
                string toDate = arryDate[i].Split('-')[1];

                DateTime date = ConvertUtility.ToDateTime(fromDate, "dd/MM/yyyy", nullDateTime);
                fromDate = date.ToString("yyyyMMdd");

                date = ConvertUtility.ToDateTime(toDate, "dd/MM/yyyy", nullDateTime);
                toDate = date.ToString("yyyyMMdd");

                //whereClause = string.Format("NgayDongKNSort : [{0} TO {1}] {2} {3}", fromDate, toDate, whereClauseDoiTacXuLy, whereClauseLoaiKhieuNai);
                //solrQuery = new SolrQuery(whereClause);
                //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOption);
                //GetCountOfFacet(dtReport, "LoaiKhieuNaiId", arryDate[i], listKhieuNaiInfo);

                string whereClauseSoTien = string.Format("SoTien_Edit:0 AND IsDaBuTien:true AND NgayDongKNSort : [{0} TO {1}] {2}", fromDate, toDate, whereClause);
                solrQuery = new SolrQuery(whereClauseSoTien);

                StatsParameters spSoTienLoaiKhieuNai = new StatsParameters();
                spSoTienLoaiKhieuNai.AddField("SoTien");
                spSoTienLoaiKhieuNai.AddFacet(facetFieldQuery);

                queryOption.Stats = spSoTienLoaiKhieuNai;

                var listQueryResult = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, queryOption);

                foreach (var kv in listQueryResult.Stats)
                {
                    // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                    string kvKey = kv.Key;
                    var kvValue = kv.Value;

                    foreach (var f in kvValue.FacetResults)
                    {
                        string fKey = f.Key;
                        foreach (var fv in f.Value)
                        {
                            foreach (DataRow row in dtReport.Rows)
                            {
                                if (row["LoaiKhieuNaiId"].ToString() == fv.Key)
                                {
                                    row[arryDate[i]] = fv.Value.Sum;
                                    break;
                                }
                            }
                        } // end foreach (var fv in f.Value)
                    } // end foreach (var f in kvValue.FacetResults)
                } // end foreach (var kv in listQueryResult.Stats)  

                var qoSoTienEdit = new QueryOptions();
                //Lấy ra những trường nào
                extraParamLoaiKhieuNai = new Dictionary<string, string>();
                extraParamLoaiKhieuNai.Add("fl", "");
                qoSoTienEdit.ExtraParams = extraParamLoaiKhieuNai;

                qoSoTienEdit.Start = 0;
                qoSoTienEdit.Rows = 0;// int.MaxValue;

                // stats=true&stats.field=LoaiKhieuNaiId&stats.field=LinhVucChungId&rows=0&indent=true&stats.facet=DoUuTien
                StatsParameters spSoTienEdit = new StatsParameters();
                spSoTienEdit.AddField("SoTien_Edit");
                spSoTienEdit.AddFacet(facetFieldQuery);

                qoSoTienEdit.Stats = spSoTienEdit;

                string whereClauseSoTienEdit = string.Format("-SoTien_Edit:0 AND IsDaBuTien:true AND NgayDongKNSort : [{0} TO {1}] {2}", fromDate, toDate, whereClause);
                solrQuery = new SolrQuery(whereClauseSoTienEdit);
                listQueryResult = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_SOTIEN, solrQuery, qoSoTienEdit);

                foreach (var kv in listQueryResult.Stats)
                {
                    // kvKey chưa các giá trị : SoTienKhauTru_TKC, SoTienKhauTru_KM1, SoTienKhauTru_KM2, SoTienKhauTru_KM3, SoTienKhauTru_KM4, SoTienKhauTru_KM5
                    string kvKey = kv.Key;
                    var kvValue = kv.Value;

                    foreach (var f in kvValue.FacetResults)
                    {
                        string fKey = f.Key;
                        foreach (var fv in f.Value)
                        {
                            foreach (DataRow row in dtReport.Rows)
                            {
                                if (row["LoaiKhieuNaiId"].ToString() == fv.Key)
                                {
                                    row[arryDate[i]] = ConvertUtility.ToDouble(row[arryDate[i]], 0) + fv.Value.Sum;
                                    break;
                                }
                            }
                        } // end foreach (var fv in f.Value)
                    } // end foreach (var f in kvValue.FacetResults)

                } // end foreach (var kv in listQueryResult.Stats)         
            }

            return dtReport;
        }

        #endregion

        #region Hàm lấy danh sách khiếu nại để đối soát với số liệu báo cáo

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 22/02/2014
        /// Todo : Lấy chi tiết danh sách khiếu nại để làm đối soát với báo cáo tổng hợp khiếu nại của phòng CSKH công ty
        /// </summary>
        /// <param name="phongBanId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="typeReport">
        ///     (1):  Số liệu PAKN tồn tính đến thời điểm lấy báo cáo tại phòng ban (số liệu tồn quá hạn +số liệu tồn trong hạn)
        ///     (2): Số liệu PAKN tạo mới trong khoảng thời gian lấy báo cáo tại phòng ban:
        ///     (3): Số liệu PAKN đã xử lý xong (đã đóng)
        ///     (4): Số liệu PAKN chưa xử lý (bao gồm: để thực hiện giải quyết và phải chuyển tiếp cho đơn vị khác) 
        ///     (5): Số liệu PAKN tiếp nhận trong khoảng thời gian lấy báo cáo tại phòng ban (số liệu này là do đơn vị khác chuyển đến )
        ///     (6): Số liệu PAKN đã được xử lý trong khoảng thời gian lấy báo cáo tại phòng ban:
        ///     (7): Số liệu PAKN đã được đóng
        ///     (8): Số liệu PAKN đã được phản hồi
        ///     (9) Số liệu PAKN đang có tại thời điểm lấy báo cáo tại phòng ban
        ///     (10) Số liệu PAKN đã quá hạn tại thời điểm lấy báo cáo tại phòng ban
        /// </param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoTongHopKhieuNaiVNP_DanhSachKhieuNai_Solr(int phongBanId, DateTime fromDate, DateTime toDate, int typeReport)
        {
            List<KhieuNai_ReportInfo> listKhieuNaiInfo = new List<KhieuNai_ReportInfo>();
            SolrQuery solrQuery;
            string whereClause = string.Empty;
            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);
            int iFromDate = ConvertUtility.ToInt32(fromDate.ToString("yyyyMMdd"));
            int iToDate = ConvertUtility.ToInt32(toDate.ToString("yyyyMMdd"));
            DateTime fromDate_1 = fromDate.Subtract(new TimeSpan(1, 0, 0, 0));
            DateTime toDatePlus1 = toDate.AddDays(1);

            SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            listSortOrder.Add(sortOrder);

            GroupingParameters gpTonDong = new GroupingParameters();
            List<string> listField = new List<string>();
            listField.Add("KhieuNaiId");
            gpTonDong.Fields = listField;
            gpTonDong.Limit = 1;
            gpTonDong.Main = true;
            //gpTonDong.OrderBy = listSortOrder;        

            // Kiểm tra phòng ban có được phép đóng KN hay không?
            bool isAllowDongKN = false;
            whereClause = string.Format("PhongBanId = {0} AND IsAllow = 1 AND PermissionSchemeId = " + PERMISSIONSCHEMES_DONGKN.ToString(), phongBanId);
            List<PhongBan_PermissionInfo> listPhongBanPermission = new PhongBan_PermissionImpl().GetListDynamic("*", whereClause, "");
            isAllowDongKN = listPhongBanPermission != null && listPhongBanPermission.Count > 0;

            switch (typeReport)
            {
                case 11: // (1):  Số liệu PAKN tồn tính đến thời điểm lấy báo cáo tại phòng ban (số liệu tồn quá hạn +số liệu tồn trong hạn)                                                            
                         //whereClause = string.Format("NgayTiepNhan : [* TO {0}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *])", ConvertDateToSolr(fromDate_1.ToString("yyyMMdd"), false, true), fromDate.ToString("yyyMMdd"));
                         //whereClause = string.Format("LDate : [* TO {0}]", ConvertDateToSolr(fromDate_1.ToString("yyyMMdd"), false, true));
                    whereClause = string.Format("NgayTiepNhan : [* TO {0}]", ConvertDateToSolr(fromDate_1.ToString("yyyMMdd"), false, true));
                    solrQuery = new SolrQuery(whereClause);
                    // qoCol1 lấy ra tất cả các khiếu nại tồn đọng đến trước thời điểm lấy báo cáo
                    QueryOptions qoCol1 = new QueryOptions();
                    Dictionary<string, string> extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, NgayTiepNhan, NgayQuaHan, LDate, SoThueBao, KhieuNai_NgayTiepNhan, KhieuNai_NgayQuaHan");
                    qoCol1.ExtraParams = extraParamTiepNhan;
                    qoCol1.Start = 0;
                    qoCol1.Rows = int.MaxValue;
                    qoCol1.Grouping = gpTonDong;
                    qoCol1.OrderBy = listSortOrder;
                    //qoCol1.OrderBy = listSortOrder;

                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol1);
                    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
                    {
                        listKhieuNaiInfo = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            //return obj.PhongBanXuLyId == phongBanId && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN;
                            return obj.PhongBanXuLyId == phongBanId && (obj.LDate >= fromDate || (obj.LDate < fromDate && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN));
                        });
                    } // end if(listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)                   

                    break;

                case 12:
                    //whereClause = string.Format("NgayTiepNhan : [* TO {0}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *])", ConvertDateToSolr(fromDate_1.ToString("yyyMMdd"), false, true), fromDate.ToString("yyyMMdd"));
                    // whereClause = string.Format("LDate : [* TO {0}]", ConvertDateToSolr(fromDate_1.ToString("yyyMMdd"), false, true));
                    whereClause = string.Format("NgayTiepNhan : [* TO {0}]", ConvertDateToSolr(fromDate_1.ToString("yyyMMdd"), false, true));
                    solrQuery = new SolrQuery(whereClause);
                    // qoCol1 lấy ra tất cả các khiếu nại tồn đọng đến trước thời điểm lấy báo cáo
                    qoCol1 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, NgayTiepNhan, NgayQuaHan, LDate, SoThueBao, KhieuNai_NgayTiepNhan, KhieuNai_NgayDongKNSort, KhieuNai_NgayQuaHan");
                    qoCol1.ExtraParams = extraParamTiepNhan;
                    qoCol1.Start = 0;
                    qoCol1.Rows = int.MaxValue;
                    qoCol1.Grouping = gpTonDong;
                    qoCol1.OrderBy = listSortOrder;
                    //qoCol1.OrderBy = listSortOrder;

                    List<int> listKhieuNaiIdTonDong = new List<int>();
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol1);
                    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
                    {
                        listKhieuNaiInfo = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            //return obj.PhongBanXuLyId == phongBanId && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN;
                            return obj.PhongBanXuLyId == phongBanId && (obj.LDate >= fromDate || (obj.LDate < fromDate && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN));
                        });

                        if (listKhieuNaiInfo != null)
                        {
                            for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                            {
                                listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId);
                            }
                        }
                    } // end if(listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)       

                    whereClause = string.Format("NgayTiepNhan:[{0} TO {1}] AND HanhDong : (2 3) AND (PhongBanXuLyTruocId : ({2}) OR PhongBanXuLyId : ({2}))", sFromDate, sToDate, phongBanId);

                    solrQuery = new SolrQuery(whereClause);
                    qoCol1 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"KhieuNaiId, SoThueBao, NgayTiepNhan, NguoiXuLyTruoc, NguoiXuLy, PhongBanXuLyTruocId, PhongBanXuLyId, HanhDong, NgayQuaHan, LDate, KhieuNai_NgayTiepNhan");
                    qoCol1.ExtraParams = extraParamTiepNhan;
                    qoCol1.Start = 0;
                    qoCol1.Rows = int.MaxValue;
                    //qoCol3.OrderBy = listSortOrder;

                    List<SolrNet.SortOrder> listSortOrderKhieuNaiIdASCActivityIdASC = new List<SolrNet.SortOrder>();
                    SolrNet.SortOrder orderKhieuNaiId = new SolrNet.SortOrder("KhieuNaiId", Order.ASC);
                    SolrNet.SortOrder orderActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
                    listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderKhieuNaiId);
                    listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderActivityId);
                    qoCol1.OrderBy = listSortOrderKhieuNaiIdASCActivityIdASC;

                    List<KhieuNai_ReportInfo> listResult = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol1);
                    listKhieuNaiInfo = new List<KhieuNai_ReportInfo>();
                    if (listResult != null && listResult.Count > 0)
                    {
                        List<int> listKhieuNaiIdDaTinh = new List<int>();
                        for (int i = 0; i < listResult.Count; i++)
                        {
                            // Tính số lượng khiếu nại tồn đọng bị chuyển cho các phòng ban khác xử lý
                            if (listResult[i].PhongBanXuLyTruocId == phongBanId &&
                                listResult[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                            {
                                int curKhieuNaiId = listResult[i].KhieuNaiId;
                                bool isDaPhanHoi = false;
                                for (int j = i - 1; j >= 0; j--)
                                {
                                    if (listResult[j].KhieuNaiId != curKhieuNaiId)
                                    {
                                        break;
                                    }
                                    else
                                    {
                                        if (listResult[j].PhongBanXuLyId == phongBanId
                                            && (listResult[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi
                                                || listResult[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                                            )
                                        {
                                            isDaPhanHoi = true;
                                            break;
                                        }
                                    }
                                }

                                if (!isDaPhanHoi)
                                {
                                    if (!listKhieuNaiIdDaTinh.Contains(listResult[i].KhieuNaiId) && listKhieuNaiIdTonDong.Contains(listResult[i].KhieuNaiId))
                                    {
                                        listKhieuNaiIdDaTinh.Add(listResult[i].KhieuNaiId);
                                        listKhieuNaiInfo.Add(listResult[i]);
                                    }
                                }
                            }

                            //// Tính số lượng khiếu nại tồn đọng bị chuyển cho các phòng ban khác xử lý
                            //if (listResult[i].PhongBanXuLyTruocId == phongBanId &&
                            //    listResult[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban
                            //    && listKhieuNaiIdTonDong.Contains(listResult[i].KhieuNaiId))
                            //{
                            //    if (!listKhieuNaiIdDaTinh.Contains(listResult[i].KhieuNaiId))
                            //    {
                            //        listKhieuNaiIdDaTinh.Add(listResult[i].KhieuNaiId);
                            //        listKhieuNaiInfo.Add(listResult[i]);
                            //    }
                            //}
                        }
                    }

                    break;

                case 21: //  (2): Số liệu PAKN tạo mới trong khoảng thời gian lấy báo cáo tại phòng ban (2.1): Số liệu PAKN đã xử lý xong (đã đóng)
                    whereClause = string.Format("NgayTiepNhanSort:[{0} TO {1}] AND TrangThai:3 AND PhongBanTiepNhanId : {2}", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), phongBanId);
                    solrQuery = new SolrQuery(whereClause);
                    // qoTonDong lấy ra tất cả các khiếu nại tồn đọng đến trước thời điểm lấy báo cáo
                    QueryOptions qoCol3 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"Id, SoThueBao, NgayTiepNhan, NgayDongKN, NguoiXuLy, NgayQuaHanPhongBanXuLy, NgayQuaHan");
                    qoCol3.ExtraParams = extraParamTiepNhan;
                    qoCol3.Start = 0;
                    qoCol3.Rows = int.MaxValue;

                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoCol3);
                    break;

                case 22: //  (2): Số liệu PAKN tạo mới trong khoảng thời gian lấy báo cáo tại phòng ban (2.2): Số liệu PAKN chưa xử lý (bao gồm: để thực hiện giải quyết và phải chuyển tiếp cho đơn vị khác) 
                         //    (4): Số liệu PAKN chưa xử lý (bao gồm: để thực hiện giải quyết và phải chuyển tiếp cho đơn vị khác) 
                         //whereClause = string.Format("KhieuNai_NgayTiepNhanSort:[{0} TO {1}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *]) AND PhongBanTiepNhanId : {2}", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), phongBanId);
                         //solrQuery = new SolrQuery(whereClause);
                         //// qoTonDong lấy ra tất cả các khiếu nại tồn đọng đến trước thời điểm lấy báo cáo
                         //QueryOptions qoCol4 = new QueryOptions();
                         //extraParamTiepNhan = new Dictionary<string, string>();
                         //extraParamTiepNhan.Add("fl", @"KhieuNaiId, SoThueBao, NgayTiepNhan, NguoiXuLyTruoc, NguoiXuLy, PhongBanXuLyId, NgayQuaHan, LDate, KhieuNai_NgayTiepNhan, KhieuNai_NgayQuaHan");
                         //qoCol4.ExtraParams = extraParamTiepNhan;
                         //qoCol4.Start = 0;
                         //qoCol4.Rows = int.MaxValue;

                    //SolrNet.SortOrder sortOrderCol4 = new SolrNet.SortOrder("ActivityId", Order.ASC);
                    //List<SolrNet.SortOrder> listSortOrderCol4 = new List<SolrNet.SortOrder>();
                    //listSortOrderCol4.Add(sortOrderCol4);
                    //GroupingParameters gpCol4 = new GroupingParameters();
                    //gpCol4.Fields = listField;
                    //gpCol4.Limit = 1;
                    //gpCol4.Main = true;
                    //gpCol4.OrderBy = listSortOrderCol4;

                    //qoCol4.Grouping = gpCol4;

                    ////listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoCol4);                   
                    //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol4);

                    whereClause = string.Format("KhieuNai_NgayTiepNhanSort:[{0} TO {1}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *])", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
                    //whereClause = string.Format("KhieuNai_NgayTiepNhanSort:[{0} TO {1}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *]) AND PhongBanTiepNhanId : {2}", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), phongBanId);
                    solrQuery = new SolrQuery(whereClause);
                    // qoTonDong lấy ra tất cả các khiếu nại tồn đọng đến trước thời điểm lấy báo cáo
                    QueryOptions qoCol4 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"KhieuNaiId, SoThueBao, NgayTiepNhan, NguoiXuLyTruoc, NguoiXuLy, PhongBanXuLyId, NgayQuaHan, LDate, KhieuNai_NgayTiepNhan, KhieuNai_NgayQuaHan, PhongBanTiepNhanId");
                    qoCol4.ExtraParams = extraParamTiepNhan;
                    qoCol4.Start = 0;
                    qoCol4.Rows = int.MaxValue;

                    SolrNet.SortOrder sortOrderCol4 = new SolrNet.SortOrder("ActivityId", Order.DESC);
                    List<SolrNet.SortOrder> listSortOrderCol4 = new List<SolrNet.SortOrder>();
                    listSortOrderCol4.Add(sortOrderCol4);
                    GroupingParameters gpCol4 = new GroupingParameters();
                    gpCol4.Fields = listField;
                    gpCol4.Limit = 1;
                    gpCol4.Main = true;
                    gpCol4.OrderBy = listSortOrderCol4;

                    qoCol4.Grouping = gpCol4;

                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol4);
                    if (listKhieuNaiInfo != null)
                    {
                        listKhieuNaiInfo = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.PhongBanTiepNhanId == phongBanId && obj.PhongBanXuLyId != phongBanId; });
                    }

                    break;

                case 23: //  (2): Số liệu PAKN tạo mới trong khoảng thời gian lấy báo cáo tại phòng ban (2.2): Số liệu PAKN chưa xử lý (bao gồm: để thực hiện giải quyết và phải chuyển tiếp cho đơn vị khác) 
                         //    (4): Số liệu PAKN được tạo mới và đang giữ tại đơn vị
                    whereClause = string.Format("KhieuNai_NgayTiepNhanSort:[{0} TO {1}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *])", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
                    //whereClause = string.Format("KhieuNai_NgayTiepNhanSort:[{0} TO {1}] AND -HanhDong:4 AND LDate : [{2} TO {3}] AND PhongBanTiepNhanId : {4}", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), sFromDate, sToDate, phongBanId);
                    solrQuery = new SolrQuery(whereClause);
                    // qoTonDong lấy ra tất cả các khiếu nại tồn đọng đến trước thời điểm lấy báo cáo
                    QueryOptions qoCol23 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"KhieuNaiId, SoThueBao, NgayTiepNhan, NguoiXuLyTruoc, NguoiXuLy, PhongBanXuLyId, HanhDong, NgayQuaHan, LDate, KhieuNai_NgayTiepNhan, KhieuNai_NgayQuaHan, PhongBanTiepNhanId");
                    qoCol23.ExtraParams = extraParamTiepNhan;
                    qoCol23.Start = 0;
                    qoCol23.Rows = int.MaxValue;

                    SolrNet.SortOrder sortOrderCol23 = new SolrNet.SortOrder("ActivityId", Order.DESC);
                    List<SolrNet.SortOrder> listSortOrderCol23 = new List<SolrNet.SortOrder>();
                    listSortOrderCol23.Add(sortOrderCol23);
                    GroupingParameters gpCol23 = new GroupingParameters();
                    gpCol23.Fields = listField;
                    gpCol23.Limit = 1;
                    gpCol23.Main = true;
                    gpCol23.OrderBy = listSortOrderCol23;

                    qoCol23.Grouping = gpCol23;

                    //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoCol4);                   
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol23);
                    if (listKhieuNaiInfo != null)
                    {
                        listKhieuNaiInfo = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.PhongBanTiepNhanId == phongBanId && obj.PhongBanXuLyId == phongBanId && (obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban); });
                    }

                    break;

                case 3:

                    break;

                case 31: //(3): Số liệu PAKN tiếp nhận trong khoảng thời gian lấy báo cáo tại phòng ban (số liệu này là do đơn vị khác chuyển đến ) (3.1) : Số liệu xử lý tại phòng ban                    
                    whereClause = string.Format("NgayTiepNhan : [* TO {0}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *])", ConvertDateToSolr(fromDate_1.ToString("yyyMMdd"), false, true), fromDate.ToString("yyyMMdd"));
                    solrQuery = new SolrQuery(whereClause);
                    // qoCol1 lấy ra tất cả các khiếu nại tồn đọng đến trước thời điểm lấy báo cáo
                    qoCol1 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyId");
                    qoCol1.ExtraParams = extraParamTiepNhan;
                    qoCol1.Start = 0;
                    qoCol1.Rows = int.MaxValue;
                    qoCol1.Grouping = gpTonDong;
                    qoCol1.OrderBy = listSortOrder;
                    //qoCol1.OrderBy = listSortOrder;

                    //List<int> listKhieuNaiIdTonDong = new List<int>();
                    listKhieuNaiIdTonDong = new List<int>();
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol1);
                    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
                    {
                        listKhieuNaiInfo = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.PhongBanXuLyId == phongBanId; });
                        for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                        {
                            listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId);
                        }
                    } // end if(listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)   


                    //List<SolrNet.SortOrder> listSortOrderKhieuNaiIdASCActivityIdASC = new List<SolrNet.SortOrder>();
                    //SolrNet.SortOrder orderKhieuNaiId = new SolrNet.SortOrder("KhieuNaiId", Order.ASC);
                    //SolrNet.SortOrder orderActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
                    //listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderKhieuNaiId);
                    //listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderActivityId);

                    listSortOrderKhieuNaiIdASCActivityIdASC = new List<SolrNet.SortOrder>();
                    orderKhieuNaiId = new SolrNet.SortOrder("KhieuNaiId", Order.ASC);
                    orderActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
                    listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderKhieuNaiId);
                    listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderActivityId);

                    whereClause = string.Format("NgayTiepNhan:[{0} TO {1}] AND HanhDong : (2 3) AND (PhongBanXuLyTruocId : ({2}) OR PhongBanXuLyId : ({2}))", sFromDate, sToDate, phongBanId);

                    solrQuery = new SolrQuery(whereClause);
                    QueryOptions qoCol31 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, NgayTiepNhan, NgayQuaHan, SoThueBao, KhieuNai_NgayTiepNhan, KhieuNai_NgayDongKNSort, KhieuNai_NgayQuaHan");
                    qoCol31.ExtraParams = extraParamTiepNhan;
                    qoCol31.Start = 0;
                    qoCol31.Rows = int.MaxValue;
                    //qoCol3.OrderBy = listSortOrder;
                    qoCol31.OrderBy = listSortOrderKhieuNaiIdASCActivityIdASC;

                    listResult = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol31);
                    listKhieuNaiInfo = new List<KhieuNai_ReportInfo>();
                    List<int> listKhieuNaiIdTiepNhan = new List<int>();
                    if (listResult != null)
                    {
                        for (int i = 0; i < listResult.Count; i++)
                        {
                            if (listResult[i].PhongBanXuLyId == phongBanId &&
                               listResult[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                            //if (listResult[i].PhongBanXuLyId == phongBanId &&
                            //    (listResult[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban ||
                            //        listResult[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi))
                            {
                                if (!listKhieuNaiIdTiepNhan.Contains(listResult[i].KhieuNaiId) && !listKhieuNaiIdTonDong.Contains(listResult[i].KhieuNaiId))
                                {
                                    listKhieuNaiIdTiepNhan.Add(listResult[i].KhieuNaiId);
                                    int curKhieuNaiId = listResult[i].KhieuNaiId;

                                    if (i - 1 >= 0 && listResult[i - 1].KhieuNaiId == listResult[i].KhieuNaiId)
                                    {
                                        if (listResult[i - 1].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                                        {

                                        }
                                        else
                                        {
                                            listKhieuNaiInfo.Add(listResult[i]);
                                        }
                                    }
                                    else
                                    {
                                        listKhieuNaiInfo.Add(listResult[i]);
                                    }
                                }
                            }
                        }
                    }
                    break;

                case 32: //(3): Số liệu PAKN tiếp nhận trong khoảng thời gian lấy báo cáo tại phòng ban (số liệu này là do đơn vị khác chuyển đến ) (3.2) : Số liệu chuyển tiếp ngoài phòng ban
                    whereClause = string.Format("NgayTiepNhan : [* TO {0}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *])", ConvertDateToSolr(fromDate_1.ToString("yyyMMdd"), false, true), fromDate.ToString("yyyMMdd"));
                    solrQuery = new SolrQuery(whereClause);
                    // qoCol1 lấy ra tất cả các khiếu nại tồn đọng đến trước thời điểm lấy báo cáo
                    qoCol1 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyId");
                    qoCol1.ExtraParams = extraParamTiepNhan;
                    qoCol1.Start = 0;
                    qoCol1.Rows = int.MaxValue;
                    qoCol1.Grouping = gpTonDong;
                    qoCol1.OrderBy = listSortOrder;
                    //qoCol1.OrderBy = listSortOrder;

                    listKhieuNaiIdTonDong = new List<int>();
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol1);
                    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
                    {
                        listKhieuNaiInfo = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.PhongBanXuLyId == phongBanId; });
                        for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                        {
                            listKhieuNaiIdTonDong.Add(listKhieuNaiInfo[i].KhieuNaiId);
                        }
                    } // end if(listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)   


                    listSortOrderKhieuNaiIdASCActivityIdASC = new List<SolrNet.SortOrder>();
                    orderKhieuNaiId = new SolrNet.SortOrder("KhieuNaiId", Order.ASC);
                    orderActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
                    listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderKhieuNaiId);
                    listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderActivityId);

                    whereClause = string.Format("NgayTiepNhan:[{0} TO {1}] AND HanhDong : (2 3) AND (PhongBanXuLyTruocId : ({2}) OR PhongBanXuLyId : ({2}))", sFromDate, sToDate, phongBanId);

                    solrQuery = new SolrQuery(whereClause);
                    QueryOptions qoCol32 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, NgayTiepNhan, NgayQuaHan, LDate, SoThueBao, KhieuNai_NgayTiepNhan, KhieuNai_NgayDongKNSort, KhieuNai_NgayQuaHan");
                    qoCol32.ExtraParams = extraParamTiepNhan;
                    qoCol32.Start = 0;
                    qoCol32.Rows = int.MaxValue;
                    //qoCol3.OrderBy = listSortOrder;
                    qoCol32.OrderBy = listSortOrderKhieuNaiIdASCActivityIdASC;

                    listResult = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol32);
                    listKhieuNaiInfo = new List<KhieuNai_ReportInfo>();
                    listKhieuNaiIdTiepNhan = new List<int>();
                    if (listResult != null)
                    {
                        for (int i = 0; i < listResult.Count; i++)
                        {
                            if (listResult[i].PhongBanXuLyId == phongBanId &&
                                listResult[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                            //if (listResult[i].PhongBanXuLyId == phongBanId && 
                            //    (listResult[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban||
                            //        listResult[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi))
                            {
                                if (!listKhieuNaiIdTiepNhan.Contains(listResult[i].KhieuNaiId) && !listKhieuNaiIdTonDong.Contains(listResult[i].KhieuNaiId))
                                {
                                    listKhieuNaiIdTiepNhan.Add(listResult[i].KhieuNaiId);
                                    int curKhieuNaiId = listResult[i].KhieuNaiId;

                                    if (i - 1 >= 0 && listResult[i - 1].KhieuNaiId == listResult[i].KhieuNaiId)
                                    {
                                        if (listResult[i - 1].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                                        {
                                            //listKhieuNaiInfo.Add(listResult[i]);
                                            listKhieuNaiInfo.Add(listResult[i - 1]);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;

                case 4:

                    break;

                case 41: // (4): Số liệu PAKN đã được xử lý trong khoảng thời gian lấy báo cáo tại phòng ban (4.1): Số liệu PAKN đã được đóng tại phòng ban                              
                         //whereClause = string.Format("KhieuNai_NgayDongKNSort:[{0} TO {1}] AND HanhDong:4 AND PhongBanXuLyId:{2}", fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), phongBanId);                    
                    whereClause = string.Format("LDate:[{0} TO {1}] AND HanhDong:4 AND PhongBanXuLyId:{2}", ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanId);
                    solrQuery = new SolrQuery(whereClause);
                    QueryOptions qoCol41 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    //extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyId, HanhDong, NgayTiepNhan, NgayQuaHanPhongBan");
                    extraParamTiepNhan.Add("fl", @"KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLy, NgayTiepNhan, NgayQuaHan, LDate, SoThueBao, PhongBanTiepNhanId, KhieuNai_NgayTiepNhan, KhieuNai_NgayQuaHan");
                    qoCol41.ExtraParams = extraParamTiepNhan;
                    qoCol41.Start = 0;
                    qoCol41.Rows = int.MaxValue;

                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol41);
                    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
                    {
                        List<int> listKhieuNaiId = new List<int>();
                        for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                        {
                            if (!listKhieuNaiId.Contains(listKhieuNaiInfo[i].KhieuNaiId)
                                    && ((listKhieuNaiInfo[i].KhieuNai_NgayTiepNhan >= fromDate && listKhieuNaiInfo[i].KhieuNai_NgayTiepNhan <= toDate && listKhieuNaiInfo[i].PhongBanXuLyId != listKhieuNaiInfo[i].PhongBanTiepNhanId)
                                        || listKhieuNaiInfo[i].KhieuNai_NgayTiepNhan < fromDate)
                                )
                            {
                                listKhieuNaiId.Add(listKhieuNaiInfo[i].KhieuNaiId);
                            }
                            else
                            {
                                listKhieuNaiInfo.RemoveAt(i);
                                i--;
                            }
                        }
                    }
                    break;

                case 42: // (4): Số liệu PAKN đã được xử lý trong khoảng thời gian lấy báo cáo tại phòng ban (4.2): Số liệu PAKN đã được phản hồi (KN đã được đóng trong khoảng thời gian lấy báo cáo)
                    whereClause = string.Format("NgayTiepNhan:[{0} TO {1}] AND HanhDong : (2 3) AND (PhongBanXuLyTruocId : ({2}) OR PhongBanXuLyId : ({2}))", sFromDate, sToDate, phongBanId);

                    solrQuery = new SolrQuery(whereClause);
                    qoCol4 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, NgayTiepNhan, NgayQuaHan, SoThueBao, KhieuNai_NgayTiepNhan, KhieuNai_NgayDongKNSort, KhieuNai_NgayQuaHan");
                    qoCol4.ExtraParams = extraParamTiepNhan;
                    qoCol4.Start = 0;
                    qoCol4.Rows = int.MaxValue;

                    listSortOrderKhieuNaiIdASCActivityIdASC = new List<SolrNet.SortOrder>();
                    orderKhieuNaiId = new SolrNet.SortOrder("KhieuNaiId", Order.ASC);
                    orderActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
                    listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderKhieuNaiId);
                    listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderActivityId);
                    qoCol4.OrderBy = listSortOrderKhieuNaiIdASCActivityIdASC;

                    listResult = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol4);
                    listKhieuNaiInfo = new List<KhieuNai_ReportInfo>();
                    if (listResult != null && listResult.Count > 0)
                    {
                        List<string> listKhieuNaiIdPhanHoi = new List<string>();
                        for (int i = 0; i < listResult.Count; i++)
                        {
                            if (listResult[i].PhongBanXuLyTruocId == phongBanId && listResult[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi)
                            {
                                string sCheck = string.Format("{0}_{1}", listResult[i].KhieuNaiId, listResult[i].PhongBanXuLyTruocId);
                                if (!listKhieuNaiIdPhanHoi.Contains(sCheck))
                                {
                                    listKhieuNaiIdPhanHoi.Add(sCheck);
                                    int curKhieuNaiId = listResult[i].KhieuNaiId;

                                    if (listResult[i].KhieuNai_NgayDongKNSort >= iFromDate && listResult[i].KhieuNai_NgayDongKNSort <= iToDate)
                                    {
                                        bool isValid = true;

                                        for (int j = i; j >= 0; j--)
                                        {
                                            if (listResult[j].KhieuNaiId == curKhieuNaiId)
                                            {
                                                if (listResult[j].PhongBanXuLyTruocId == phongBanId
                                                    && listResult[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                                                {
                                                    isValid = false;
                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }

                                        if (isValid)
                                        {
                                            listKhieuNaiInfo.Add(listResult[i]);
                                        }

                                        //listKhieuNaiInfo.Add(listResult[i]);
                                    }
                                }

                            }
                        }
                    }
                    break;

                case 43: // (4): Số liệu PAKN đã được xử lý trong khoảng thời gian lấy báo cáo tại phòng ban (4.3) : Số liệu PAKN phản hồi đã được trả lại (trả lại trong khoảng thời gian lấy báo cáo)
                    whereClause = string.Format("NgayTiepNhan:[{0} TO {1}] AND HanhDong : (2 3) AND (PhongBanXuLyTruocId : ({2}) OR PhongBanXuLyId : ({2}))", sFromDate, sToDate, phongBanId);

                    solrQuery = new SolrQuery(whereClause);
                    qoCol4 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, NgayTiepNhan, NgayQuaHan, SoThueBao, KhieuNai_NgayTiepNhan, KhieuNai_NgayDongKNSort, KhieuNai_NgayQuaHan");
                    qoCol4.ExtraParams = extraParamTiepNhan;
                    qoCol4.Start = 0;
                    qoCol4.Rows = int.MaxValue;

                    listSortOrderKhieuNaiIdASCActivityIdASC = new List<SolrNet.SortOrder>();
                    orderKhieuNaiId = new SolrNet.SortOrder("KhieuNaiId", Order.ASC);
                    orderActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
                    listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderKhieuNaiId);
                    listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderActivityId);
                    qoCol4.OrderBy = listSortOrderKhieuNaiIdASCActivityIdASC;

                    listResult = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol4);
                    listKhieuNaiInfo = new List<KhieuNai_ReportInfo>();
                    if (listResult != null && listResult.Count > 0)
                    {
                        List<string> listKhieuNaiIdPhanHoi = new List<string>();
                        for (int i = 0; i < listResult.Count; i++)
                        {
                            if (listResult[i].PhongBanXuLyTruocId == phongBanId && listResult[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi)
                            {
                                string sCheck = string.Format("{0}_{1}", listResult[i].KhieuNaiId, listResult[i].PhongBanXuLyTruocId);
                                if (!listKhieuNaiIdPhanHoi.Contains(sCheck))
                                {
                                    listKhieuNaiIdPhanHoi.Add(sCheck);
                                    int curKhieuNaiId = listResult[i].KhieuNaiId;

                                    if (listResult[i].KhieuNai_NgayDongKNSort == 0 || listResult[i].KhieuNai_NgayDongKNSort > iToDate)
                                    {
                                        for (int j = i; j >= 0; j--)
                                        {
                                            if (listResult[j].KhieuNaiId == curKhieuNaiId)
                                            {
                                                if ((listResult[j].PhongBanXuLyId == phongBanId
                                                    && listResult[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                                                    || (
                                                        listResult[j].PhongBanXuLyId == phongBanId
                                                        && listResult[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi
                                                        )
                                                    )
                                                {
                                                    // Thuộc tính LastPhongBanXuLyId : dùng để lưu đơn vị gửi trả lại phản hồi (do phản hồi chưa đạt yêu cầu)
                                                    // Thuộc tính LDate : dùng để lưu lại ngày gửi trả lại phản hồi (do phản hồi chưa đạt yêu cầu)
                                                    listResult[i].LastPhongBanXuLyId = listResult[j].PhongBanXuLyTruocId;
                                                    listResult[i].LDate = listResult[j].NgayTiepNhan;

                                                    listKhieuNaiInfo.Add(listResult[i]);
                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }
                                    }
                                }

                            }
                        }
                    }
                    break;

                case 44: // (4): Số liệu PAKN đã được xử lý trong khoảng thời gian lấy báo cáo tại phòng ban (4.4) : Số liệu PAKN phản hồi chưa được xử lý
                    whereClause = string.Format("NgayTiepNhan:[{0} TO {1}] AND HanhDong : (2 3) AND (PhongBanXuLyTruocId : ({2}) OR PhongBanXuLyId : ({2}))", sFromDate, sToDate, phongBanId);

                    solrQuery = new SolrQuery(whereClause);
                    qoCol4 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, NgayTiepNhan, NgayQuaHan, SoThueBao, KhieuNai_NgayTiepNhan, KhieuNai_NgayDongKNSort, KhieuNai_NgayQuaHan");
                    qoCol4.ExtraParams = extraParamTiepNhan;
                    qoCol4.Start = 0;
                    qoCol4.Rows = int.MaxValue;

                    listSortOrderKhieuNaiIdASCActivityIdASC = new List<SolrNet.SortOrder>();
                    orderKhieuNaiId = new SolrNet.SortOrder("KhieuNaiId", Order.ASC);
                    orderActivityId = new SolrNet.SortOrder("ActivityId", Order.DESC);
                    listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderKhieuNaiId);
                    listSortOrderKhieuNaiIdASCActivityIdASC.Add(orderActivityId);
                    qoCol4.OrderBy = listSortOrderKhieuNaiIdASCActivityIdASC;

                    listResult = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol4);
                    listKhieuNaiInfo = new List<KhieuNai_ReportInfo>();
                    if (listResult != null && listResult.Count > 0)
                    {
                        List<string> listKhieuNaiIdPhanHoi = new List<string>();
                        for (int i = 0; i < listResult.Count; i++)
                        {
                            if (listResult[i].PhongBanXuLyTruocId == phongBanId && listResult[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi)
                            {
                                string sCheck = string.Format("{0}_{1}", listResult[i].KhieuNaiId, listResult[i].PhongBanXuLyTruocId);
                                if (!listKhieuNaiIdPhanHoi.Contains(sCheck))
                                {
                                    listKhieuNaiIdPhanHoi.Add(sCheck);
                                    int curKhieuNaiId = listResult[i].KhieuNaiId;

                                    if (listResult[i].KhieuNai_NgayDongKNSort == 0 || listResult[i].KhieuNai_NgayDongKNSort > iToDate)
                                    {
                                        bool isTraLai = false;
                                        for (int j = i; j >= 0; j--)
                                        {
                                            if (listResult[j].KhieuNaiId == curKhieuNaiId)
                                            {
                                                if ((listResult[j].PhongBanXuLyId == phongBanId
                                                    && listResult[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Chuyển_Phòng_Ban)
                                                    || (
                                                        listResult[j].PhongBanXuLyId == phongBanId
                                                        && listResult[j].HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi
                                                        )
                                                    )
                                                {
                                                    isTraLai = true;
                                                    break;
                                                }
                                            }
                                            else
                                            {
                                                break;
                                            }
                                        }

                                        if (!isTraLai)
                                        {
                                            listKhieuNaiInfo.Add(listResult[i]);
                                        }
                                    }
                                }

                            }
                        }
                    }
                    break;

                case 5:
                    whereClause = string.Format("LDate:[{0} TO {1}]", sFromDate, sToDate);

                    solrQuery = new SolrQuery(whereClause);
                    qoCol31 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, NgayTiepNhan, NgayQuaHan, SoThueBao, KhieuNai_NgayTiepNhan, KhieuNai_NgayDongKNSort, KhieuNai_NgayQuaHan");
                    qoCol31.ExtraParams = extraParamTiepNhan;
                    qoCol31.Start = 0;
                    qoCol31.Rows = int.MaxValue;
                    qoCol31.Grouping = gpTonDong;
                    qoCol31.OrderBy = listSortOrder;

                    listResult = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol31);
                    listKhieuNaiInfo = new List<KhieuNai_ReportInfo>();
                    List<int> listKhieuNaiIdDuocPhanHoiVe = new List<int>();
                    if (listResult != null)
                    {
                        listResult = listResult.FindAll(delegate (KhieuNai_ReportInfo obj)
                        { return obj.PhongBanXuLyId == phongBanId && obj.HanhDong == (int)KhieuNai_Actitivy_HanhDong.KN_Phản_Hồi; });
                        if (listResult != null)
                        {
                            for (int i = 0; i < listResult.Count; i++)
                            {
                                listKhieuNaiInfo.Add(listResult[i]);
                            }
                        }
                    }


                    break;

                case 6: //(5) Số liệu PAKN đang có tại thời điểm lấy báo cáo tại phòng ban                    
                        //whereClause = string.Format("KhieuNai_NgayTiepNhan : [* TO {0}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true), toDatePlus1.ToString("yyyyMMdd"));
                        //whereClause = string.Format("LDate : [* TO {0}]", ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true));
                    whereClause = string.Format("NgayTiepNhan : [* TO {0}]", ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true));
                    solrQuery = new SolrQuery(whereClause);
                    QueryOptions qoCol9 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, HanhDong, NgayTiepNhan, NgayQuaHan, LDate, PhongBanTiepNhanId, SoThueBao, KhieuNai_NgayTiepNhan, KhieuNai_NgayDongKNSort, KhieuNai_NgayQuaHan");
                    qoCol9.ExtraParams = extraParamTiepNhan;
                    qoCol9.Start = 0;
                    qoCol9.Rows = int.MaxValue;
                    qoCol9.Grouping = gpTonDong;
                    qoCol9.OrderBy = listSortOrder;

                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol9);
                    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
                    {
                        listKhieuNaiInfo = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            //return obj.PhongBanXuLyId == phongBanId && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN;
                            return obj.PhongBanXuLyId == phongBanId && (obj.LDate >= toDate || (obj.LDate < toDate && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN));
                        });
                    } // end if(listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)                  

                    break;

                case 7: //(6) Số liệu PAKN đã quá hạn tại thời điểm lấy báo cáo tại phòng ban                    
                        //whereClause = string.Format("KhieuNai_NgayTiepNhan : [* TO {0}] AND (KhieuNai_NgayDongKNSort : 0 OR KhieuNai_NgayDongKNSort : [{1} TO *])", ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true), toDatePlus1.ToString("yyyyMMdd"));
                        //whereClause = string.Format("LDate : [* TO {0}]", ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true));
                    whereClause = string.Format("NgayTiepNhan : [* TO {0}]", ConvertDateToSolr(toDate.ToString("yyyMMdd"), false, true));
                    solrQuery = new SolrQuery(whereClause);
                    QueryOptions qoCol10 = new QueryOptions();
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, HanhDong, NgayTiepNhan, NgayQuaHan, LDate, PhongBanTiepNhanId, SoThueBao, KhieuNai_NgayTiepNhan, KhieuNai_NgayDongKNSort, KhieuNai_NgayQuaHan");
                    qoCol10.ExtraParams = extraParamTiepNhan;
                    qoCol10.Start = 0;
                    qoCol10.Rows = int.MaxValue;
                    qoCol10.Grouping = gpTonDong;
                    qoCol10.OrderBy = listSortOrder;

                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoCol10);
                    if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)
                    {
                        listKhieuNaiInfo = listKhieuNaiInfo.FindAll(delegate (KhieuNai_ReportInfo obj)
                        {
                            //return obj.PhongBanXuLyId == phongBanId && toDate >= obj.NgayQuaHan && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN;
                            return obj.PhongBanXuLyId == phongBanId && toDate >= obj.NgayQuaHan && (obj.LDate >= toDate || (obj.LDate < toDate && obj.HanhDong != (int)KhieuNai_Actitivy_HanhDong.Đóng_KN));
                        });
                    } // end if(listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 0)  
                    break;
            }

            // Sắp xếp theo KhieuNaiId tăng dần
            if (listKhieuNaiInfo != null && listKhieuNaiInfo.Count > 1)
            {
                if (listKhieuNaiInfo[0].KhieuNaiId != null && listKhieuNaiInfo[0].KhieuNaiId > 0)
                {
                    listKhieuNaiInfo = listKhieuNaiInfo.OrderBy(t => t.KhieuNaiId).ToList();
                }
                else if (listKhieuNaiInfo[0].Id != null && listKhieuNaiInfo[0].Id > 0)
                {
                    listKhieuNaiInfo = listKhieuNaiInfo.OrderBy(t => t.Id).ToList();
                }
            }

            return listKhieuNaiInfo;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 27/02/2014
        /// Todo : Hiển thị danh sách chi tiết khiếu nại
        /// </summary>
        /// <param name="tenTruyCap"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="reportType">
        ///     1 : Danh sách khiếu nại tiếp nhận
        ///     2 : Danh sách khiếu nại đã tham gia xử lý
        ///     3 : Danh sách khiếu nại đã tham gia xử lý mà khiếu nại đã được đóng
        ///     4 : Danh sách khiếu nại tồn đọng
        /// </param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoSoLuongPAKNDaXuLyTTPTDV_DanhSachKhieuNai(int phongBanXuLyId, string tenTruyCap, DateTime fromDate, DateTime toDate, int reportType)
        {
            List<KhieuNai_ReportInfo> listKhieuNaiInfo = new List<KhieuNai_ReportInfo>();

            SolrQuery solrQuery;
            string whereClause = string.Empty;
            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);

            SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("ActivityId", Order.DESC);
            List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            listSortOrder.Add(sortOrder);

            QueryOptions queryOptionTiepNhan = null;
            Dictionary<string, string> extraParamTiepNhan = null;
            string whereClauseTiepNhan = string.Empty;

            GroupingParameters gpKhieuNai = new GroupingParameters();
            List<string> listField = new List<string>();
            listField.Add("KhieuNaiId");
            gpKhieuNai.Fields = listField;
            gpKhieuNai.Main = true;
            gpKhieuNai.Limit = 1;
            gpKhieuNai.OrderBy = listSortOrder;
            tenTruyCap = tenTruyCap.Trim().Length > 0 ? tenTruyCap.Trim() : "\"\"";

            switch (reportType)
            {
                case 1: // Danh sách  khiếu nại tiếp nhận
                    queryOptionTiepNhan = new QueryOptions();
                    //Lấy ra những trường nào
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, SoThueBao, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, TrangThai, NgayTiepNhan, LDate");

                    queryOptionTiepNhan.ExtraParams = extraParamTiepNhan;

                    queryOptionTiepNhan.Start = 0;
                    queryOptionTiepNhan.Rows = int.MaxValue;
                    //queryOptionTiepNhan.Grouping = gpKhieuNai;

                    //Where điều kiện   
                    //string whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND PhongBanXuLyId:{2} AND HanhDong : (0 1 2)", sFromDate, sToDate, phongBanXuLyId);                    
                    whereClauseTiepNhan = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiXuLy:{2} AND HanhDong : (0 1 2) AND PhongBanXuLyId : {3}", sFromDate, sToDate, tenTruyCap, phongBanXuLyId);
                    solrQuery = new SolrQuery(whereClauseTiepNhan);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, queryOptionTiepNhan);

                    break;
                case 2: // Danh sách khiếu nại đã tham gia xử lý                    
                    QueryOptions qoXuLy = new QueryOptions();
                    //Lấy ra những trường nào
                    extraParamTiepNhan = new Dictionary<string, string>();
                    extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, SoThueBao, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, TrangThai, NgayTiepNhan, LDate");

                    qoXuLy.ExtraParams = extraParamTiepNhan;

                    qoXuLy.Start = 0;
                    qoXuLy.Rows = int.MaxValue;
                    //qoXuLy.Grouping = gpKhieuNai;
                    //Where điều kiện             

                    //string whereClauseXuLy = string.Format("LDate:[{0} TO {1}] AND NguoiXuLyTruoc:{2} AND HanhDong : (1 2 3) AND PhongBanXuLyTruocId:{3}", sFromDate, sToDate, tenTruyCap, phongBanXuLyId);
                    // Lấy ngày tiếp nhận bởi NgayTiepNhan của đơn vị được nhận chính là ngày LDate của NguoiXuLyTruoc
                    string whereClauseXuLy = string.Format("NgayTiepNhan:[{0} TO {1}] AND NguoiXuLyTruoc:{2} AND HanhDong : (1 2 3) AND PhongBanXuLyTruocId:{3}", sFromDate, sToDate, tenTruyCap, phongBanXuLyId);

                    solrQuery = new SolrQuery(whereClauseXuLy);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoXuLy);

                    break;
                case 3: // Danh sách khiếu nại tham gia xử lý mà khiếu nại đã được đóng
                        //qoXuLy = new QueryOptions();
                        ////Lấy ra những trường nào
                        //extraParamTiepNhan = new Dictionary<string, string>();
                        //extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, SoThueBao, PhongBanXuLyTruocId, PhongBanXuLyId, NguoiXuLyTruoc, NguoiXuLy, HanhDong, TrangThai, NgayTiepNhan, LDate");

                    //qoXuLy.ExtraParams = extraParamTiepNhan;

                    //qoXuLy.Start = 0;
                    //qoXuLy.Rows = int.MaxValue;
                    //qoXuLy.OrderBy = listSortOrder;

                    ////Where điều kiện               
                    //whereClauseXuLy = string.Format("LDate:[{0} TO {1}] AND NguoiXuLy:{2} AND TrangThai:3", sFromDate, sToDate, tenTruyCap);

                    //solrQuery = new SolrQuery(whereClauseXuLy);
                    //listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoXuLy);
                    //listKhieuNaiIdXuLy = new List<int>();
                    //for (int i = 0; i < listKhieuNaiInfo.Count; i++)
                    //{
                    //    if (tenTruyCap == listKhieuNaiInfo[i].NguoiXuLy &&
                    //        !listKhieuNaiIdXuLy.Contains(listKhieuNaiInfo[i].KhieuNaiId))
                    //    {
                    //        listKhieuNaiIdXuLy.Add(listKhieuNaiInfo[i].KhieuNaiId);
                    //    }
                    //    else
                    //    {
                    //        listKhieuNaiInfo.RemoveAt(i);
                    //        i--;
                    //    }
                    //}

                    break;
                case 4: // Tính số lượng tồn đọng (tính đến thời điểm hiện tại)                                
                    string whereClauseTonDong = string.Format("PhongBanXuLyId : {0} AND NguoiXuLy:{1} AND -TrangThai:3", phongBanXuLyId, tenTruyCap);
                    solrQuery = new SolrQuery(whereClauseTonDong);

                    QueryOptions queryOptionTonDong = new QueryOptions();
                    //Lấy ra những trường nào
                    var extraParamTonDong = new Dictionary<string, string>();
                    extraParamTonDong.Add("fl", @"Id, SoThueBao, NguoiXuLyTruoc, NgayTiepNhan");

                    queryOptionTonDong.ExtraParams = extraParamTonDong;

                    queryOptionTonDong.Start = 0;
                    queryOptionTonDong.Rows = int.MaxValue;

                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOptionTonDong);

                    break;
            }

            return listKhieuNaiInfo;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 30/06/2014
        /// Todo : Danh sách khiếu nại theo các tiêu chí của báo cáo tổng hợp của tổ GQKN
        /// </summary>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <param name="loaiKhieuNaiId">
        ///     Id của Loại khiếu nại (LoaiKhieuNaiId, LinhVucChungId, LinhVucConId)
        /// </param>
        /// <param name="loaiKhieuNaiType">
        ///     = 1 : Thống kê theo loại khiếu nại
        ///     = 2 : Thống kê  theo lĩnh vực chung
        ///     = 3 : Thống kê theo lĩnh vực con
        /// </param>
        /// <param name="reportType">
        ///     = 1 : Lũy kế khiếu nại đã quyết trước ngày lấy báo cáo
        ///     = 2 : Lũy kế khiếu nại tồn đọng trước ngày lấy báo cáo
        ///     = 3 : Số lượng tiếp nhận trong khoảng thời gian lấy báo cáo
        ///     = 4 : Số lượng đã đã giải quyết trong khoảng thời gian lấy báo cáo
        /// </param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> BaoCaoTongHopToGQKN_DanhSachKhieuNai(int phongBanXuLyId, DateTime fromDate, DateTime toDate, int loaiKhieuNaiType, int loaiKhieuNaiId, int reportType)
        {
            List<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            string iStartYear = string.Format("{0}0101", fromDate.Year);
            string iFromDateMinus1 = fromDate.Subtract(new TimeSpan(1, 0, 0, 0)).ToString("yyyyMMdd");

            string whereClause = string.Empty;

            switch (loaiKhieuNaiType)
            {
                case 1: // LoaiKhieuNai
                    whereClause = string.Format("LoaiKhieuNaiId : {0} ", loaiKhieuNaiId);
                    break;
                case 2: // LinhVucChung
                    whereClause = string.Format("LinhVucChungId : {0} ", loaiKhieuNaiId);
                    break;
                case 3: // LinhVucCon
                    whereClause = string.Format("LinhVucConId : {0} ", loaiKhieuNaiId);
                    break;
            }

            SolrQuery solrQuery = null;
            QueryOptions qoKhieuNai = new QueryOptions();
            var extraParamKhieuNai = new Dictionary<string, string>();
            extraParamKhieuNai.Add("fl", @"Id, KhieuNaiId, SoThueBao, NgayTiepNhan, NgayDongKN, NguoiXuLy, KhieuNai_NgayTiepNhan");

            qoKhieuNai.ExtraParams = extraParamKhieuNai;

            qoKhieuNai.Start = 0;
            qoKhieuNai.Rows = int.MaxValue;

            switch (reportType)
            {
                case 1: // Lũy kế khiếu nại đã quyết trước ngày lấy báo cáo
                    whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 AND PhongBanXuLyId : {3}", whereClause, iStartYear, iFromDateMinus1, phongBanXuLyId);
                    solrQuery = new SolrQuery(whereClause);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
                    break;
                case 2: //  Lũy kế khiếu nại tồn đọng trước ngày lấy báo cáo
                    whereClause = string.Format("{0} AND NgayTiepNhanSort : [* TO {1}] AND -TrangThai : 3 AND (PhongBanTiepNhanId : {2} OR PhongBanXuLyId : {2})", whereClause, iFromDateMinus1, phongBanXuLyId);
                    solrQuery = new SolrQuery(whereClause);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
                    break;
                case 3: // Số lượng tiếp nhận trong khoảng thời gian lấy báo cáo
                    whereClause = string.Format("{0} AND NgayTiepNhan : [{1} TO {2}] AND (HanhDong:0 OR HanhDong:2) AND PhongBanXuLyId:{3}", whereClause, ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false), ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true), phongBanXuLyId);
                    solrQuery = new SolrQuery(whereClause);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoKhieuNai);
                    break;
                case 4: // Số lượng đã đã giải quyết trong khoảng thời gian lấy báo cáo
                    whereClause = string.Format("{0} AND NgayDongKNSort : [{1} TO {2}] AND TrangThai : 3 AND PhongBanXuLyId:{3}", whereClause, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"), phongBanXuLyId);
                    solrQuery = new SolrQuery(whereClause);
                    listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoKhieuNai);
                    break;
            }

            return listKhieuNaiInfo;
        }

        #endregion

        #region Public methods

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 02/04/2014
        /// Todo : Lấy danh sách Activity của khiếu nại
        /// </summary>
        /// <param name="khieuNaiId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> GetListActivityKhieuNai(int khieuNaiId, DateTime fromDate, DateTime toDate)
        {
            List<KhieuNai_ReportInfo> listKhieuNaiInfo = null;
            SolrQuery solrQuery = null;
            QueryOptions qoActivity = new QueryOptions();
            Dictionary<string, string> extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"ActivityId, KhieuNaiId, PhongBanXuLyTruocId, PhongBanXuLyId, TenPhongBanXuLyTruoc, TenPhongBanXuLy, NguoiXuLyTruoc, NguoiXuLy, HanhDong, NgayTiepNhan, NgayQuaHan, SoThueBao, IsQuaHanPhongBanXuLy, LDate");
            qoActivity.ExtraParams = extraParamTiepNhan;
            qoActivity.Start = 0;
            qoActivity.Rows = int.MaxValue;

            List<SolrNet.SortOrder> listSortOrderActivityIdASC = new List<SolrNet.SortOrder>();
            SolrNet.SortOrder orderActivityId = new SolrNet.SortOrder("ActivityId", Order.ASC);
            listSortOrderActivityIdASC.Add(orderActivityId);
            qoActivity.OrderBy = listSortOrderActivityIdASC;

            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);
            string whereClause = string.Format("KhieuNaiId:{0} AND LDate : [* TO {1}]", khieuNaiId, sToDate);
            solrQuery = new SolrQuery(whereClause);

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoActivity);

            return listKhieuNaiInfo;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 25/04/2014
        /// Todo : Hiển thị số lượng khiếu nại (được chuyển đi từ phòng phongBanXuLyTruocId) đã tiếp nhận của các phòng ban
        /// </summary>
        /// <param name="phongBanXuLyTruocId"></param>
        /// <param name="loaiKhieuNaiId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public DataTable BaoCaoSoLuongKNCacPhongBanDangDaTiepNhan(int phongBanXuLyTruocId, int loaiKhieuNaiId, DateTime fromDate, DateTime toDate)
        {
            string whereClauseLoaiKhieuNai = string.Empty;
            for (int i = 0; i < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; i++)
            {
                if (LoaiKhieuNaiImpl.ListLoaiKhieuNai[i].Id == loaiKhieuNaiId)
                {
                    switch (LoaiKhieuNaiImpl.ListLoaiKhieuNai[i].Cap)
                    {
                        case 1:
                            whereClauseLoaiKhieuNai = " AND LoaiKhieuNaiId : " + loaiKhieuNaiId;
                            break;
                        case 2:
                            whereClauseLoaiKhieuNai = " AND LinhVucChungId : " + loaiKhieuNaiId;
                            break;
                        case 3:
                            whereClauseLoaiKhieuNai = " AND LinhVucConId : " + loaiKhieuNaiId;
                            break;
                    }
                    break;
                }
            }

            if (whereClauseLoaiKhieuNai.Length == 0)
                return null;

            DataTable dtResult = new DataTable();
            dtResult.Columns.Add("PhongBanId");
            dtResult.Columns.Add("TenPhongBan");
            dtResult.Columns.Add("SoLuongKN");

            List<PhongBanInfo> listPhongBan = new PhongBanImpl().GetList();
            if (listPhongBan == null || listPhongBan.Count == 0)
            {
                return null;
            }
            else
            {
                for (int i = 0; i < listPhongBan.Count; i++)
                {
                    DataRow row = dtResult.NewRow();
                    row["PhongBanId"] = listPhongBan[i].Id;
                    row["TenPhongBan"] = listPhongBan[i].Name;
                    row["SoLuongKN"] = 0;
                    dtResult.Rows.Add(row);
                }
            }


            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);
            string whereClause = string.Format("PhongBanXuLyTruocId:{0} AND -PhongBanXuLyId:{0} AND NgayTiepNhan : [{1} TO {2}] {3}", phongBanXuLyTruocId, sFromDate, sToDate, whereClauseLoaiKhieuNai);
            SolrQuery solrQuery = new SolrQuery(whereClause);

            QueryOptions qoTiepNhan = new QueryOptions();
            Dictionary<string, string> extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"");
            qoTiepNhan.ExtraParams = extraParamTiepNhan;
            qoTiepNhan.Start = 0;
            qoTiepNhan.Rows = 0;

            FacetParameters fpTiepNhan = new FacetParameters();
            SolrFacetFieldQuery facetField = new SolrFacetFieldQuery("PhongBanXuLyId");
            fpTiepNhan.Queries.Add(facetField);
            fpTiepNhan.Limit = 1000;
            fpTiepNhan.MinCount = 1;
            qoTiepNhan.Facet = fpTiepNhan;

            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoTiepNhan);
            GetCountOfFacet(dtResult, "PhongBanId", "SoLuongKN", listKhieuNaiInfo);

            for (int i = 0; i < dtResult.Rows.Count; i++)
            {
                if (dtResult.Rows[i]["SoLuongKN"].ToString() == "0")
                {
                    dtResult.Rows.RemoveAt(i);
                    i--;
                }
            }

            return dtResult;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 1/05/2015
        /// Todo : Hiển thị số lượng khiếu nại theo loại khiếu nại/lĩnh vực chung/lĩnh vực con đang tồn ở phòng ban
        /// </summary>
        /// <param name="phongBanXuLyTruocId"></param>
        /// <param name="loaiKhieuNaiId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> DanhSachKhieuNaiChuaDong(int phongBanXuLyId, int loaiKhieuNaiId, DateTime fromDateNgayTiepNhan, DateTime toDateNgayTiepNhan)
        {
            string whereClauseLoaiKhieuNai = string.Empty;
            DateTime timeNow = DateTime.Now;

            for (int i = 0; i < LoaiKhieuNaiImpl.ListLoaiKhieuNai.Count; i++)
            {
                if (LoaiKhieuNaiImpl.ListLoaiKhieuNai[i].Id == loaiKhieuNaiId)
                {
                    switch (LoaiKhieuNaiImpl.ListLoaiKhieuNai[i].Cap)
                    {
                        case 1:
                            whereClauseLoaiKhieuNai = " AND LoaiKhieuNaiId : " + loaiKhieuNaiId;
                            break;
                        case 2:
                            whereClauseLoaiKhieuNai = " AND LinhVucChungId : " + loaiKhieuNaiId;
                            break;
                        case 3:
                            whereClauseLoaiKhieuNai = " AND LinhVucConId : " + loaiKhieuNaiId;
                            break;
                    }
                    break;
                }
            }

            if (whereClauseLoaiKhieuNai.Length == 0)
                return null;

            string whereClauseNgayTiepNhan = string.Empty;
            if (fromDateNgayTiepNhan.Year < DateTime.MaxValue.Year && toDateNgayTiepNhan.Year < DateTime.MaxValue.Year)
            {
                whereClauseNgayTiepNhan = string.Format(" AND NgayTiepNhanSort : [{0} TO {1}]", fromDateNgayTiepNhan.ToString("yyyyMMdd"), toDateNgayTiepNhan.ToString("yyyyMMdd"));
            }
            else if (fromDateNgayTiepNhan.Year < DateTime.MaxValue.Year)
            {
                whereClauseNgayTiepNhan = string.Format(" AND NgayTiepNhanSort : [{0} TO *]", fromDateNgayTiepNhan.ToString("yyyyMMdd"));
            }
            else if (toDateNgayTiepNhan.Year < DateTime.MaxValue.Year)
            {
                whereClauseNgayTiepNhan = string.Format(" AND NgayTiepNhanSort : [* TO {0}]", toDateNgayTiepNhan.ToString("yyyyMMdd"));
            }

            string whereClause = string.Format("PhongBanXuLyId:{0} AND -TrangThai:3 AND NgayQuaHanPhongBanXuLy:[* TO {1}] {2} {3}", phongBanXuLyId, ConvertUtility.ConvertDateTimeToSolr(timeNow, timeNow.Hour, timeNow.Minute, timeNow.Second, 999), whereClauseLoaiKhieuNai, whereClauseNgayTiepNhan);
            SolrQuery solrQuery = new SolrQuery(whereClause);

            QueryOptions qoTiepNhan = new QueryOptions();
            Dictionary<string, string> extraParamTiepNhan = new Dictionary<string, string>();
            extraParamTiepNhan.Add("fl", @"Id, SoThueBao, NguoiXuLy, NgayTiepNhan, NgayQuaHanPhongBanXuLy, NgayQuaHan");
            qoTiepNhan.ExtraParams = extraParamTiepNhan;
            qoTiepNhan.Start = 0;
            qoTiepNhan.Rows = int.MaxValue;

            SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, qoTiepNhan);

            return listKhieuNaiInfo;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 24/07/2014
        /// Todo : Lấy danh sách Activity gần nhất của từng khiếu nại trong khoảng thời gian truyền vào
        /// </summary>
        /// <param name="fieldDate">
        ///     LDate/NgayTiepNhan
        /// </param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> ListActivityInRangeDate(string fieldDate, DateTime fromDate, DateTime toDate)
        {
            List<KhieuNai_ReportInfo> listKhieuNaiReportInfo = null;
            string sFromDate = ConvertDateToSolr(fromDate.ToString("yyyyMMdd"), true, false);
            string sToDate = ConvertDateToSolr(toDate.ToString("yyyyMMdd"), false, true);
            string sNextToDate = ConvertDateToSolr(toDate.AddDays(1).ToString("yyyyMMdd"), true, false);

            string whereClause = string.Empty;

            switch (fieldDate.ToLower())
            {
                case "ldate":
                    whereClause = string.Format("LDate : [{0} TO {1}] OR (LDate : [{2} TO *] AND NgayTiepNhan : [{0} TO {1}])", sFromDate, sToDate, sNextToDate);
                    //whereClause = string.Format("LDate : [{0} TO {1}] OR (LDate : [{2} TO *] AND NgayTiepNhan : [{0} TO {1}])", sFromDate, sToDate, sNextToDate);
                    break;

                case "ngaytiepnhan":
                    whereClause = string.Format("NgayTiepNhan : [{0} TO {1}]", sFromDate, sToDate);
                    break;

                case "ngayquahanphongban":
                    whereClause = string.Format("NgayTiepNhan:[* TO {0}] AND LDate:[* TO {0}] AND -HanhDong:4", sToDate);
                    break;

                default:
                    whereClause = string.Format("LDate : [{0} TO {1}] OR (LDate : [{2} TO *] AND NgayTiepNhan : [{0} TO {1}])", sFromDate, sToDate, sNextToDate);
                    break;
            } // end switch(fieldDate.ToLower())


            QueryOptions qoActivity = new QueryOptions();
            Dictionary<string, string> extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", "*");
            qoActivity.ExtraParams = extraParam;

            List<SolrNet.SortOrder> listSortOrder = new List<SolrNet.SortOrder>();
            SolrNet.SortOrder sortOrder = new SolrNet.SortOrder("Id", Order.DESC);
            listSortOrder.Add(sortOrder);

            GroupingParameters gpActivity = new GroupingParameters();
            gpActivity.Fields = new List<string>();
            gpActivity.Fields.Add("KhieuNaiId");
            gpActivity.Limit = 1;
            gpActivity.Main = true;
            gpActivity.OrderBy = listSortOrder;

            qoActivity.Grouping = gpActivity;
            SolrQuery solrQuery = new SolrQuery(whereClause);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoActivity);

            return listKhieuNaiReportInfo;
        }

        public List<KhieuNai_ReportInfo> ListKhieuNaiDaDong(DateTime toDate)
        {
            List<KhieuNai_ReportInfo> listKhieuNaiReportInfo = null;

            string whereClause = string.Format("TrangThai:3 AND NgayDongKNSort:[* TO {0}]", toDate.ToString("yyyyMMdd"));


            QueryOptions qoKhieuNai = new QueryOptions();
            Dictionary<string, string> extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", "Id");
            qoKhieuNai.ExtraParams = extraParam;


            SolrQuery solrQuery = new SolrQuery(whereClause);
            listKhieuNaiReportInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_ACTIVITY, solrQuery, qoKhieuNai);

            return listKhieuNaiReportInfo;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 24/07/2014
        /// Todo : Lấy ra danh sách khiếu nại theo các điều kiện
        /// </summary>
        /// <param name="DoiTacId"></param>
        /// <param name="phongBanXuLyId"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> ListKhieuNaiQuaHanActivity(List<int> listKhuVucXuLyId, List<int> listDoiTacXuLyId, List<int> listPhongBanXuLyId, DateTime fromDate, DateTime toDate)
        {
            List<KhieuNai_ReportInfo> listActivity = ListActivityInRangeDate("ngayquahanphongban", fromDate, toDate);
            List<KhieuNai_ReportInfo> listKhieuNaiDaDong = ListKhieuNaiDaDong(toDate);
            //List<KhieuNai_ReportInfo> listActivity = ListActivityInRangeDate("ldate", fromDate, toDate);
            if (listActivity == null || listActivity.Count == 0)
                return null;
            if (listKhieuNaiDaDong != null && listKhieuNaiDaDong.Count > 0)
            {
                for (int i = 0; i < listKhieuNaiDaDong.Count; i++)
                {
                    for (int j = 0; j < listActivity.Count; j++)
                    {
                        if (listKhieuNaiDaDong[i].Id == listActivity[j].KhieuNaiId)
                        {
                            listActivity.RemoveAt(j);
                            j--;
                            break;
                        }
                    }

                    listKhieuNaiDaDong.RemoveAt(i);
                    i--;
                }
            }

            //List<KhieuNai_ReportInfo> listActivityResult = new List<KhieuNai_ReportInfo>();
            for (int i = 0; i < listActivity.Count; i++)
            {
                if (listActivity[i].HanhDong == (int)KhieuNai_Actitivy_HanhDong.Đóng_KN)
                {
                    listActivity.RemoveAt(i);
                    i--;
                    continue;
                }

                if (listKhuVucXuLyId != null && listKhuVucXuLyId.Count > 0)
                {
                    if (!listKhuVucXuLyId.Contains(listActivity[i].KhuVucXuLyId) ||
                        (listActivity[i].NgayQuaHan > listActivity[i].LDate || listActivity[i].NgayQuaHan > toDate))
                    {
                        listActivity.RemoveAt(i);
                        i--;
                        continue;
                    }
                }

                if (listDoiTacXuLyId != null && listDoiTacXuLyId.Count > 0)
                {
                    if (!listDoiTacXuLyId.Contains(listActivity[i].DoiTacXuLyId) ||
                        (listActivity[i].NgayQuaHan > listActivity[i].LDate || listActivity[i].NgayQuaHan > toDate))
                    {
                        listActivity.RemoveAt(i);
                        i--;
                        continue;
                    }
                }

                if (listPhongBanXuLyId != null && listPhongBanXuLyId.Count > 0)
                {
                    if (!listPhongBanXuLyId.Contains(listActivity[i].PhongBanXuLyId) ||
                        (listActivity[i].NgayQuaHan > listActivity[i].LDate || listActivity[i].NgayQuaHan > toDate))
                    {
                        listActivity.RemoveAt(i);
                        i--;
                    }
                }
            }

            return listActivity;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 05/08/2014
        /// Todo : Lấy danh sách khiếu nại đã đóng theo người sử dụng trong khoảng thời gian
        /// </summary>
        /// <param name="phongBanId">
        ///     = -1 : Không cần tìm kiếm theo phòng ban
        ///     != -1 : Tìm kiếm theo phongBanXuLyId
        /// </param>
        /// <param name="tenTruyCap"></param>
        /// <param name="fromDate"></param>
        /// <param name="toDate"></param>
        /// <returns></returns>
        public List<KhieuNai_ReportInfo> ListKhieuNaiDongByTenTruyCap(int phongBanId, string tenTruyCap, DateTime fromDate, DateTime toDate)
        {
            List<KhieuNai_ReportInfo> listKhieuNaiInfo = null;

            string whereClause = string.Format("NguoiXuLy:({0}) AND NgayDongKNSort:[{1} TO {2}]", tenTruyCap, fromDate.ToString("yyyyMMdd"), toDate.ToString("yyyyMMdd"));
            if (phongBanId != -1)
            {
                whereClause = string.Format("{0} AND PhongBanXuLyId : {1}", whereClause, phongBanId);
            }

            SolrQuery solrQuery = new SolrQuery(whereClause);
            QueryOptions queryOption = new QueryOptions();
            //Lấy ra những trường nào
            var extraParam = new Dictionary<string, string>();
            extraParam.Add("fl", @"Id, SoThueBao, NgayTiepNhan, NgayDongKN");
            queryOption.ExtraParams = extraParam;
            queryOption.Start = 0;
            queryOption.Rows = int.MaxValue;

            listKhieuNaiInfo = QuerySolrBase<KhieuNai_ReportInfo>.QuerySolr(URL_SOLR_GQKN, solrQuery, queryOption);

            return listKhieuNaiInfo;
        }

        #endregion

        #region Private methods

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 22/10/2013
        /// Todo : Chuyển date từ dạng int sang dạng string (của solr)
        /// Edited: thay ':' thanh '.' trong phan dinh dang minigay thoi gian: truongvv 07/06/2016
        /// </summary>
        /// <param name="date">format : yyyyMMdd</param>
        /// <returns></returns>
        public string ConvertDateToSolr(string date, bool isStart, bool isEnd)
        {
            string sDate = string.Empty;
            sDate = string.Format("{0}-{1}-{2}", date.Substring(0, 4), date.Substring(4, 2), date.Substring(6, 2));

            if (isStart)
            {
                sDate = string.Format("{0}T00:00:00.00Z", sDate);
            }
            else if (isEnd)
            {
                sDate = string.Format("{0}T23:59:59.999Z", sDate);
            }
            else
            {
                sDate = string.Format("{0}T00:00:00.00Z", sDate);
            }

            return sDate;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 24/07/2014
        /// Todo : Chuyển dữ liệu DateTime của C# sang dữ liệu DateTime của Solr
        /// </summary>
        /// <param name="date"></param>
        /// <returns></returns>
        private string ConvertDateTimeToSolr(DateTime date)
        {
            string sDate = string.Empty;
            sDate = string.Format("{0}-{1}-{2}T{3}:{4}:{5}:{6}Z", date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, date.Millisecond);

            return sDate;
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 12/10/2013
        /// Todo : Set giá trị vào datatable
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="colName"></param>
        /// <param name="listKhieuNaiInfo"></param>
        private void GetCountOfFacet(DataTable dtKhieuNai, string colNameId, string colName, SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo)
        {
            if (dtKhieuNai == null || dtKhieuNai.Rows.Count == 0 || colName == null || colName.Length == 0 || listKhieuNaiInfo == null)
                return;

            foreach (var kv in listKhieuNaiInfo.FacetFields)
            {
                foreach (var values in kv.Value)
                {
                    for (int i = 0; i < dtKhieuNai.Rows.Count; i++)
                    {
                        if (values.Key == dtKhieuNai.Rows[i][colNameId].ToString())
                        {
                            dtKhieuNai.Rows[i][colName] = values.Value;
                            break;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 07/11/2013
        /// Todo : Set giá trị của facetDate vào datatable
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="colName"></param>
        /// <param name="listKhieuNaiInfo"></param>
        private void GetCountOfFacetDate(DataTable dtKhieuNai, string colNameId, string colName, SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo)
        {
            if (dtKhieuNai == null || dtKhieuNai.Rows.Count == 0 || colName == null || colName.Length == 0 || listKhieuNaiInfo == null)
                return;

            DateTime nullDateTime = new DateTime(1900, 01, 01);

            foreach (var kv in listKhieuNaiInfo.FacetDates)
            {
                foreach (var values in kv.Value.DateResults)
                {
                    for (int i = 0; i < dtKhieuNai.Rows.Count; i++)
                    {
                        if (values.Key == ConvertUtility.ToDateTime(dtKhieuNai.Rows[i][colNameId], nullDateTime))
                        {
                            dtKhieuNai.Rows[i][colName] = values.Value;
                            break;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 11/12/2013
        /// Todo : Lấy dữ liệu của facet query
        /// </summary>
        /// <param name="dtKhieuNai"></param>
        /// <param name="fieldQuery"></param>
        /// <param name="colNameId"></param>
        /// <param name="colName"></param>
        /// <param name="listKhieuNaiInfo"></param>
        private void GetCountOfFacetQueries(DataTable dtKhieuNai, string colNameId, string colName, SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo, bool isAppend = false)
        {
            if (dtKhieuNai == null || dtKhieuNai.Rows.Count == 0 || colName == null || colName.Length == 0 || listKhieuNaiInfo == null)
                return;

            DateTime nullDateTime = new DateTime(1900, 01, 01);

            foreach (var kv in listKhieuNaiInfo.FacetQueries)
            {
                for (int i = 0; i < dtKhieuNai.Rows.Count; i++)
                {
                    if (kv.Key.ToLower() == dtKhieuNai.Rows[i][colNameId].ToString().ToLower())
                    {
                        if (!isAppend)
                        {
                            dtKhieuNai.Rows[i][colName] = kv.Value;
                        }
                        else
                        {
                            dtKhieuNai.Rows[i][colName] = ConvertUtility.ToInt32(dtKhieuNai.Rows[i][colName], 0) + kv.Value;
                        }
                        break;
                    }
                }
            }

        }

        /// <summary>
        /// Author : Phi Hoang Hai
        /// Created date : 12/10/2013
        /// Todo : Set giá trị vào datatable đối với pivot có 2 cấp
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="colName"></param>
        /// <param name="listKhieuNaiInfo"></param>
        private void GetCountOfPivot2Level(DataTable dtKhieuNai, List<string> listColumns, string colName, SolrQueryResults<KhieuNai_ReportInfo> listKhieuNaiInfo)
        {
            if (dtKhieuNai == null || dtKhieuNai.Rows.Count == 0 || colName == null || colName.Length == 0 || listKhieuNaiInfo == null)
                return;

            foreach (var itemPivot in listKhieuNaiInfo.FacetPivots)
            {
                foreach (var itemCap1 in itemPivot.Value)
                {
                    if (itemCap1.HasChildPivots)
                    {
                        foreach (DataRow row in dtKhieuNai.Rows)
                        {
                            if (row[listColumns[0]].ToString() == itemCap1.Value)
                            {
                                foreach (var itemCap2 in itemCap1.ChildPivots)
                                {
                                    if (row[listColumns[1]].ToString() == itemCap2.Value)
                                    {
                                        row[colName] = itemCap2.Count;
                                    } // end if(row[listColumns[1]].ToString() == itemCap2.Value)
                                } // end foreach (var itemCap2 in itemCap1.ChildPivots)
                            } // end if(row[listColumns[0]].ToString() == itemCap1.Value)
                        } // end foreach (DataRow row in dtKhieuNai.Rows)                        
                    } // end if (itemCap1.HasChildPivots)
                } // end foreach (var itemPivot in listKhieuNaiInfo.FacetPivots)
            } // end foreach(var itemPivot in listKhieuNaiInfo.FacetPivots)                   
        }

        #endregion
    }
}

